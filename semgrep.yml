rules:
- id: Semgrep_generic.secrets.gitleaks.adafruit-api-key.adafruit-api-key
  languages:
  - c
  - python
  - visualforce
  - cpp
  - dockerfile
  - php
  - elixir
  - shell
  - csharp
  - json
  - typescript
  - apex
  - kotlin
  - terraform
  - ruby
  - scala
  - go
  - yaml
  - java
  - javascript
  - rust
  - swift
  - dart
  - clojure
  message: 'adafruit-api-key

    A gitleaks adafruit-api-key was detected which attempts to identify hard-coded
    credentials.'
  metadata:
    category: Security
    explanation: '## adafruit-api-key

      A gitleaks adafruit-api-key was detected which attempts to identify hard-coded
      credentials. It is not recommended to store credentials in source-code, as this
      risks secrets being leaked and used by either an internal or external malicious
      adversary. It is recommended to use environment variables to securely provide
      credentials or retrieve credentials from a secure vault or HSM (Hardware Security
      Module).'
    subcategory: Auth
  severity: info
- id: Semgrep_generic.secrets.gitleaks.adobe-client-id.adobe-client-id
  languages:
  - c
  - python
  - visualforce
  - cpp
  - dockerfile
  - php
  - elixir
  - shell
  - csharp
  - json
  - typescript
  - apex
  - kotlin
  - terraform
  - ruby
  - scala
  - go
  - yaml
  - java
  - javascript
  - rust
  - swift
  - dart
  - clojure
  message: 'adobe-client-id

    A gitleaks adobe-client-id was detected which attempts to identify hard-coded
    credentials.'
  metadata:
    category: Security
    explanation: '## adobe-client-id

      A gitleaks adobe-client-id was detected which attempts to identify hard-coded
      credentials. It is not recommended to store credentials in source-code, as this
      risks secrets being leaked and used by either an internal or external malicious
      adversary. It is recommended to use environment variables to securely provide
      credentials or retrieve credentials from a secure vault or HSM (Hardware Security
      Module).'
    subcategory: Auth
  severity: info
- id: Semgrep_generic.secrets.gitleaks.adobe-client-secret.adobe-client-secret
  languages:
  - c
  - python
  - visualforce
  - cpp
  - dockerfile
  - php
  - elixir
  - shell
  - csharp
  - json
  - typescript
  - apex
  - kotlin
  - terraform
  - ruby
  - scala
  - go
  - yaml
  - java
  - javascript
  - rust
  - swift
  - dart
  - clojure
  message: 'adobe-client-secret

    A gitleaks adobe-client-secret was detected which attempts to identify hard-coded
    credentials.'
  metadata:
    category: Security
    explanation: '## adobe-client-secret

      A gitleaks adobe-client-secret was detected which attempts to identify hard-coded
      credentials. It is not recommended to store credentials in source-code, as this
      risks secrets being leaked and used by either an internal or external malicious
      adversary. It is recommended to use environment variables to securely provide
      credentials or retrieve credentials from a secure vault or HSM (Hardware Security
      Module).'
    subcategory: Auth
  severity: info
- id: Semgrep_generic.secrets.gitleaks.age-secret-key.age-secret-key
  languages:
  - c
  - python
  - visualforce
  - cpp
  - dockerfile
  - php
  - elixir
  - shell
  - csharp
  - json
  - typescript
  - apex
  - kotlin
  - terraform
  - ruby
  - scala
  - go
  - yaml
  - java
  - javascript
  - rust
  - swift
  - dart
  - clojure
  message: 'age-secret-key

    A gitleaks age-secret-key was detected which attempts to identify hard-coded credentials.'
  metadata:
    category: Security
    explanation: '## age-secret-key

      A gitleaks age-secret-key was detected which attempts to identify hard-coded
      credentials. It is not recommended to store credentials in source-code, as this
      risks secrets being leaked and used by either an internal or external malicious
      adversary. It is recommended to use environment variables to securely provide
      credentials or retrieve credentials from a secure vault or HSM (Hardware Security
      Module).'
    subcategory: Auth
  severity: info
- id: Semgrep_generic.secrets.gitleaks.airtable-api-key.airtable-api-key
  languages:
  - c
  - python
  - visualforce
  - cpp
  - dockerfile
  - php
  - elixir
  - shell
  - csharp
  - json
  - typescript
  - apex
  - kotlin
  - terraform
  - ruby
  - scala
  - go
  - yaml
  - java
  - javascript
  - rust
  - swift
  - dart
  - clojure
  message: 'airtable-api-key

    A gitleaks airtable-api-key was detected which attempts to identify hard-coded
    credentials.'
  metadata:
    category: Security
    explanation: '## airtable-api-key

      A gitleaks airtable-api-key was detected which attempts to identify hard-coded
      credentials. It is not recommended to store credentials in source-code, as this
      risks secrets being leaked and used by either an internal or external malicious
      adversary. It is recommended to use environment variables to securely provide
      credentials or retrieve credentials from a secure vault or HSM (Hardware Security
      Module).'
    subcategory: Auth
  severity: info
- id: Semgrep_generic.secrets.gitleaks.algolia-api-key.algolia-api-key
  languages:
  - c
  - python
  - visualforce
  - cpp
  - dockerfile
  - php
  - elixir
  - shell
  - csharp
  - json
  - typescript
  - apex
  - kotlin
  - terraform
  - ruby
  - scala
  - go
  - yaml
  - java
  - javascript
  - rust
  - swift
  - dart
  - clojure
  message: 'algolia-api-key

    A gitleaks algolia-api-key was detected which attempts to identify hard-coded
    credentials.'
  metadata:
    category: Security
    explanation: '## algolia-api-key

      A gitleaks algolia-api-key was detected which attempts to identify hard-coded
      credentials. It is not recommended to store credentials in source-code, as this
      risks secrets being leaked and used by either an internal or external malicious
      adversary. It is recommended to use environment variables to securely provide
      credentials or retrieve credentials from a secure vault or HSM (Hardware Security
      Module).'
    subcategory: Auth
  severity: info
- id: Semgrep_generic.secrets.gitleaks.alibaba-access-key-id.alibaba-access-key-id
  languages:
  - c
  - python
  - visualforce
  - cpp
  - dockerfile
  - php
  - elixir
  - shell
  - csharp
  - json
  - typescript
  - apex
  - kotlin
  - terraform
  - ruby
  - scala
  - go
  - yaml
  - java
  - javascript
  - rust
  - swift
  - dart
  - clojure
  message: 'alibaba-access-key-id

    A gitleaks alibaba-access-key-id was detected which attempts to identify hard-coded
    credentials.'
  metadata:
    category: Security
    explanation: '## alibaba-access-key-id

      A gitleaks alibaba-access-key-id was detected which attempts to identify hard-coded
      credentials. It is not recommended to store credentials in source-code, as this
      risks secrets being leaked and used by either an internal or external malicious
      adversary. It is recommended to use environment variables to securely provide
      credentials or retrieve credentials from a secure vault or HSM (Hardware Security
      Module).'
    subcategory: Auth
  severity: info
- id: Semgrep_generic.secrets.gitleaks.alibaba-secret-key.alibaba-secret-key
  languages:
  - c
  - python
  - visualforce
  - cpp
  - dockerfile
  - php
  - elixir
  - shell
  - csharp
  - json
  - typescript
  - apex
  - kotlin
  - terraform
  - ruby
  - scala
  - go
  - yaml
  - java
  - javascript
  - rust
  - swift
  - dart
  - clojure
  message: 'alibaba-secret-key

    A gitleaks alibaba-secret-key was detected which attempts to identify hard-coded
    credentials.'
  metadata:
    category: Security
    explanation: '## alibaba-secret-key

      A gitleaks alibaba-secret-key was detected which attempts to identify hard-coded
      credentials. It is not recommended to store credentials in source-code, as this
      risks secrets being leaked and used by either an internal or external malicious
      adversary. It is recommended to use environment variables to securely provide
      credentials or retrieve credentials from a secure vault or HSM (Hardware Security
      Module).'
    subcategory: Auth
  severity: info
- id: Semgrep_generic.secrets.gitleaks.asana-client-id.asana-client-id
  languages:
  - c
  - python
  - visualforce
  - cpp
  - dockerfile
  - php
  - elixir
  - shell
  - csharp
  - json
  - typescript
  - apex
  - kotlin
  - terraform
  - ruby
  - scala
  - go
  - yaml
  - java
  - javascript
  - rust
  - swift
  - dart
  - clojure
  message: 'asana-client-id

    A gitleaks asana-client-id was detected which attempts to identify hard-coded
    credentials.'
  metadata:
    category: Security
    explanation: '## asana-client-id

      A gitleaks asana-client-id was detected which attempts to identify hard-coded
      credentials. It is not recommended to store credentials in source-code, as this
      risks secrets being leaked and used by either an internal or external malicious
      adversary. It is recommended to use environment variables to securely provide
      credentials or retrieve credentials from a secure vault or HSM (Hardware Security
      Module).'
    subcategory: Auth
  severity: info
- id: Semgrep_generic.secrets.gitleaks.asana-client-secret.asana-client-secret
  languages:
  - c
  - python
  - visualforce
  - cpp
  - dockerfile
  - php
  - elixir
  - shell
  - csharp
  - json
  - typescript
  - apex
  - kotlin
  - terraform
  - ruby
  - scala
  - go
  - yaml
  - java
  - javascript
  - rust
  - swift
  - dart
  - clojure
  message: 'asana-client-secret

    A gitleaks asana-client-secret was detected which attempts to identify hard-coded
    credentials.'
  metadata:
    category: Security
    explanation: '## asana-client-secret

      A gitleaks asana-client-secret was detected which attempts to identify hard-coded
      credentials. It is not recommended to store credentials in source-code, as this
      risks secrets being leaked and used by either an internal or external malicious
      adversary. It is recommended to use environment variables to securely provide
      credentials or retrieve credentials from a secure vault or HSM (Hardware Security
      Module).'
    subcategory: Auth
  severity: info
- id: Semgrep_generic.secrets.gitleaks.atlassian-api-token.atlassian-api-token
  languages:
  - c
  - python
  - visualforce
  - cpp
  - dockerfile
  - php
  - elixir
  - shell
  - csharp
  - json
  - typescript
  - apex
  - kotlin
  - terraform
  - ruby
  - scala
  - go
  - yaml
  - java
  - javascript
  - rust
  - swift
  - dart
  - clojure
  message: 'atlassian-api-token

    A gitleaks atlassian-api-token was detected which attempts to identify hard-coded
    credentials.'
  metadata:
    category: Security
    explanation: '## atlassian-api-token

      A gitleaks atlassian-api-token was detected which attempts to identify hard-coded
      credentials. It is not recommended to store credentials in source-code, as this
      risks secrets being leaked and used by either an internal or external malicious
      adversary. It is recommended to use environment variables to securely provide
      credentials or retrieve credentials from a secure vault or HSM (Hardware Security
      Module).'
    subcategory: Auth
  severity: info
- id: Semgrep_generic.secrets.gitleaks.authress-service-client-access-key.authress-service-client-access-key
  languages:
  - c
  - python
  - visualforce
  - cpp
  - dockerfile
  - php
  - elixir
  - shell
  - csharp
  - json
  - typescript
  - apex
  - kotlin
  - terraform
  - ruby
  - scala
  - go
  - yaml
  - java
  - javascript
  - rust
  - swift
  - dart
  - clojure
  message: 'authress-service-client-access-key

    A gitleaks authress-service-client-access-key was detected which attempts to identify
    hard-coded credentials.'
  metadata:
    category: Security
    explanation: '## authress-service-client-access-key

      A gitleaks authress-service-client-access-key was detected which attempts to
      identify hard-coded credentials. It is not recommended to store credentials
      in source-code, as this risks secrets being leaked and used by either an internal
      or external malicious adversary. It is recommended to use environment variables
      to securely provide credentials or retrieve credentials from a secure vault
      or HSM (Hardware Security Module).'
    subcategory: Auth
  severity: info
- id: Semgrep_generic.secrets.gitleaks.aws-access-token.aws-access-token
  languages:
  - c
  - python
  - visualforce
  - cpp
  - dockerfile
  - php
  - elixir
  - shell
  - csharp
  - json
  - typescript
  - apex
  - kotlin
  - terraform
  - ruby
  - scala
  - go
  - yaml
  - java
  - javascript
  - rust
  - swift
  - dart
  - clojure
  message: 'aws-access-token

    A gitleaks aws-access-token was detected which attempts to identify hard-coded
    credentials.'
  metadata:
    category: Security
    explanation: '## aws-access-token

      A gitleaks aws-access-token was detected which attempts to identify hard-coded
      credentials. It is not recommended to store credentials in source-code, as this
      risks secrets being leaked and used by either an internal or external malicious
      adversary. It is recommended to use environment variables to securely provide
      credentials or retrieve credentials from a secure vault or HSM (Hardware Security
      Module).'
    subcategory: Auth
  severity: info
- id: Semgrep_generic.secrets.gitleaks.beamer-api-token.beamer-api-token
  languages:
  - c
  - python
  - visualforce
  - cpp
  - dockerfile
  - php
  - elixir
  - shell
  - csharp
  - json
  - typescript
  - apex
  - kotlin
  - terraform
  - ruby
  - scala
  - go
  - yaml
  - java
  - javascript
  - rust
  - swift
  - dart
  - clojure
  message: 'beamer-api-token

    A gitleaks beamer-api-token was detected which attempts to identify hard-coded
    credentials.'
  metadata:
    category: Security
    explanation: '## beamer-api-token

      A gitleaks beamer-api-token was detected which attempts to identify hard-coded
      credentials. It is not recommended to store credentials in source-code, as this
      risks secrets being leaked and used by either an internal or external malicious
      adversary. It is recommended to use environment variables to securely provide
      credentials or retrieve credentials from a secure vault or HSM (Hardware Security
      Module).'
    subcategory: Auth
  severity: info
- id: Semgrep_generic.secrets.gitleaks.bitbucket-client-id.bitbucket-client-id
  languages:
  - c
  - python
  - visualforce
  - cpp
  - dockerfile
  - php
  - elixir
  - shell
  - csharp
  - json
  - typescript
  - apex
  - kotlin
  - terraform
  - ruby
  - scala
  - go
  - yaml
  - java
  - javascript
  - rust
  - swift
  - dart
  - clojure
  message: 'bitbucket-client-id

    A gitleaks bitbucket-client-id was detected which attempts to identify hard-coded
    credentials.'
  metadata:
    category: Security
    explanation: '## bitbucket-client-id

      A gitleaks bitbucket-client-id was detected which attempts to identify hard-coded
      credentials. It is not recommended to store credentials in source-code, as this
      risks secrets being leaked and used by either an internal or external malicious
      adversary. It is recommended to use environment variables to securely provide
      credentials or retrieve credentials from a secure vault or HSM (Hardware Security
      Module).'
    subcategory: Auth
  severity: info
- id: Semgrep_generic.secrets.gitleaks.bitbucket-client-secret.bitbucket-client-secret
  languages:
  - c
  - python
  - visualforce
  - cpp
  - dockerfile
  - php
  - elixir
  - shell
  - csharp
  - json
  - typescript
  - apex
  - kotlin
  - terraform
  - ruby
  - scala
  - go
  - yaml
  - java
  - javascript
  - rust
  - swift
  - dart
  - clojure
  message: 'bitbucket-client-secret

    A gitleaks bitbucket-client-secret was detected which attempts to identify hard-coded
    credentials.'
  metadata:
    category: Security
    explanation: '## bitbucket-client-secret

      A gitleaks bitbucket-client-secret was detected which attempts to identify hard-coded
      credentials. It is not recommended to store credentials in source-code, as this
      risks secrets being leaked and used by either an internal or external malicious
      adversary. It is recommended to use environment variables to securely provide
      credentials or retrieve credentials from a secure vault or HSM (Hardware Security
      Module).'
    subcategory: Auth
  severity: info
- id: Semgrep_generic.secrets.gitleaks.bittrex-access-key.bittrex-access-key
  languages:
  - c
  - python
  - visualforce
  - cpp
  - dockerfile
  - php
  - elixir
  - shell
  - csharp
  - json
  - typescript
  - apex
  - kotlin
  - terraform
  - ruby
  - scala
  - go
  - yaml
  - java
  - javascript
  - rust
  - swift
  - dart
  - clojure
  message: 'bittrex-access-key

    A gitleaks bittrex-access-key was detected which attempts to identify hard-coded
    credentials.'
  metadata:
    category: Security
    explanation: '## bittrex-access-key

      A gitleaks bittrex-access-key was detected which attempts to identify hard-coded
      credentials. It is not recommended to store credentials in source-code, as this
      risks secrets being leaked and used by either an internal or external malicious
      adversary. It is recommended to use environment variables to securely provide
      credentials or retrieve credentials from a secure vault or HSM (Hardware Security
      Module).'
    subcategory: Auth
  severity: info
- id: Semgrep_generic.secrets.gitleaks.bittrex-secret-key.bittrex-secret-key
  languages:
  - c
  - python
  - visualforce
  - cpp
  - dockerfile
  - php
  - elixir
  - shell
  - csharp
  - json
  - typescript
  - apex
  - kotlin
  - terraform
  - ruby
  - scala
  - go
  - yaml
  - java
  - javascript
  - rust
  - swift
  - dart
  - clojure
  message: 'bittrex-secret-key

    A gitleaks bittrex-secret-key was detected which attempts to identify hard-coded
    credentials.'
  metadata:
    category: Security
    explanation: '## bittrex-secret-key

      A gitleaks bittrex-secret-key was detected which attempts to identify hard-coded
      credentials. It is not recommended to store credentials in source-code, as this
      risks secrets being leaked and used by either an internal or external malicious
      adversary. It is recommended to use environment variables to securely provide
      credentials or retrieve credentials from a secure vault or HSM (Hardware Security
      Module).'
    subcategory: Auth
  severity: info
- id: Semgrep_generic.secrets.gitleaks.clojars-api-token.clojars-api-token
  languages:
  - c
  - python
  - visualforce
  - cpp
  - dockerfile
  - php
  - elixir
  - shell
  - csharp
  - json
  - typescript
  - apex
  - kotlin
  - terraform
  - ruby
  - scala
  - go
  - yaml
  - java
  - javascript
  - rust
  - swift
  - dart
  - clojure
  message: 'clojars-api-token

    A gitleaks clojars-api-token was detected which attempts to identify hard-coded
    credentials.'
  metadata:
    category: Security
    explanation: '## clojars-api-token

      A gitleaks clojars-api-token was detected which attempts to identify hard-coded
      credentials. It is not recommended to store credentials in source-code, as this
      risks secrets being leaked and used by either an internal or external malicious
      adversary. It is recommended to use environment variables to securely provide
      credentials or retrieve credentials from a secure vault or HSM (Hardware Security
      Module).'
    subcategory: Auth
  severity: info
- id: Semgrep_generic.secrets.gitleaks.cloudflare-api-key.cloudflare-api-key
  languages:
  - c
  - python
  - visualforce
  - cpp
  - dockerfile
  - php
  - elixir
  - shell
  - csharp
  - json
  - typescript
  - apex
  - kotlin
  - terraform
  - ruby
  - scala
  - go
  - yaml
  - java
  - javascript
  - rust
  - swift
  - dart
  - clojure
  message: 'cloudflare-api-key

    A gitleaks cloudflare-api-key was detected which attempts to identify hard-coded
    credentials.'
  metadata:
    category: Security
    explanation: '## cloudflare-api-key

      A gitleaks cloudflare-api-key was detected which attempts to identify hard-coded
      credentials. It is not recommended to store credentials in source-code, as this
      risks secrets being leaked and used by either an internal or external malicious
      adversary. It is recommended to use environment variables to securely provide
      credentials or retrieve credentials from a secure vault or HSM (Hardware Security
      Module).'
    subcategory: Auth
  severity: info
- id: Semgrep_generic.secrets.gitleaks.cloudflare-global-api-key.cloudflare-global-api-key
  languages:
  - c
  - python
  - visualforce
  - cpp
  - dockerfile
  - php
  - elixir
  - shell
  - csharp
  - json
  - typescript
  - apex
  - kotlin
  - terraform
  - ruby
  - scala
  - go
  - yaml
  - java
  - javascript
  - rust
  - swift
  - dart
  - clojure
  message: 'cloudflare-global-api-key

    A gitleaks cloudflare-global-api-key was detected which attempts to identify hard-coded
    credentials.'
  metadata:
    category: Security
    explanation: '## cloudflare-global-api-key

      A gitleaks cloudflare-global-api-key was detected which attempts to identify
      hard-coded credentials. It is not recommended to store credentials in source-code,
      as this risks secrets being leaked and used by either an internal or external
      malicious adversary. It is recommended to use environment variables to securely
      provide credentials or retrieve credentials from a secure vault or HSM (Hardware
      Security Module).'
    subcategory: Auth
  severity: info
- id: Semgrep_generic.secrets.gitleaks.cloudflare-origin-ca-key.cloudflare-origin-ca-key
  languages:
  - c
  - python
  - visualforce
  - cpp
  - dockerfile
  - php
  - elixir
  - shell
  - csharp
  - json
  - typescript
  - apex
  - kotlin
  - terraform
  - ruby
  - scala
  - go
  - yaml
  - java
  - javascript
  - rust
  - swift
  - dart
  - clojure
  message: 'cloudflare-origin-ca-key

    A gitleaks cloudflare-origin-ca-key was detected which attempts to identify hard-coded
    credentials.'
  metadata:
    category: Security
    explanation: '## cloudflare-origin-ca-key

      A gitleaks cloudflare-origin-ca-key was detected which attempts to identify
      hard-coded credentials. It is not recommended to store credentials in source-code,
      as this risks secrets being leaked and used by either an internal or external
      malicious adversary. It is recommended to use environment variables to securely
      provide credentials or retrieve credentials from a secure vault or HSM (Hardware
      Security Module).'
    subcategory: Auth
  severity: info
- id: Semgrep_generic.secrets.gitleaks.codecov-access-token.codecov-access-token
  languages:
  - c
  - python
  - visualforce
  - cpp
  - dockerfile
  - php
  - elixir
  - shell
  - csharp
  - json
  - typescript
  - apex
  - kotlin
  - terraform
  - ruby
  - scala
  - go
  - yaml
  - java
  - javascript
  - rust
  - swift
  - dart
  - clojure
  message: 'codecov-access-token

    A gitleaks codecov-access-token was detected which attempts to identify hard-coded
    credentials.'
  metadata:
    category: Security
    explanation: '## codecov-access-token

      A gitleaks codecov-access-token was detected which attempts to identify hard-coded
      credentials. It is not recommended to store credentials in source-code, as this
      risks secrets being leaked and used by either an internal or external malicious
      adversary. It is recommended to use environment variables to securely provide
      credentials or retrieve credentials from a secure vault or HSM (Hardware Security
      Module).'
    subcategory: Auth
  severity: info
- id: Semgrep_generic.secrets.gitleaks.coinbase-access-token.coinbase-access-token
  languages:
  - c
  - python
  - visualforce
  - cpp
  - dockerfile
  - php
  - elixir
  - shell
  - csharp
  - json
  - typescript
  - apex
  - kotlin
  - terraform
  - ruby
  - scala
  - go
  - yaml
  - java
  - javascript
  - rust
  - swift
  - dart
  - clojure
  message: 'coinbase-access-token

    A gitleaks coinbase-access-token was detected which attempts to identify hard-coded
    credentials.'
  metadata:
    category: Security
    explanation: '## coinbase-access-token

      A gitleaks coinbase-access-token was detected which attempts to identify hard-coded
      credentials. It is not recommended to store credentials in source-code, as this
      risks secrets being leaked and used by either an internal or external malicious
      adversary. It is recommended to use environment variables to securely provide
      credentials or retrieve credentials from a secure vault or HSM (Hardware Security
      Module).'
    subcategory: Auth
  severity: info
- id: Semgrep_generic.secrets.gitleaks.confluent-access-token.confluent-access-token
  languages:
  - c
  - python
  - visualforce
  - cpp
  - dockerfile
  - php
  - elixir
  - shell
  - csharp
  - json
  - typescript
  - apex
  - kotlin
  - terraform
  - ruby
  - scala
  - go
  - yaml
  - java
  - javascript
  - rust
  - swift
  - dart
  - clojure
  message: 'confluent-access-token

    A gitleaks confluent-access-token was detected which attempts to identify hard-coded
    credentials.'
  metadata:
    category: Security
    explanation: '## confluent-access-token

      A gitleaks confluent-access-token was detected which attempts to identify hard-coded
      credentials. It is not recommended to store credentials in source-code, as this
      risks secrets being leaked and used by either an internal or external malicious
      adversary. It is recommended to use environment variables to securely provide
      credentials or retrieve credentials from a secure vault or HSM (Hardware Security
      Module).'
    subcategory: Auth
  severity: info
- id: Semgrep_generic.secrets.gitleaks.confluent-secret-key.confluent-secret-key
  languages:
  - c
  - python
  - visualforce
  - cpp
  - dockerfile
  - php
  - elixir
  - shell
  - csharp
  - json
  - typescript
  - apex
  - kotlin
  - terraform
  - ruby
  - scala
  - go
  - yaml
  - java
  - javascript
  - rust
  - swift
  - dart
  - clojure
  message: 'confluent-secret-key

    A gitleaks confluent-secret-key was detected which attempts to identify hard-coded
    credentials.'
  metadata:
    category: Security
    explanation: '## confluent-secret-key

      A gitleaks confluent-secret-key was detected which attempts to identify hard-coded
      credentials. It is not recommended to store credentials in source-code, as this
      risks secrets being leaked and used by either an internal or external malicious
      adversary. It is recommended to use environment variables to securely provide
      credentials or retrieve credentials from a secure vault or HSM (Hardware Security
      Module).'
    subcategory: Auth
  severity: info
- id: Semgrep_generic.secrets.gitleaks.contentful-delivery-api-token.contentful-delivery-api-token
  languages:
  - c
  - python
  - visualforce
  - cpp
  - dockerfile
  - php
  - elixir
  - shell
  - csharp
  - json
  - typescript
  - apex
  - kotlin
  - terraform
  - ruby
  - scala
  - go
  - yaml
  - java
  - javascript
  - rust
  - swift
  - dart
  - clojure
  message: 'contentful-delivery-api-token

    A gitleaks contentful-delivery-api-token was detected which attempts to identify
    hard-coded credentials.'
  metadata:
    category: Security
    explanation: '## contentful-delivery-api-token

      A gitleaks contentful-delivery-api-token was detected which attempts to identify
      hard-coded credentials. It is not recommended to store credentials in source-code,
      as this risks secrets being leaked and used by either an internal or external
      malicious adversary. It is recommended to use environment variables to securely
      provide credentials or retrieve credentials from a secure vault or HSM (Hardware
      Security Module).'
    subcategory: Auth
  severity: info
- id: Semgrep_generic.secrets.gitleaks.databricks-api-token.databricks-api-token
  languages:
  - c
  - python
  - visualforce
  - cpp
  - dockerfile
  - php
  - elixir
  - shell
  - csharp
  - json
  - typescript
  - apex
  - kotlin
  - terraform
  - ruby
  - scala
  - go
  - yaml
  - java
  - javascript
  - rust
  - swift
  - dart
  - clojure
  message: 'databricks-api-token

    A gitleaks databricks-api-token was detected which attempts to identify hard-coded
    credentials.'
  metadata:
    category: Security
    explanation: '## databricks-api-token

      A gitleaks databricks-api-token was detected which attempts to identify hard-coded
      credentials. It is not recommended to store credentials in source-code, as this
      risks secrets being leaked and used by either an internal or external malicious
      adversary. It is recommended to use environment variables to securely provide
      credentials or retrieve credentials from a secure vault or HSM (Hardware Security
      Module).'
    subcategory: Auth
  severity: info
- id: Semgrep_generic.secrets.gitleaks.datadog-access-token.datadog-access-token
  languages:
  - c
  - python
  - visualforce
  - cpp
  - dockerfile
  - php
  - elixir
  - shell
  - csharp
  - json
  - typescript
  - apex
  - kotlin
  - terraform
  - ruby
  - scala
  - go
  - yaml
  - java
  - javascript
  - rust
  - swift
  - dart
  - clojure
  message: 'datadog-access-token

    A gitleaks datadog-access-token was detected which attempts to identify hard-coded
    credentials.'
  metadata:
    category: Security
    explanation: '## datadog-access-token

      A gitleaks datadog-access-token was detected which attempts to identify hard-coded
      credentials. It is not recommended to store credentials in source-code, as this
      risks secrets being leaked and used by either an internal or external malicious
      adversary. It is recommended to use environment variables to securely provide
      credentials or retrieve credentials from a secure vault or HSM (Hardware Security
      Module).'
    subcategory: Auth
  severity: info
- id: Semgrep_generic.secrets.gitleaks.defined-networking-api-token.defined-networking-api-token
  languages:
  - c
  - python
  - visualforce
  - cpp
  - dockerfile
  - php
  - elixir
  - shell
  - csharp
  - json
  - typescript
  - apex
  - kotlin
  - terraform
  - ruby
  - scala
  - go
  - yaml
  - java
  - javascript
  - rust
  - swift
  - dart
  - clojure
  message: 'defined-networking-api-token

    A gitleaks defined-networking-api-token was detected which attempts to identify
    hard-coded credentials.'
  metadata:
    category: Security
    explanation: '## defined-networking-api-token

      A gitleaks defined-networking-api-token was detected which attempts to identify
      hard-coded credentials. It is not recommended to store credentials in source-code,
      as this risks secrets being leaked and used by either an internal or external
      malicious adversary. It is recommended to use environment variables to securely
      provide credentials or retrieve credentials from a secure vault or HSM (Hardware
      Security Module).'
    subcategory: Auth
  severity: info
- id: Semgrep_generic.secrets.gitleaks.digitalocean-access-token.digitalocean-access-token
  languages:
  - c
  - python
  - visualforce
  - cpp
  - dockerfile
  - php
  - elixir
  - shell
  - csharp
  - json
  - typescript
  - apex
  - kotlin
  - terraform
  - ruby
  - scala
  - go
  - yaml
  - java
  - javascript
  - rust
  - swift
  - dart
  - clojure
  message: 'digitalocean-access-token

    A gitleaks digitalocean-access-token was detected which attempts to identify hard-coded
    credentials.'
  metadata:
    category: Security
    explanation: '## digitalocean-access-token

      A gitleaks digitalocean-access-token was detected which attempts to identify
      hard-coded credentials. It is not recommended to store credentials in source-code,
      as this risks secrets being leaked and used by either an internal or external
      malicious adversary. It is recommended to use environment variables to securely
      provide credentials or retrieve credentials from a secure vault or HSM (Hardware
      Security Module).'
    subcategory: Auth
  severity: info
- id: Semgrep_generic.secrets.gitleaks.digitalocean-pat.digitalocean-pat
  languages:
  - c
  - python
  - visualforce
  - cpp
  - dockerfile
  - php
  - elixir
  - shell
  - csharp
  - json
  - typescript
  - apex
  - kotlin
  - terraform
  - ruby
  - scala
  - go
  - yaml
  - java
  - javascript
  - rust
  - swift
  - dart
  - clojure
  message: 'digitalocean-pat

    A gitleaks digitalocean-pat was detected which attempts to identify hard-coded
    credentials.'
  metadata:
    category: Security
    explanation: '## digitalocean-pat

      A gitleaks digitalocean-pat was detected which attempts to identify hard-coded
      credentials. It is not recommended to store credentials in source-code, as this
      risks secrets being leaked and used by either an internal or external malicious
      adversary. It is recommended to use environment variables to securely provide
      credentials or retrieve credentials from a secure vault or HSM (Hardware Security
      Module).'
    subcategory: Auth
  severity: info
- id: Semgrep_generic.secrets.gitleaks.digitalocean-refresh-token.digitalocean-refresh-token
  languages:
  - c
  - python
  - visualforce
  - cpp
  - dockerfile
  - php
  - elixir
  - shell
  - csharp
  - json
  - typescript
  - apex
  - kotlin
  - terraform
  - ruby
  - scala
  - go
  - yaml
  - java
  - javascript
  - rust
  - swift
  - dart
  - clojure
  message: 'digitalocean-refresh-token

    A gitleaks digitalocean-refresh-token was detected which attempts to identify
    hard-coded credentials.'
  metadata:
    category: Security
    explanation: '## digitalocean-refresh-token

      A gitleaks digitalocean-refresh-token was detected which attempts to identify
      hard-coded credentials. It is not recommended to store credentials in source-code,
      as this risks secrets being leaked and used by either an internal or external
      malicious adversary. It is recommended to use environment variables to securely
      provide credentials or retrieve credentials from a secure vault or HSM (Hardware
      Security Module).'
    subcategory: Auth
  severity: info
- id: Semgrep_generic.secrets.gitleaks.discord-api-token.discord-api-token
  languages:
  - c
  - python
  - visualforce
  - cpp
  - dockerfile
  - php
  - elixir
  - shell
  - csharp
  - json
  - typescript
  - apex
  - kotlin
  - terraform
  - ruby
  - scala
  - go
  - yaml
  - java
  - javascript
  - rust
  - swift
  - dart
  - clojure
  message: 'discord-api-token

    A gitleaks discord-api-token was detected which attempts to identify hard-coded
    credentials.'
  metadata:
    category: Security
    explanation: '## discord-api-token

      A gitleaks discord-api-token was detected which attempts to identify hard-coded
      credentials. It is not recommended to store credentials in source-code, as this
      risks secrets being leaked and used by either an internal or external malicious
      adversary. It is recommended to use environment variables to securely provide
      credentials or retrieve credentials from a secure vault or HSM (Hardware Security
      Module).'
    subcategory: Auth
  severity: info
- id: Semgrep_generic.secrets.gitleaks.discord-client-id.discord-client-id
  languages:
  - c
  - python
  - visualforce
  - cpp
  - dockerfile
  - php
  - elixir
  - shell
  - csharp
  - json
  - typescript
  - apex
  - kotlin
  - terraform
  - ruby
  - scala
  - go
  - yaml
  - java
  - javascript
  - rust
  - swift
  - dart
  - clojure
  message: 'discord-client-id

    A gitleaks discord-client-id was detected which attempts to identify hard-coded
    credentials.'
  metadata:
    category: Security
    explanation: '## discord-client-id

      A gitleaks discord-client-id was detected which attempts to identify hard-coded
      credentials. It is not recommended to store credentials in source-code, as this
      risks secrets being leaked and used by either an internal or external malicious
      adversary. It is recommended to use environment variables to securely provide
      credentials or retrieve credentials from a secure vault or HSM (Hardware Security
      Module).'
    subcategory: Auth
  severity: info
- id: Semgrep_generic.secrets.gitleaks.discord-client-secret.discord-client-secret
  languages:
  - c
  - python
  - visualforce
  - cpp
  - dockerfile
  - php
  - elixir
  - shell
  - csharp
  - json
  - typescript
  - apex
  - kotlin
  - terraform
  - ruby
  - scala
  - go
  - yaml
  - java
  - javascript
  - rust
  - swift
  - dart
  - clojure
  message: 'discord-client-secret

    A gitleaks discord-client-secret was detected which attempts to identify hard-coded
    credentials.'
  metadata:
    category: Security
    explanation: '## discord-client-secret

      A gitleaks discord-client-secret was detected which attempts to identify hard-coded
      credentials. It is not recommended to store credentials in source-code, as this
      risks secrets being leaked and used by either an internal or external malicious
      adversary. It is recommended to use environment variables to securely provide
      credentials or retrieve credentials from a secure vault or HSM (Hardware Security
      Module).'
    subcategory: Auth
  severity: info
- id: Semgrep_generic.secrets.gitleaks.doppler-api-token.doppler-api-token
  languages:
  - c
  - python
  - visualforce
  - cpp
  - dockerfile
  - php
  - elixir
  - shell
  - csharp
  - json
  - typescript
  - apex
  - kotlin
  - terraform
  - ruby
  - scala
  - go
  - yaml
  - java
  - javascript
  - rust
  - swift
  - dart
  - clojure
  message: 'doppler-api-token

    A gitleaks doppler-api-token was detected which attempts to identify hard-coded
    credentials.'
  metadata:
    category: Security
    explanation: '## doppler-api-token

      A gitleaks doppler-api-token was detected which attempts to identify hard-coded
      credentials. It is not recommended to store credentials in source-code, as this
      risks secrets being leaked and used by either an internal or external malicious
      adversary. It is recommended to use environment variables to securely provide
      credentials or retrieve credentials from a secure vault or HSM (Hardware Security
      Module).'
    subcategory: Auth
  severity: info
- id: Semgrep_generic.secrets.gitleaks.droneci-access-token.droneci-access-token
  languages:
  - c
  - python
  - visualforce
  - cpp
  - dockerfile
  - php
  - elixir
  - shell
  - csharp
  - json
  - typescript
  - apex
  - kotlin
  - terraform
  - ruby
  - scala
  - go
  - yaml
  - java
  - javascript
  - rust
  - swift
  - dart
  - clojure
  message: 'droneci-access-token

    A gitleaks droneci-access-token was detected which attempts to identify hard-coded
    credentials.'
  metadata:
    category: Security
    explanation: '## droneci-access-token

      A gitleaks droneci-access-token was detected which attempts to identify hard-coded
      credentials. It is not recommended to store credentials in source-code, as this
      risks secrets being leaked and used by either an internal or external malicious
      adversary. It is recommended to use environment variables to securely provide
      credentials or retrieve credentials from a secure vault or HSM (Hardware Security
      Module).'
    subcategory: Auth
  severity: info
- id: Semgrep_generic.secrets.gitleaks.dropbox-api-token.dropbox-api-token
  languages:
  - c
  - python
  - visualforce
  - cpp
  - dockerfile
  - php
  - elixir
  - shell
  - csharp
  - json
  - typescript
  - apex
  - kotlin
  - terraform
  - ruby
  - scala
  - go
  - yaml
  - java
  - javascript
  - rust
  - swift
  - dart
  - clojure
  message: 'dropbox-api-token

    A gitleaks dropbox-api-token was detected which attempts to identify hard-coded
    credentials.'
  metadata:
    category: Security
    explanation: '## dropbox-api-token

      A gitleaks dropbox-api-token was detected which attempts to identify hard-coded
      credentials. It is not recommended to store credentials in source-code, as this
      risks secrets being leaked and used by either an internal or external malicious
      adversary. It is recommended to use environment variables to securely provide
      credentials or retrieve credentials from a secure vault or HSM (Hardware Security
      Module).'
    subcategory: Auth
  severity: info
- id: Semgrep_generic.secrets.gitleaks.dropbox-long-lived-api-token.dropbox-long-lived-api-token
  languages:
  - c
  - python
  - visualforce
  - cpp
  - dockerfile
  - php
  - elixir
  - shell
  - csharp
  - json
  - typescript
  - apex
  - kotlin
  - terraform
  - ruby
  - scala
  - go
  - yaml
  - java
  - javascript
  - rust
  - swift
  - dart
  - clojure
  message: 'dropbox-long-lived-api-token

    A gitleaks dropbox-long-lived-api-token was detected which attempts to identify
    hard-coded credentials.'
  metadata:
    category: Security
    explanation: '## dropbox-long-lived-api-token

      A gitleaks dropbox-long-lived-api-token was detected which attempts to identify
      hard-coded credentials. It is not recommended to store credentials in source-code,
      as this risks secrets being leaked and used by either an internal or external
      malicious adversary. It is recommended to use environment variables to securely
      provide credentials or retrieve credentials from a secure vault or HSM (Hardware
      Security Module).'
    subcategory: Auth
  severity: info
- id: Semgrep_generic.secrets.gitleaks.dropbox-short-lived-api-token.dropbox-short-lived-api-token
  languages:
  - c
  - python
  - visualforce
  - cpp
  - dockerfile
  - php
  - elixir
  - shell
  - csharp
  - json
  - typescript
  - apex
  - kotlin
  - terraform
  - ruby
  - scala
  - go
  - yaml
  - java
  - javascript
  - rust
  - swift
  - dart
  - clojure
  message: 'dropbox-short-lived-api-token

    A gitleaks dropbox-short-lived-api-token was detected which attempts to identify
    hard-coded credentials.'
  metadata:
    category: Security
    explanation: '## dropbox-short-lived-api-token

      A gitleaks dropbox-short-lived-api-token was detected which attempts to identify
      hard-coded credentials. It is not recommended to store credentials in source-code,
      as this risks secrets being leaked and used by either an internal or external
      malicious adversary. It is recommended to use environment variables to securely
      provide credentials or retrieve credentials from a secure vault or HSM (Hardware
      Security Module).'
    subcategory: Auth
  severity: info
- id: Semgrep_generic.secrets.gitleaks.duffel-api-token.duffel-api-token
  languages:
  - c
  - python
  - visualforce
  - cpp
  - dockerfile
  - php
  - elixir
  - shell
  - csharp
  - json
  - typescript
  - apex
  - kotlin
  - terraform
  - ruby
  - scala
  - go
  - yaml
  - java
  - javascript
  - rust
  - swift
  - dart
  - clojure
  message: 'duffel-api-token

    A gitleaks duffel-api-token was detected which attempts to identify hard-coded
    credentials.'
  metadata:
    category: Security
    explanation: '## duffel-api-token

      A gitleaks duffel-api-token was detected which attempts to identify hard-coded
      credentials. It is not recommended to store credentials in source-code, as this
      risks secrets being leaked and used by either an internal or external malicious
      adversary. It is recommended to use environment variables to securely provide
      credentials or retrieve credentials from a secure vault or HSM (Hardware Security
      Module).'
    subcategory: Auth
  severity: info
- id: Semgrep_generic.secrets.gitleaks.dynatrace-api-token.dynatrace-api-token
  languages:
  - c
  - python
  - visualforce
  - cpp
  - dockerfile
  - php
  - elixir
  - shell
  - csharp
  - json
  - typescript
  - apex
  - kotlin
  - terraform
  - ruby
  - scala
  - go
  - yaml
  - java
  - javascript
  - rust
  - swift
  - dart
  - clojure
  message: 'dynatrace-api-token

    A gitleaks dynatrace-api-token was detected which attempts to identify hard-coded
    credentials.'
  metadata:
    category: Security
    explanation: '## dynatrace-api-token

      A gitleaks dynatrace-api-token was detected which attempts to identify hard-coded
      credentials. It is not recommended to store credentials in source-code, as this
      risks secrets being leaked and used by either an internal or external malicious
      adversary. It is recommended to use environment variables to securely provide
      credentials or retrieve credentials from a secure vault or HSM (Hardware Security
      Module).'
    subcategory: Auth
  severity: info
- id: Semgrep_generic.secrets.gitleaks.easypost-api-token.easypost-api-token
  languages:
  - c
  - python
  - visualforce
  - cpp
  - dockerfile
  - php
  - elixir
  - shell
  - csharp
  - json
  - typescript
  - apex
  - kotlin
  - terraform
  - ruby
  - scala
  - go
  - yaml
  - java
  - javascript
  - rust
  - swift
  - dart
  - clojure
  message: 'easypost-api-token

    A gitleaks easypost-api-token was detected which attempts to identify hard-coded
    credentials.'
  metadata:
    category: Security
    explanation: '## easypost-api-token

      A gitleaks easypost-api-token was detected which attempts to identify hard-coded
      credentials. It is not recommended to store credentials in source-code, as this
      risks secrets being leaked and used by either an internal or external malicious
      adversary. It is recommended to use environment variables to securely provide
      credentials or retrieve credentials from a secure vault or HSM (Hardware Security
      Module).'
    subcategory: Auth
  severity: info
- id: Semgrep_generic.secrets.gitleaks.easypost-test-api-token.easypost-test-api-token
  languages:
  - c
  - python
  - visualforce
  - cpp
  - dockerfile
  - php
  - elixir
  - shell
  - csharp
  - json
  - typescript
  - apex
  - kotlin
  - terraform
  - ruby
  - scala
  - go
  - yaml
  - java
  - javascript
  - rust
  - swift
  - dart
  - clojure
  message: 'easypost-test-api-token

    A gitleaks easypost-test-api-token was detected which attempts to identify hard-coded
    credentials.'
  metadata:
    category: Security
    explanation: '## easypost-test-api-token

      A gitleaks easypost-test-api-token was detected which attempts to identify hard-coded
      credentials. It is not recommended to store credentials in source-code, as this
      risks secrets being leaked and used by either an internal or external malicious
      adversary. It is recommended to use environment variables to securely provide
      credentials or retrieve credentials from a secure vault or HSM (Hardware Security
      Module).'
    subcategory: Auth
  severity: info
- id: Semgrep_generic.secrets.gitleaks.etsy-access-token.etsy-access-token
  languages:
  - c
  - python
  - visualforce
  - cpp
  - dockerfile
  - php
  - elixir
  - shell
  - csharp
  - json
  - typescript
  - apex
  - kotlin
  - terraform
  - ruby
  - scala
  - go
  - yaml
  - java
  - javascript
  - rust
  - swift
  - dart
  - clojure
  message: 'etsy-access-token

    A gitleaks etsy-access-token was detected which attempts to identify hard-coded
    credentials.'
  metadata:
    category: Security
    explanation: '## etsy-access-token

      A gitleaks etsy-access-token was detected which attempts to identify hard-coded
      credentials. It is not recommended to store credentials in source-code, as this
      risks secrets being leaked and used by either an internal or external malicious
      adversary. It is recommended to use environment variables to securely provide
      credentials or retrieve credentials from a secure vault or HSM (Hardware Security
      Module).'
    subcategory: Auth
  severity: info
- id: Semgrep_generic.secrets.gitleaks.facebook-access-token.facebook-access-token
  languages:
  - c
  - python
  - visualforce
  - cpp
  - dockerfile
  - php
  - elixir
  - shell
  - csharp
  - json
  - typescript
  - apex
  - kotlin
  - terraform
  - ruby
  - scala
  - go
  - yaml
  - java
  - javascript
  - rust
  - swift
  - dart
  - clojure
  message: 'facebook-access-token

    A gitleaks facebook-access-token was detected which attempts to identify hard-coded
    credentials.'
  metadata:
    category: Security
    explanation: '## facebook-access-token

      A gitleaks facebook-access-token was detected which attempts to identify hard-coded
      credentials. It is not recommended to store credentials in source-code, as this
      risks secrets being leaked and used by either an internal or external malicious
      adversary. It is recommended to use environment variables to securely provide
      credentials or retrieve credentials from a secure vault or HSM (Hardware Security
      Module).'
    subcategory: Auth
  severity: info
- id: Semgrep_generic.secrets.gitleaks.facebook-page-access-token.facebook-page-access-token
  languages:
  - c
  - python
  - visualforce
  - cpp
  - dockerfile
  - php
  - elixir
  - shell
  - csharp
  - json
  - typescript
  - apex
  - kotlin
  - terraform
  - ruby
  - scala
  - go
  - yaml
  - java
  - javascript
  - rust
  - swift
  - dart
  - clojure
  message: 'facebook-page-access-token

    A gitleaks facebook-page-access-token was detected which attempts to identify
    hard-coded credentials.'
  metadata:
    category: Security
    explanation: '## facebook-page-access-token

      A gitleaks facebook-page-access-token was detected which attempts to identify
      hard-coded credentials. It is not recommended to store credentials in source-code,
      as this risks secrets being leaked and used by either an internal or external
      malicious adversary. It is recommended to use environment variables to securely
      provide credentials or retrieve credentials from a secure vault or HSM (Hardware
      Security Module).'
    subcategory: Auth
  severity: info
- id: Semgrep_generic.secrets.gitleaks.facebook-secret.facebook-secret
  languages:
  - c
  - python
  - visualforce
  - cpp
  - dockerfile
  - php
  - elixir
  - shell
  - csharp
  - json
  - typescript
  - apex
  - kotlin
  - terraform
  - ruby
  - scala
  - go
  - yaml
  - java
  - javascript
  - rust
  - swift
  - dart
  - clojure
  message: 'facebook-secret

    A gitleaks facebook-secret was detected which attempts to identify hard-coded
    credentials.'
  metadata:
    category: Security
    explanation: '## facebook-secret

      A gitleaks facebook-secret was detected which attempts to identify hard-coded
      credentials. It is not recommended to store credentials in source-code, as this
      risks secrets being leaked and used by either an internal or external malicious
      adversary. It is recommended to use environment variables to securely provide
      credentials or retrieve credentials from a secure vault or HSM (Hardware Security
      Module).'
    subcategory: Auth
  severity: info
- id: Semgrep_generic.secrets.gitleaks.facebook.facebook
  languages:
  - c
  - python
  - visualforce
  - cpp
  - dockerfile
  - php
  - elixir
  - shell
  - csharp
  - json
  - typescript
  - apex
  - kotlin
  - terraform
  - ruby
  - scala
  - go
  - yaml
  - java
  - javascript
  - rust
  - swift
  - dart
  - clojure
  message: 'facebook

    A gitleaks facebook was detected which attempts to identify hard-coded credentials.'
  metadata:
    category: Security
    explanation: '## facebook

      A gitleaks facebook was detected which attempts to identify hard-coded credentials.
      It is not recommended to store credentials in source-code, as this risks secrets
      being leaked and used by either an internal or external malicious adversary.
      It is recommended to use environment variables to securely provide credentials
      or retrieve credentials from a secure vault or HSM (Hardware Security Module).'
    subcategory: Auth
  severity: info
- id: Semgrep_generic.secrets.gitleaks.fastly-api-token.fastly-api-token
  languages:
  - c
  - python
  - visualforce
  - cpp
  - dockerfile
  - php
  - elixir
  - shell
  - csharp
  - json
  - typescript
  - apex
  - kotlin
  - terraform
  - ruby
  - scala
  - go
  - yaml
  - java
  - javascript
  - rust
  - swift
  - dart
  - clojure
  message: 'fastly-api-token

    A gitleaks fastly-api-token was detected which attempts to identify hard-coded
    credentials.'
  metadata:
    category: Security
    explanation: '## fastly-api-token

      A gitleaks fastly-api-token was detected which attempts to identify hard-coded
      credentials. It is not recommended to store credentials in source-code, as this
      risks secrets being leaked and used by either an internal or external malicious
      adversary. It is recommended to use environment variables to securely provide
      credentials or retrieve credentials from a secure vault or HSM (Hardware Security
      Module).'
    subcategory: Auth
  severity: info
- id: Semgrep_generic.secrets.gitleaks.finicity-api-token.finicity-api-token
  languages:
  - c
  - python
  - visualforce
  - cpp
  - dockerfile
  - php
  - elixir
  - shell
  - csharp
  - json
  - typescript
  - apex
  - kotlin
  - terraform
  - ruby
  - scala
  - go
  - yaml
  - java
  - javascript
  - rust
  - swift
  - dart
  - clojure
  message: 'finicity-api-token

    A gitleaks finicity-api-token was detected which attempts to identify hard-coded
    credentials.'
  metadata:
    category: Security
    explanation: '## finicity-api-token

      A gitleaks finicity-api-token was detected which attempts to identify hard-coded
      credentials. It is not recommended to store credentials in source-code, as this
      risks secrets being leaked and used by either an internal or external malicious
      adversary. It is recommended to use environment variables to securely provide
      credentials or retrieve credentials from a secure vault or HSM (Hardware Security
      Module).'
    subcategory: Auth
  severity: info
- id: Semgrep_generic.secrets.gitleaks.finicity-client-secret.finicity-client-secret
  languages:
  - c
  - python
  - visualforce
  - cpp
  - dockerfile
  - php
  - elixir
  - shell
  - csharp
  - json
  - typescript
  - apex
  - kotlin
  - terraform
  - ruby
  - scala
  - go
  - yaml
  - java
  - javascript
  - rust
  - swift
  - dart
  - clojure
  message: 'finicity-client-secret

    A gitleaks finicity-client-secret was detected which attempts to identify hard-coded
    credentials.'
  metadata:
    category: Security
    explanation: '## finicity-client-secret

      A gitleaks finicity-client-secret was detected which attempts to identify hard-coded
      credentials. It is not recommended to store credentials in source-code, as this
      risks secrets being leaked and used by either an internal or external malicious
      adversary. It is recommended to use environment variables to securely provide
      credentials or retrieve credentials from a secure vault or HSM (Hardware Security
      Module).'
    subcategory: Auth
  severity: info
- id: Semgrep_generic.secrets.gitleaks.finnhub-access-token.finnhub-access-token
  languages:
  - c
  - python
  - visualforce
  - cpp
  - dockerfile
  - php
  - elixir
  - shell
  - csharp
  - json
  - typescript
  - apex
  - kotlin
  - terraform
  - ruby
  - scala
  - go
  - yaml
  - java
  - javascript
  - rust
  - swift
  - dart
  - clojure
  message: 'finnhub-access-token

    A gitleaks finnhub-access-token was detected which attempts to identify hard-coded
    credentials.'
  metadata:
    category: Security
    explanation: '## finnhub-access-token

      A gitleaks finnhub-access-token was detected which attempts to identify hard-coded
      credentials. It is not recommended to store credentials in source-code, as this
      risks secrets being leaked and used by either an internal or external malicious
      adversary. It is recommended to use environment variables to securely provide
      credentials or retrieve credentials from a secure vault or HSM (Hardware Security
      Module).'
    subcategory: Auth
  severity: info
- id: Semgrep_generic.secrets.gitleaks.flickr-access-token.flickr-access-token
  languages:
  - c
  - python
  - visualforce
  - cpp
  - dockerfile
  - php
  - elixir
  - shell
  - csharp
  - json
  - typescript
  - apex
  - kotlin
  - terraform
  - ruby
  - scala
  - go
  - yaml
  - java
  - javascript
  - rust
  - swift
  - dart
  - clojure
  message: 'flickr-access-token

    A gitleaks flickr-access-token was detected which attempts to identify hard-coded
    credentials.'
  metadata:
    category: Security
    explanation: '## flickr-access-token

      A gitleaks flickr-access-token was detected which attempts to identify hard-coded
      credentials. It is not recommended to store credentials in source-code, as this
      risks secrets being leaked and used by either an internal or external malicious
      adversary. It is recommended to use environment variables to securely provide
      credentials or retrieve credentials from a secure vault or HSM (Hardware Security
      Module).'
    subcategory: Auth
  severity: info
- id: Semgrep_generic.secrets.gitleaks.flutterwave-encryption-key.flutterwave-encryption-key
  languages:
  - c
  - python
  - visualforce
  - cpp
  - dockerfile
  - php
  - elixir
  - shell
  - csharp
  - json
  - typescript
  - apex
  - kotlin
  - terraform
  - ruby
  - scala
  - go
  - yaml
  - java
  - javascript
  - rust
  - swift
  - dart
  - clojure
  message: 'flutterwave-encryption-key

    A gitleaks flutterwave-encryption-key was detected which attempts to identify
    hard-coded credentials.'
  metadata:
    category: Security
    explanation: '## flutterwave-encryption-key

      A gitleaks flutterwave-encryption-key was detected which attempts to identify
      hard-coded credentials. It is not recommended to store credentials in source-code,
      as this risks secrets being leaked and used by either an internal or external
      malicious adversary. It is recommended to use environment variables to securely
      provide credentials or retrieve credentials from a secure vault or HSM (Hardware
      Security Module).'
    subcategory: Auth
  severity: info
- id: Semgrep_generic.secrets.gitleaks.flutterwave-public-key.flutterwave-public-key
  languages:
  - c
  - python
  - visualforce
  - cpp
  - dockerfile
  - php
  - elixir
  - shell
  - csharp
  - json
  - typescript
  - apex
  - kotlin
  - terraform
  - ruby
  - scala
  - go
  - yaml
  - java
  - javascript
  - rust
  - swift
  - dart
  - clojure
  message: 'flutterwave-public-key

    A gitleaks flutterwave-public-key was detected which attempts to identify hard-coded
    credentials.'
  metadata:
    category: Security
    explanation: '## flutterwave-public-key

      A gitleaks flutterwave-public-key was detected which attempts to identify hard-coded
      credentials. It is not recommended to store credentials in source-code, as this
      risks secrets being leaked and used by either an internal or external malicious
      adversary. It is recommended to use environment variables to securely provide
      credentials or retrieve credentials from a secure vault or HSM (Hardware Security
      Module).'
    subcategory: Auth
  severity: info
- id: Semgrep_generic.secrets.gitleaks.flutterwave-secret-key.flutterwave-secret-key
  languages:
  - c
  - python
  - visualforce
  - cpp
  - dockerfile
  - php
  - elixir
  - shell
  - csharp
  - json
  - typescript
  - apex
  - kotlin
  - terraform
  - ruby
  - scala
  - go
  - yaml
  - java
  - javascript
  - rust
  - swift
  - dart
  - clojure
  message: 'flutterwave-secret-key

    A gitleaks flutterwave-secret-key was detected which attempts to identify hard-coded
    credentials.'
  metadata:
    category: Security
    explanation: '## flutterwave-secret-key

      A gitleaks flutterwave-secret-key was detected which attempts to identify hard-coded
      credentials. It is not recommended to store credentials in source-code, as this
      risks secrets being leaked and used by either an internal or external malicious
      adversary. It is recommended to use environment variables to securely provide
      credentials or retrieve credentials from a secure vault or HSM (Hardware Security
      Module).'
    subcategory: Auth
  severity: info
- id: Semgrep_generic.secrets.gitleaks.frameio-api-token.frameio-api-token
  languages:
  - c
  - python
  - visualforce
  - cpp
  - dockerfile
  - php
  - elixir
  - shell
  - csharp
  - json
  - typescript
  - apex
  - kotlin
  - terraform
  - ruby
  - scala
  - go
  - yaml
  - java
  - javascript
  - rust
  - swift
  - dart
  - clojure
  message: 'frameio-api-token

    A gitleaks frameio-api-token was detected which attempts to identify hard-coded
    credentials.'
  metadata:
    category: Security
    explanation: '## frameio-api-token

      A gitleaks frameio-api-token was detected which attempts to identify hard-coded
      credentials. It is not recommended to store credentials in source-code, as this
      risks secrets being leaked and used by either an internal or external malicious
      adversary. It is recommended to use environment variables to securely provide
      credentials or retrieve credentials from a secure vault or HSM (Hardware Security
      Module).'
    subcategory: Auth
  severity: info
- id: Semgrep_generic.secrets.gitleaks.freshbooks-access-token.freshbooks-access-token
  languages:
  - c
  - python
  - visualforce
  - cpp
  - dockerfile
  - php
  - elixir
  - shell
  - csharp
  - json
  - typescript
  - apex
  - kotlin
  - terraform
  - ruby
  - scala
  - go
  - yaml
  - java
  - javascript
  - rust
  - swift
  - dart
  - clojure
  message: 'freshbooks-access-token

    A gitleaks freshbooks-access-token was detected which attempts to identify hard-coded
    credentials.'
  metadata:
    category: Security
    explanation: '## freshbooks-access-token

      A gitleaks freshbooks-access-token was detected which attempts to identify hard-coded
      credentials. It is not recommended to store credentials in source-code, as this
      risks secrets being leaked and used by either an internal or external malicious
      adversary. It is recommended to use environment variables to securely provide
      credentials or retrieve credentials from a secure vault or HSM (Hardware Security
      Module).'
    subcategory: Auth
  severity: info
- id: Semgrep_generic.secrets.gitleaks.gcp-api-key.gcp-api-key
  languages:
  - c
  - python
  - visualforce
  - cpp
  - dockerfile
  - php
  - elixir
  - shell
  - csharp
  - json
  - typescript
  - apex
  - kotlin
  - terraform
  - ruby
  - scala
  - go
  - yaml
  - java
  - javascript
  - rust
  - swift
  - dart
  - clojure
  message: 'gcp-api-key

    A gitleaks gcp-api-key was detected which attempts to identify hard-coded credentials.'
  metadata:
    category: Security
    explanation: '## gcp-api-key

      A gitleaks gcp-api-key was detected which attempts to identify hard-coded credentials.
      It is not recommended to store credentials in source-code, as this risks secrets
      being leaked and used by either an internal or external malicious adversary.
      It is recommended to use environment variables to securely provide credentials
      or retrieve credentials from a secure vault or HSM (Hardware Security Module).'
    subcategory: Auth
  severity: info
- id: Semgrep_generic.secrets.gitleaks.generic-api-key.generic-api-key
  languages:
  - c
  - python
  - visualforce
  - cpp
  - dockerfile
  - php
  - elixir
  - shell
  - csharp
  - json
  - typescript
  - apex
  - kotlin
  - terraform
  - ruby
  - scala
  - go
  - yaml
  - java
  - javascript
  - rust
  - swift
  - dart
  - clojure
  message: 'generic-api-key

    A gitleaks generic-api-key was detected which attempts to identify hard-coded
    credentials.'
  metadata:
    category: Security
    explanation: '## generic-api-key

      A gitleaks generic-api-key was detected which attempts to identify hard-coded
      credentials.  It is not recommended to store credentials in source-code, as
      this risks secrets being leaked  and used by either an internal or external
      malicious adversary. It is recommended to use  environment variables to securely
      provide credentials or retrieve credentials from a  secure vault or HSM (Hardware
      Security Module). This rule can introduce a lot of false positives,  it is not
      recommended to be used in PR comments.'
    subcategory: Auth
  severity: info
- id: Semgrep_generic.secrets.gitleaks.github-app-token.github-app-token
  languages:
  - c
  - python
  - visualforce
  - cpp
  - dockerfile
  - php
  - elixir
  - shell
  - csharp
  - json
  - typescript
  - apex
  - kotlin
  - terraform
  - ruby
  - scala
  - go
  - yaml
  - java
  - javascript
  - rust
  - swift
  - dart
  - clojure
  message: 'github-app-token

    A gitleaks github-app-token was detected which attempts to identify hard-coded
    credentials.'
  metadata:
    category: Security
    explanation: '## github-app-token

      A gitleaks github-app-token was detected which attempts to identify hard-coded
      credentials. It is not recommended to store credentials in source-code, as this
      risks secrets being leaked and used by either an internal or external malicious
      adversary. It is recommended to use environment variables to securely provide
      credentials or retrieve credentials from a secure vault or HSM (Hardware Security
      Module).'
    subcategory: Auth
  severity: info
- id: Semgrep_generic.secrets.gitleaks.github-fine-grained-pat.github-fine-grained-pat
  languages:
  - c
  - python
  - visualforce
  - cpp
  - dockerfile
  - php
  - elixir
  - shell
  - csharp
  - json
  - typescript
  - apex
  - kotlin
  - terraform
  - ruby
  - scala
  - go
  - yaml
  - java
  - javascript
  - rust
  - swift
  - dart
  - clojure
  message: 'github-fine-grained-pat

    A gitleaks github-fine-grained-pat was detected which attempts to identify hard-coded
    credentials.'
  metadata:
    category: Security
    explanation: '## github-fine-grained-pat

      A gitleaks github-fine-grained-pat was detected which attempts to identify hard-coded
      credentials. It is not recommended to store credentials in source-code, as this
      risks secrets being leaked and used by either an internal or external malicious
      adversary. It is recommended to use environment variables to securely provide
      credentials or retrieve credentials from a secure vault or HSM (Hardware Security
      Module).'
    subcategory: Auth
  severity: info
- id: Semgrep_generic.secrets.gitleaks.github-oauth.github-oauth
  languages:
  - c
  - python
  - visualforce
  - cpp
  - dockerfile
  - php
  - elixir
  - shell
  - csharp
  - json
  - typescript
  - apex
  - kotlin
  - terraform
  - ruby
  - scala
  - go
  - yaml
  - java
  - javascript
  - rust
  - swift
  - dart
  - clojure
  message: 'github-oauth

    A gitleaks github-oauth was detected which attempts to identify hard-coded credentials.'
  metadata:
    category: Security
    explanation: '## github-oauth

      A gitleaks github-oauth was detected which attempts to identify hard-coded credentials.
      It is not recommended to store credentials in source-code, as this risks secrets
      being leaked and used by either an internal or external malicious adversary.
      It is recommended to use environment variables to securely provide credentials
      or retrieve credentials from a secure vault or HSM (Hardware Security Module).'
    subcategory: Auth
  severity: info
- id: Semgrep_generic.secrets.gitleaks.github-pat.github-pat
  languages:
  - c
  - python
  - visualforce
  - cpp
  - dockerfile
  - php
  - elixir
  - shell
  - csharp
  - json
  - typescript
  - apex
  - kotlin
  - terraform
  - ruby
  - scala
  - go
  - yaml
  - java
  - javascript
  - rust
  - swift
  - dart
  - clojure
  message: 'github-pat

    A gitleaks github-pat was detected which attempts to identify hard-coded credentials.'
  metadata:
    category: Security
    explanation: '## github-pat

      A gitleaks github-pat was detected which attempts to identify hard-coded credentials.
      It is not recommended to store credentials in source-code, as this risks secrets
      being leaked and used by either an internal or external malicious adversary.
      It is recommended to use environment variables to securely provide credentials
      or retrieve credentials from a secure vault or HSM (Hardware Security Module).'
    subcategory: Auth
  severity: info
- id: Semgrep_generic.secrets.gitleaks.github-refresh-token.github-refresh-token
  languages:
  - c
  - python
  - visualforce
  - cpp
  - dockerfile
  - php
  - elixir
  - shell
  - csharp
  - json
  - typescript
  - apex
  - kotlin
  - terraform
  - ruby
  - scala
  - go
  - yaml
  - java
  - javascript
  - rust
  - swift
  - dart
  - clojure
  message: 'github-refresh-token

    A gitleaks github-refresh-token was detected which attempts to identify hard-coded
    credentials.'
  metadata:
    category: Security
    explanation: '## github-refresh-token

      A gitleaks github-refresh-token was detected which attempts to identify hard-coded
      credentials. It is not recommended to store credentials in source-code, as this
      risks secrets being leaked and used by either an internal or external malicious
      adversary. It is recommended to use environment variables to securely provide
      credentials or retrieve credentials from a secure vault or HSM (Hardware Security
      Module).'
    subcategory: Auth
  severity: info
- id: Semgrep_generic.secrets.gitleaks.gitlab-pat.gitlab-pat
  languages:
  - c
  - python
  - visualforce
  - cpp
  - dockerfile
  - php
  - elixir
  - shell
  - csharp
  - json
  - typescript
  - apex
  - kotlin
  - terraform
  - ruby
  - scala
  - go
  - yaml
  - java
  - javascript
  - rust
  - swift
  - dart
  - clojure
  message: 'gitlab-pat

    A gitleaks gitlab-pat was detected which attempts to identify hard-coded credentials.'
  metadata:
    category: Security
    explanation: '## gitlab-pat

      A gitleaks gitlab-pat was detected which attempts to identify hard-coded credentials.
      It is not recommended to store credentials in source-code, as this risks secrets
      being leaked and used by either an internal or external malicious adversary.
      It is recommended to use environment variables to securely provide credentials
      or retrieve credentials from a secure vault or HSM (Hardware Security Module).'
    subcategory: Auth
  severity: info
- id: Semgrep_generic.secrets.gitleaks.gitlab-ptt.gitlab-ptt
  languages:
  - c
  - python
  - visualforce
  - cpp
  - dockerfile
  - php
  - elixir
  - shell
  - csharp
  - json
  - typescript
  - apex
  - kotlin
  - terraform
  - ruby
  - scala
  - go
  - yaml
  - java
  - javascript
  - rust
  - swift
  - dart
  - clojure
  message: 'gitlab-ptt

    A gitleaks gitlab-ptt was detected which attempts to identify hard-coded credentials.'
  metadata:
    category: Security
    explanation: '## gitlab-ptt

      A gitleaks gitlab-ptt was detected which attempts to identify hard-coded credentials.
      It is not recommended to store credentials in source-code, as this risks secrets
      being leaked and used by either an internal or external malicious adversary.
      It is recommended to use environment variables to securely provide credentials
      or retrieve credentials from a secure vault or HSM (Hardware Security Module).'
    subcategory: Auth
  severity: info
- id: Semgrep_generic.secrets.gitleaks.gitlab-rrt.gitlab-rrt
  languages:
  - c
  - python
  - visualforce
  - cpp
  - dockerfile
  - php
  - elixir
  - shell
  - csharp
  - json
  - typescript
  - apex
  - kotlin
  - terraform
  - ruby
  - scala
  - go
  - yaml
  - java
  - javascript
  - rust
  - swift
  - dart
  - clojure
  message: 'gitlab-rrt

    A gitleaks gitlab-rrt was detected which attempts to identify hard-coded credentials.'
  metadata:
    category: Security
    explanation: '## gitlab-rrt

      A gitleaks gitlab-rrt was detected which attempts to identify hard-coded credentials.
      It is not recommended to store credentials in source-code, as this risks secrets
      being leaked and used by either an internal or external malicious adversary.
      It is recommended to use environment variables to securely provide credentials
      or retrieve credentials from a secure vault or HSM (Hardware Security Module).'
    subcategory: Auth
  severity: info
- id: Semgrep_generic.secrets.gitleaks.gitter-access-token.gitter-access-token
  languages:
  - c
  - python
  - visualforce
  - cpp
  - dockerfile
  - php
  - elixir
  - shell
  - csharp
  - json
  - typescript
  - apex
  - kotlin
  - terraform
  - ruby
  - scala
  - go
  - yaml
  - java
  - javascript
  - rust
  - swift
  - dart
  - clojure
  message: 'gitter-access-token

    A gitleaks gitter-access-token was detected which attempts to identify hard-coded
    credentials.'
  metadata:
    category: Security
    explanation: '## gitter-access-token

      A gitleaks gitter-access-token was detected which attempts to identify hard-coded
      credentials. It is not recommended to store credentials in source-code, as this
      risks secrets being leaked and used by either an internal or external malicious
      adversary. It is recommended to use environment variables to securely provide
      credentials or retrieve credentials from a secure vault or HSM (Hardware Security
      Module).'
    subcategory: Auth
  severity: info
- id: Semgrep_generic.secrets.gitleaks.gocardless-api-token.gocardless-api-token
  languages:
  - c
  - python
  - visualforce
  - cpp
  - dockerfile
  - php
  - elixir
  - shell
  - csharp
  - json
  - typescript
  - apex
  - kotlin
  - terraform
  - ruby
  - scala
  - go
  - yaml
  - java
  - javascript
  - rust
  - swift
  - dart
  - clojure
  message: 'gocardless-api-token

    A gitleaks gocardless-api-token was detected which attempts to identify hard-coded
    credentials.'
  metadata:
    category: Security
    explanation: '## gocardless-api-token

      A gitleaks gocardless-api-token was detected which attempts to identify hard-coded
      credentials. It is not recommended to store credentials in source-code, as this
      risks secrets being leaked and used by either an internal or external malicious
      adversary. It is recommended to use environment variables to securely provide
      credentials or retrieve credentials from a secure vault or HSM (Hardware Security
      Module).'
    subcategory: Auth
  severity: info
- id: Semgrep_generic.secrets.gitleaks.grafana-api-key.grafana-api-key
  languages:
  - c
  - python
  - visualforce
  - cpp
  - dockerfile
  - php
  - elixir
  - shell
  - csharp
  - json
  - typescript
  - apex
  - kotlin
  - terraform
  - ruby
  - scala
  - go
  - yaml
  - java
  - javascript
  - rust
  - swift
  - dart
  - clojure
  message: 'grafana-api-key

    A gitleaks grafana-api-key was detected which attempts to identify hard-coded
    credentials.'
  metadata:
    category: Security
    explanation: '## grafana-api-key

      A gitleaks grafana-api-key was detected which attempts to identify hard-coded
      credentials. It is not recommended to store credentials in source-code, as this
      risks secrets being leaked and used by either an internal or external malicious
      adversary. It is recommended to use environment variables to securely provide
      credentials or retrieve credentials from a secure vault or HSM (Hardware Security
      Module).'
    subcategory: Auth
  severity: info
- id: Semgrep_generic.secrets.gitleaks.grafana-cloud-api-token.grafana-cloud-api-token
  languages:
  - c
  - python
  - visualforce
  - cpp
  - dockerfile
  - php
  - elixir
  - shell
  - csharp
  - json
  - typescript
  - apex
  - kotlin
  - terraform
  - ruby
  - scala
  - go
  - yaml
  - java
  - javascript
  - rust
  - swift
  - dart
  - clojure
  message: 'grafana-cloud-api-token

    A gitleaks grafana-cloud-api-token was detected which attempts to identify hard-coded
    credentials.'
  metadata:
    category: Security
    explanation: '## grafana-cloud-api-token

      A gitleaks grafana-cloud-api-token was detected which attempts to identify hard-coded
      credentials. It is not recommended to store credentials in source-code, as this
      risks secrets being leaked and used by either an internal or external malicious
      adversary. It is recommended to use environment variables to securely provide
      credentials or retrieve credentials from a secure vault or HSM (Hardware Security
      Module).'
    subcategory: Auth
  severity: info
- id: Semgrep_generic.secrets.gitleaks.grafana-service-account-token.grafana-service-account-token
  languages:
  - c
  - python
  - visualforce
  - cpp
  - dockerfile
  - php
  - elixir
  - shell
  - csharp
  - json
  - typescript
  - apex
  - kotlin
  - terraform
  - ruby
  - scala
  - go
  - yaml
  - java
  - javascript
  - rust
  - swift
  - dart
  - clojure
  message: 'grafana-service-account-token

    A gitleaks grafana-service-account-token was detected which attempts to identify
    hard-coded credentials.'
  metadata:
    category: Security
    explanation: '## grafana-service-account-token

      A gitleaks grafana-service-account-token was detected which attempts to identify
      hard-coded credentials. It is not recommended to store credentials in source-code,
      as this risks secrets being leaked and used by either an internal or external
      malicious adversary. It is recommended to use environment variables to securely
      provide credentials or retrieve credentials from a secure vault or HSM (Hardware
      Security Module).'
    subcategory: Auth
  severity: info
- id: Semgrep_generic.secrets.gitleaks.harness-api-key.harness-api-key
  languages:
  - c
  - python
  - visualforce
  - cpp
  - dockerfile
  - php
  - elixir
  - shell
  - csharp
  - json
  - typescript
  - apex
  - kotlin
  - terraform
  - ruby
  - scala
  - go
  - yaml
  - java
  - javascript
  - rust
  - swift
  - dart
  - clojure
  message: 'harness-api-key

    A gitleaks harness-api-key was detected which attempts to identify hard-coded
    credentials.'
  metadata:
    category: Security
    explanation: '## harness-api-key

      A gitleaks harness-api-key was detected which attempts to identify hard-coded
      credentials. It is not recommended to store credentials in source-code, as this
      risks secrets being leaked and used by either an internal or external malicious
      adversary. It is recommended to use environment variables to securely provide
      credentials or retrieve credentials from a secure vault or HSM (Hardware Security
      Module).'
    subcategory: Auth
  severity: info
- id: Semgrep_generic.secrets.gitleaks.hashicorp-tf-api-token.hashicorp-tf-api-token
  languages:
  - c
  - python
  - visualforce
  - cpp
  - dockerfile
  - php
  - elixir
  - shell
  - csharp
  - json
  - typescript
  - apex
  - kotlin
  - terraform
  - ruby
  - scala
  - go
  - yaml
  - java
  - javascript
  - rust
  - swift
  - dart
  - clojure
  message: 'hashicorp-tf-api-token

    A gitleaks hashicorp-tf-api-token was detected which attempts to identify hard-coded
    credentials.'
  metadata:
    category: Security
    explanation: '## hashicorp-tf-api-token

      A gitleaks hashicorp-tf-api-token was detected which attempts to identify hard-coded
      credentials. It is not recommended to store credentials in source-code, as this
      risks secrets being leaked and used by either an internal or external malicious
      adversary. It is recommended to use environment variables to securely provide
      credentials or retrieve credentials from a secure vault or HSM (Hardware Security
      Module).'
    subcategory: Auth
  severity: info
- id: Semgrep_generic.secrets.gitleaks.hashicorp-tf-password.hashicorp-tf-password
  languages:
  - c
  - python
  - visualforce
  - cpp
  - dockerfile
  - php
  - elixir
  - shell
  - csharp
  - json
  - typescript
  - apex
  - kotlin
  - terraform
  - ruby
  - scala
  - go
  - yaml
  - java
  - javascript
  - rust
  - swift
  - dart
  - clojure
  message: 'hashicorp-tf-password

    A gitleaks hashicorp-tf-password was detected which attempts to identify hard-coded
    credentials.'
  metadata:
    category: Security
    explanation: '## hashicorp-tf-password

      A gitleaks hashicorp-tf-password was detected which attempts to identify hard-coded
      credentials. It is not recommended to store credentials in source-code, as this
      risks secrets being leaked and used by either an internal or external malicious
      adversary. It is recommended to use environment variables to securely provide
      credentials or retrieve credentials from a secure vault or HSM (Hardware Security
      Module).'
    subcategory: Auth
  severity: info
- id: Semgrep_generic.secrets.gitleaks.heroku-api-key.heroku-api-key
  languages:
  - c
  - python
  - visualforce
  - cpp
  - dockerfile
  - php
  - elixir
  - shell
  - csharp
  - json
  - typescript
  - apex
  - kotlin
  - terraform
  - ruby
  - scala
  - go
  - yaml
  - java
  - javascript
  - rust
  - swift
  - dart
  - clojure
  message: 'heroku-api-key

    A gitleaks heroku-api-key was detected which attempts to identify hard-coded credentials.'
  metadata:
    category: Security
    explanation: '## heroku-api-key

      A gitleaks heroku-api-key was detected which attempts to identify hard-coded
      credentials. It is not recommended to store credentials in source-code, as this
      risks secrets being leaked and used by either an internal or external malicious
      adversary. It is recommended to use environment variables to securely provide
      credentials or retrieve credentials from a secure vault or HSM (Hardware Security
      Module).'
    subcategory: Auth
  severity: info
- id: Semgrep_generic.secrets.gitleaks.hubspot-api-key.hubspot-api-key
  languages:
  - c
  - python
  - visualforce
  - cpp
  - dockerfile
  - php
  - elixir
  - shell
  - csharp
  - json
  - typescript
  - apex
  - kotlin
  - terraform
  - ruby
  - scala
  - go
  - yaml
  - java
  - javascript
  - rust
  - swift
  - dart
  - clojure
  message: 'hubspot-api-key

    A gitleaks hubspot-api-key was detected which attempts to identify hard-coded
    credentials.'
  metadata:
    category: Security
    explanation: '## hubspot-api-key

      A gitleaks hubspot-api-key was detected which attempts to identify hard-coded
      credentials. It is not recommended to store credentials in source-code, as this
      risks secrets being leaked and used by either an internal or external malicious
      adversary. It is recommended to use environment variables to securely provide
      credentials or retrieve credentials from a secure vault or HSM (Hardware Security
      Module).'
    subcategory: Auth
  severity: info
- id: Semgrep_generic.secrets.gitleaks.huggingface-access-token.huggingface-access-token
  languages:
  - c
  - python
  - visualforce
  - cpp
  - dockerfile
  - php
  - elixir
  - shell
  - csharp
  - json
  - typescript
  - apex
  - kotlin
  - terraform
  - ruby
  - scala
  - go
  - yaml
  - java
  - javascript
  - rust
  - swift
  - dart
  - clojure
  message: 'huggingface-access-token

    A gitleaks huggingface-access-token was detected which attempts to identify hard-coded
    credentials.'
  metadata:
    category: Security
    explanation: '## huggingface-access-token

      A gitleaks huggingface-access-token was detected which attempts to identify
      hard-coded credentials. It is not recommended to store credentials in source-code,
      as this risks secrets being leaked and used by either an internal or external
      malicious adversary. It is recommended to use environment variables to securely
      provide credentials or retrieve credentials from a secure vault or HSM (Hardware
      Security Module).'
    subcategory: Auth
  severity: info
- id: Semgrep_generic.secrets.gitleaks.huggingface-organization-api-token.huggingface-organization-api-token
  languages:
  - c
  - python
  - visualforce
  - cpp
  - dockerfile
  - php
  - elixir
  - shell
  - csharp
  - json
  - typescript
  - apex
  - kotlin
  - terraform
  - ruby
  - scala
  - go
  - yaml
  - java
  - javascript
  - rust
  - swift
  - dart
  - clojure
  message: 'huggingface-organization-api-token

    A gitleaks huggingface-organization-api-token was detected which attempts to identify
    hard-coded credentials.'
  metadata:
    category: Security
    explanation: '## huggingface-organization-api-token

      A gitleaks huggingface-organization-api-token was detected which attempts to
      identify hard-coded credentials. It is not recommended to store credentials
      in source-code, as this risks secrets being leaked and used by either an internal
      or external malicious adversary. It is recommended to use environment variables
      to securely provide credentials or retrieve credentials from a secure vault
      or HSM (Hardware Security Module).'
    subcategory: Auth
  severity: info
- id: Semgrep_generic.secrets.gitleaks.infracost-api-token.infracost-api-token
  languages:
  - c
  - python
  - visualforce
  - cpp
  - dockerfile
  - php
  - elixir
  - shell
  - csharp
  - json
  - typescript
  - apex
  - kotlin
  - terraform
  - ruby
  - scala
  - go
  - yaml
  - java
  - javascript
  - rust
  - swift
  - dart
  - clojure
  message: 'infracost-api-token

    A gitleaks infracost-api-token was detected which attempts to identify hard-coded
    credentials.'
  metadata:
    category: Security
    explanation: '## infracost-api-token

      A gitleaks infracost-api-token was detected which attempts to identify hard-coded
      credentials. It is not recommended to store credentials in source-code, as this
      risks secrets being leaked and used by either an internal or external malicious
      adversary. It is recommended to use environment variables to securely provide
      credentials or retrieve credentials from a secure vault or HSM (Hardware Security
      Module).'
    subcategory: Auth
  severity: info
- id: Semgrep_generic.secrets.gitleaks.intercom-api-key.intercom-api-key
  languages:
  - c
  - python
  - visualforce
  - cpp
  - dockerfile
  - php
  - elixir
  - shell
  - csharp
  - json
  - typescript
  - apex
  - kotlin
  - terraform
  - ruby
  - scala
  - go
  - yaml
  - java
  - javascript
  - rust
  - swift
  - dart
  - clojure
  message: 'intercom-api-key

    A gitleaks intercom-api-key was detected which attempts to identify hard-coded
    credentials.'
  metadata:
    category: Security
    explanation: '## intercom-api-key

      A gitleaks intercom-api-key was detected which attempts to identify hard-coded
      credentials. It is not recommended to store credentials in source-code, as this
      risks secrets being leaked and used by either an internal or external malicious
      adversary. It is recommended to use environment variables to securely provide
      credentials or retrieve credentials from a secure vault or HSM (Hardware Security
      Module).'
    subcategory: Auth
  severity: info
- id: Semgrep_generic.secrets.gitleaks.intra42-client-secret.intra42-client-secret
  languages:
  - c
  - python
  - visualforce
  - cpp
  - dockerfile
  - php
  - elixir
  - shell
  - csharp
  - json
  - typescript
  - apex
  - kotlin
  - terraform
  - ruby
  - scala
  - go
  - yaml
  - java
  - javascript
  - rust
  - swift
  - dart
  - clojure
  message: 'intra42-client-secret

    A gitleaks intra42-client-secret was detected which attempts to identify hard-coded
    credentials.'
  metadata:
    category: Security
    explanation: '## intra42-client-secret

      A gitleaks intra42-client-secret was detected which attempts to identify hard-coded
      credentials. It is not recommended to store credentials in source-code, as this
      risks secrets being leaked and used by either an internal or external malicious
      adversary. It is recommended to use environment variables to securely provide
      credentials or retrieve credentials from a secure vault or HSM (Hardware Security
      Module).'
    subcategory: Auth
  severity: info
- id: Semgrep_generic.secrets.gitleaks.jfrog-api-key.jfrog-api-key
  languages:
  - c
  - python
  - visualforce
  - cpp
  - dockerfile
  - php
  - elixir
  - shell
  - csharp
  - json
  - typescript
  - apex
  - kotlin
  - terraform
  - ruby
  - scala
  - go
  - yaml
  - java
  - javascript
  - rust
  - swift
  - dart
  - clojure
  message: 'jfrog-api-key

    A gitleaks jfrog-api-key was detected which attempts to identify hard-coded credentials.'
  metadata:
    category: Security
    explanation: '## jfrog-api-key

      A gitleaks jfrog-api-key was detected which attempts to identify hard-coded
      credentials. It is not recommended to store credentials in source-code, as this
      risks secrets being leaked and used by either an internal or external malicious
      adversary. It is recommended to use environment variables to securely provide
      credentials or retrieve credentials from a secure vault or HSM (Hardware Security
      Module).'
    subcategory: Auth
  severity: info
- id: Semgrep_generic.secrets.gitleaks.jfrog-identity-token.jfrog-identity-token
  languages:
  - c
  - python
  - visualforce
  - cpp
  - dockerfile
  - php
  - elixir
  - shell
  - csharp
  - json
  - typescript
  - apex
  - kotlin
  - terraform
  - ruby
  - scala
  - go
  - yaml
  - java
  - javascript
  - rust
  - swift
  - dart
  - clojure
  message: 'jfrog-identity-token

    A gitleaks jfrog-identity-token was detected which attempts to identify hard-coded
    credentials.'
  metadata:
    category: Security
    explanation: '## jfrog-identity-token

      A gitleaks jfrog-identity-token was detected which attempts to identify hard-coded
      credentials. It is not recommended to store credentials in source-code, as this
      risks secrets being leaked and used by either an internal or external malicious
      adversary. It is recommended to use environment variables to securely provide
      credentials or retrieve credentials from a secure vault or HSM (Hardware Security
      Module).'
    subcategory: Auth
  severity: info
- id: Semgrep_generic.secrets.gitleaks.jwt-base64.jwt-base64
  languages:
  - c
  - python
  - visualforce
  - cpp
  - dockerfile
  - php
  - elixir
  - shell
  - csharp
  - json
  - typescript
  - apex
  - kotlin
  - terraform
  - ruby
  - scala
  - go
  - yaml
  - java
  - javascript
  - rust
  - swift
  - dart
  - clojure
  message: 'jwt-base64

    A gitleaks jwt-base64 was detected which attempts to identify hard-coded credentials.'
  metadata:
    category: Security
    explanation: '## jwt-base64

      A gitleaks jwt-base64 was detected which attempts to identify hard-coded credentials.
      It is not recommended to store credentials in source-code, as this risks secrets
      being leaked and used by either an internal or external malicious adversary.
      It is recommended to use environment variables to securely provide credentials
      or retrieve credentials from a secure vault or HSM (Hardware Security Module).'
    subcategory: Auth
  severity: info
- id: Semgrep_generic.secrets.gitleaks.jwt.jwt
  languages:
  - c
  - python
  - visualforce
  - cpp
  - dockerfile
  - php
  - elixir
  - shell
  - csharp
  - json
  - typescript
  - apex
  - kotlin
  - terraform
  - ruby
  - scala
  - go
  - yaml
  - java
  - javascript
  - rust
  - swift
  - dart
  - clojure
  message: 'jwt

    A gitleaks jwt was detected which attempts to identify hard-coded credentials.'
  metadata:
    category: Security
    explanation: '## jwt

      A gitleaks jwt was detected which attempts to identify hard-coded credentials.
      It is not recommended to store credentials in source-code, as this risks secrets
      being leaked and used by either an internal or external malicious adversary.
      It is recommended to use environment variables to securely provide credentials
      or retrieve credentials from a secure vault or HSM (Hardware Security Module).'
    subcategory: Auth
  severity: info
- id: Semgrep_generic.secrets.gitleaks.kraken-access-token.kraken-access-token
  languages:
  - c
  - python
  - visualforce
  - cpp
  - dockerfile
  - php
  - elixir
  - shell
  - csharp
  - json
  - typescript
  - apex
  - kotlin
  - terraform
  - ruby
  - scala
  - go
  - yaml
  - java
  - javascript
  - rust
  - swift
  - dart
  - clojure
  message: 'kraken-access-token

    A gitleaks kraken-access-token was detected which attempts to identify hard-coded
    credentials.'
  metadata:
    category: Security
    explanation: '## kraken-access-token

      A gitleaks kraken-access-token was detected which attempts to identify hard-coded
      credentials. It is not recommended to store credentials in source-code, as this
      risks secrets being leaked and used by either an internal or external malicious
      adversary. It is recommended to use environment variables to securely provide
      credentials or retrieve credentials from a secure vault or HSM (Hardware Security
      Module).'
    subcategory: Auth
  severity: info
- id: Semgrep_generic.secrets.gitleaks.kucoin-access-token.kucoin-access-token
  languages:
  - c
  - python
  - visualforce
  - cpp
  - dockerfile
  - php
  - elixir
  - shell
  - csharp
  - json
  - typescript
  - apex
  - kotlin
  - terraform
  - ruby
  - scala
  - go
  - yaml
  - java
  - javascript
  - rust
  - swift
  - dart
  - clojure
  message: 'kucoin-access-token

    A gitleaks kucoin-access-token was detected which attempts to identify hard-coded
    credentials.'
  metadata:
    category: Security
    explanation: '## kucoin-access-token

      A gitleaks kucoin-access-token was detected which attempts to identify hard-coded
      credentials. It is not recommended to store credentials in source-code, as this
      risks secrets being leaked and used by either an internal or external malicious
      adversary. It is recommended to use environment variables to securely provide
      credentials or retrieve credentials from a secure vault or HSM (Hardware Security
      Module).'
    subcategory: Auth
  severity: info
- id: Semgrep_generic.secrets.gitleaks.kucoin-secret-key.kucoin-secret-key
  languages:
  - c
  - python
  - visualforce
  - cpp
  - dockerfile
  - php
  - elixir
  - shell
  - csharp
  - json
  - typescript
  - apex
  - kotlin
  - terraform
  - ruby
  - scala
  - go
  - yaml
  - java
  - javascript
  - rust
  - swift
  - dart
  - clojure
  message: 'kucoin-secret-key

    A gitleaks kucoin-secret-key was detected which attempts to identify hard-coded
    credentials.'
  metadata:
    category: Security
    explanation: '## kucoin-secret-key

      A gitleaks kucoin-secret-key was detected which attempts to identify hard-coded
      credentials. It is not recommended to store credentials in source-code, as this
      risks secrets being leaked and used by either an internal or external malicious
      adversary. It is recommended to use environment variables to securely provide
      credentials or retrieve credentials from a secure vault or HSM (Hardware Security
      Module).'
    subcategory: Auth
  severity: info
- id: Semgrep_generic.secrets.gitleaks.launchdarkly-access-token.launchdarkly-access-token
  languages:
  - c
  - python
  - visualforce
  - cpp
  - dockerfile
  - php
  - elixir
  - shell
  - csharp
  - json
  - typescript
  - apex
  - kotlin
  - terraform
  - ruby
  - scala
  - go
  - yaml
  - java
  - javascript
  - rust
  - swift
  - dart
  - clojure
  message: 'launchdarkly-access-token

    A gitleaks launchdarkly-access-token was detected which attempts to identify hard-coded
    credentials.'
  metadata:
    category: Security
    explanation: '## launchdarkly-access-token

      A gitleaks launchdarkly-access-token was detected which attempts to identify
      hard-coded credentials. It is not recommended to store credentials in source-code,
      as this risks secrets being leaked and used by either an internal or external
      malicious adversary. It is recommended to use environment variables to securely
      provide credentials or retrieve credentials from a secure vault or HSM (Hardware
      Security Module).'
    subcategory: Auth
  severity: info
- id: Semgrep_generic.secrets.gitleaks.linear-api-key.linear-api-key
  languages:
  - c
  - python
  - visualforce
  - cpp
  - dockerfile
  - php
  - elixir
  - shell
  - csharp
  - json
  - typescript
  - apex
  - kotlin
  - terraform
  - ruby
  - scala
  - go
  - yaml
  - java
  - javascript
  - rust
  - swift
  - dart
  - clojure
  message: 'linear-api-key

    A gitleaks linear-api-key was detected which attempts to identify hard-coded credentials.'
  metadata:
    category: Security
    explanation: '## linear-api-key

      A gitleaks linear-api-key was detected which attempts to identify hard-coded
      credentials. It is not recommended to store credentials in source-code, as this
      risks secrets being leaked and used by either an internal or external malicious
      adversary. It is recommended to use environment variables to securely provide
      credentials or retrieve credentials from a secure vault or HSM (Hardware Security
      Module).'
    subcategory: Auth
  severity: info
- id: Semgrep_generic.secrets.gitleaks.linear-client-secret.linear-client-secret
  languages:
  - c
  - python
  - visualforce
  - cpp
  - dockerfile
  - php
  - elixir
  - shell
  - csharp
  - json
  - typescript
  - apex
  - kotlin
  - terraform
  - ruby
  - scala
  - go
  - yaml
  - java
  - javascript
  - rust
  - swift
  - dart
  - clojure
  message: 'linear-client-secret

    A gitleaks linear-client-secret was detected which attempts to identify hard-coded
    credentials.'
  metadata:
    category: Security
    explanation: '## linear-client-secret

      A gitleaks linear-client-secret was detected which attempts to identify hard-coded
      credentials. It is not recommended to store credentials in source-code, as this
      risks secrets being leaked and used by either an internal or external malicious
      adversary. It is recommended to use environment variables to securely provide
      credentials or retrieve credentials from a secure vault or HSM (Hardware Security
      Module).'
    subcategory: Auth
  severity: info
- id: Semgrep_generic.secrets.gitleaks.linkedin-client-id.linkedin-client-id
  languages:
  - c
  - python
  - visualforce
  - cpp
  - dockerfile
  - php
  - elixir
  - shell
  - csharp
  - json
  - typescript
  - apex
  - kotlin
  - terraform
  - ruby
  - scala
  - go
  - yaml
  - java
  - javascript
  - rust
  - swift
  - dart
  - clojure
  message: 'linkedin-client-id

    A gitleaks linkedin-client-id was detected which attempts to identify hard-coded
    credentials.'
  metadata:
    category: Security
    explanation: '## linkedin-client-id

      A gitleaks linkedin-client-id was detected which attempts to identify hard-coded
      credentials. It is not recommended to store credentials in source-code, as this
      risks secrets being leaked and used by either an internal or external malicious
      adversary. It is recommended to use environment variables to securely provide
      credentials or retrieve credentials from a secure vault or HSM (Hardware Security
      Module).'
    subcategory: Auth
  severity: info
- id: Semgrep_generic.secrets.gitleaks.linkedin-client-secret.linkedin-client-secret
  languages:
  - c
  - python
  - visualforce
  - cpp
  - dockerfile
  - php
  - elixir
  - shell
  - csharp
  - json
  - typescript
  - apex
  - kotlin
  - terraform
  - ruby
  - scala
  - go
  - yaml
  - java
  - javascript
  - rust
  - swift
  - dart
  - clojure
  message: 'linkedin-client-secret

    A gitleaks linkedin-client-secret was detected which attempts to identify hard-coded
    credentials.'
  metadata:
    category: Security
    explanation: '## linkedin-client-secret

      A gitleaks linkedin-client-secret was detected which attempts to identify hard-coded
      credentials. It is not recommended to store credentials in source-code, as this
      risks secrets being leaked and used by either an internal or external malicious
      adversary. It is recommended to use environment variables to securely provide
      credentials or retrieve credentials from a secure vault or HSM (Hardware Security
      Module).'
    subcategory: Auth
  severity: info
- id: Semgrep_generic.secrets.gitleaks.lob-api-key.lob-api-key
  languages:
  - c
  - python
  - visualforce
  - cpp
  - dockerfile
  - php
  - elixir
  - shell
  - csharp
  - json
  - typescript
  - apex
  - kotlin
  - terraform
  - ruby
  - scala
  - go
  - yaml
  - java
  - javascript
  - rust
  - swift
  - dart
  - clojure
  message: 'lob-api-key

    A gitleaks lob-api-key was detected which attempts to identify hard-coded credentials.'
  metadata:
    category: Security
    explanation: '## lob-api-key

      A gitleaks lob-api-key was detected which attempts to identify hard-coded credentials.
      It is not recommended to store credentials in source-code, as this risks secrets
      being leaked and used by either an internal or external malicious adversary.
      It is recommended to use environment variables to securely provide credentials
      or retrieve credentials from a secure vault or HSM (Hardware Security Module).'
    subcategory: Auth
  severity: info
- id: Semgrep_generic.secrets.gitleaks.lob-pub-api-key.lob-pub-api-key
  languages:
  - c
  - python
  - visualforce
  - cpp
  - dockerfile
  - php
  - elixir
  - shell
  - csharp
  - json
  - typescript
  - apex
  - kotlin
  - terraform
  - ruby
  - scala
  - go
  - yaml
  - java
  - javascript
  - rust
  - swift
  - dart
  - clojure
  message: 'lob-pub-api-key

    A gitleaks lob-pub-api-key was detected which attempts to identify hard-coded
    credentials.'
  metadata:
    category: Security
    explanation: '## lob-pub-api-key

      A gitleaks lob-pub-api-key was detected which attempts to identify hard-coded
      credentials. It is not recommended to store credentials in source-code, as this
      risks secrets being leaked and used by either an internal or external malicious
      adversary. It is recommended to use environment variables to securely provide
      credentials or retrieve credentials from a secure vault or HSM (Hardware Security
      Module).'
    subcategory: Auth
  severity: info
- id: Semgrep_generic.secrets.gitleaks.mailchimp-api-key.mailchimp-api-key
  languages:
  - c
  - python
  - visualforce
  - cpp
  - dockerfile
  - php
  - elixir
  - shell
  - csharp
  - json
  - typescript
  - apex
  - kotlin
  - terraform
  - ruby
  - scala
  - go
  - yaml
  - java
  - javascript
  - rust
  - swift
  - dart
  - clojure
  message: 'mailchimp-api-key

    A gitleaks mailchimp-api-key was detected which attempts to identify hard-coded
    credentials.'
  metadata:
    category: Security
    explanation: '## mailchimp-api-key

      A gitleaks mailchimp-api-key was detected which attempts to identify hard-coded
      credentials. It is not recommended to store credentials in source-code, as this
      risks secrets being leaked and used by either an internal or external malicious
      adversary. It is recommended to use environment variables to securely provide
      credentials or retrieve credentials from a secure vault or HSM (Hardware Security
      Module).'
    subcategory: Auth
  severity: info
- id: Semgrep_generic.secrets.gitleaks.mailgun-private-api-token.mailgun-private-api-token
  languages:
  - c
  - python
  - visualforce
  - cpp
  - dockerfile
  - php
  - elixir
  - shell
  - csharp
  - json
  - typescript
  - apex
  - kotlin
  - terraform
  - ruby
  - scala
  - go
  - yaml
  - java
  - javascript
  - rust
  - swift
  - dart
  - clojure
  message: 'mailgun-private-api-token

    A gitleaks mailgun-private-api-token was detected which attempts to identify hard-coded
    credentials.'
  metadata:
    category: Security
    explanation: '## mailgun-private-api-token

      A gitleaks mailgun-private-api-token was detected which attempts to identify
      hard-coded credentials. It is not recommended to store credentials in source-code,
      as this risks secrets being leaked and used by either an internal or external
      malicious adversary. It is recommended to use environment variables to securely
      provide credentials or retrieve credentials from a secure vault or HSM (Hardware
      Security Module).'
    subcategory: Auth
  severity: info
- id: Semgrep_generic.secrets.gitleaks.mailgun-pub-key.mailgun-pub-key
  languages:
  - c
  - python
  - visualforce
  - cpp
  - dockerfile
  - php
  - elixir
  - shell
  - csharp
  - json
  - typescript
  - apex
  - kotlin
  - terraform
  - ruby
  - scala
  - go
  - yaml
  - java
  - javascript
  - rust
  - swift
  - dart
  - clojure
  message: 'mailgun-pub-key

    A gitleaks mailgun-pub-key was detected which attempts to identify hard-coded
    credentials.'
  metadata:
    category: Security
    explanation: '## mailgun-pub-key

      A gitleaks mailgun-pub-key was detected which attempts to identify hard-coded
      credentials. It is not recommended to store credentials in source-code, as this
      risks secrets being leaked and used by either an internal or external malicious
      adversary. It is recommended to use environment variables to securely provide
      credentials or retrieve credentials from a secure vault or HSM (Hardware Security
      Module).'
    subcategory: Auth
  severity: info
- id: Semgrep_generic.secrets.gitleaks.mailgun-signing-key.mailgun-signing-key
  languages:
  - c
  - python
  - visualforce
  - cpp
  - dockerfile
  - php
  - elixir
  - shell
  - csharp
  - json
  - typescript
  - apex
  - kotlin
  - terraform
  - ruby
  - scala
  - go
  - yaml
  - java
  - javascript
  - rust
  - swift
  - dart
  - clojure
  message: 'mailgun-signing-key

    A gitleaks mailgun-signing-key was detected which attempts to identify hard-coded
    credentials.'
  metadata:
    category: Security
    explanation: '## mailgun-signing-key

      A gitleaks mailgun-signing-key was detected which attempts to identify hard-coded
      credentials. It is not recommended to store credentials in source-code, as this
      risks secrets being leaked and used by either an internal or external malicious
      adversary. It is recommended to use environment variables to securely provide
      credentials or retrieve credentials from a secure vault or HSM (Hardware Security
      Module).'
    subcategory: Auth
  severity: info
- id: Semgrep_generic.secrets.gitleaks.mapbox-api-token.mapbox-api-token
  languages:
  - c
  - python
  - visualforce
  - cpp
  - dockerfile
  - php
  - elixir
  - shell
  - csharp
  - json
  - typescript
  - apex
  - kotlin
  - terraform
  - ruby
  - scala
  - go
  - yaml
  - java
  - javascript
  - rust
  - swift
  - dart
  - clojure
  message: 'mapbox-api-token

    A gitleaks mapbox-api-token was detected which attempts to identify hard-coded
    credentials.'
  metadata:
    category: Security
    explanation: '## mapbox-api-token

      A gitleaks mapbox-api-token was detected which attempts to identify hard-coded
      credentials. It is not recommended to store credentials in source-code, as this
      risks secrets being leaked and used by either an internal or external malicious
      adversary. It is recommended to use environment variables to securely provide
      credentials or retrieve credentials from a secure vault or HSM (Hardware Security
      Module).'
    subcategory: Auth
  severity: info
- id: Semgrep_generic.secrets.gitleaks.mattermost-access-token.mattermost-access-token
  languages:
  - c
  - python
  - visualforce
  - cpp
  - dockerfile
  - php
  - elixir
  - shell
  - csharp
  - json
  - typescript
  - apex
  - kotlin
  - terraform
  - ruby
  - scala
  - go
  - yaml
  - java
  - javascript
  - rust
  - swift
  - dart
  - clojure
  message: 'mattermost-access-token

    A gitleaks mattermost-access-token was detected which attempts to identify hard-coded
    credentials.'
  metadata:
    category: Security
    explanation: '## mattermost-access-token

      A gitleaks mattermost-access-token was detected which attempts to identify hard-coded
      credentials. It is not recommended to store credentials in source-code, as this
      risks secrets being leaked and used by either an internal or external malicious
      adversary. It is recommended to use environment variables to securely provide
      credentials or retrieve credentials from a secure vault or HSM (Hardware Security
      Module).'
    subcategory: Auth
  severity: info
- id: Semgrep_generic.secrets.gitleaks.messagebird-api-token.messagebird-api-token
  languages:
  - c
  - python
  - visualforce
  - cpp
  - dockerfile
  - php
  - elixir
  - shell
  - csharp
  - json
  - typescript
  - apex
  - kotlin
  - terraform
  - ruby
  - scala
  - go
  - yaml
  - java
  - javascript
  - rust
  - swift
  - dart
  - clojure
  message: 'messagebird-api-token

    A gitleaks messagebird-api-token was detected which attempts to identify hard-coded
    credentials.'
  metadata:
    category: Security
    explanation: '## messagebird-api-token

      A gitleaks messagebird-api-token was detected which attempts to identify hard-coded
      credentials. It is not recommended to store credentials in source-code, as this
      risks secrets being leaked and used by either an internal or external malicious
      adversary. It is recommended to use environment variables to securely provide
      credentials or retrieve credentials from a secure vault or HSM (Hardware Security
      Module).'
    subcategory: Auth
  severity: info
- id: Semgrep_generic.secrets.gitleaks.messagebird-client-id.messagebird-client-id
  languages:
  - c
  - python
  - visualforce
  - cpp
  - dockerfile
  - php
  - elixir
  - shell
  - csharp
  - json
  - typescript
  - apex
  - kotlin
  - terraform
  - ruby
  - scala
  - go
  - yaml
  - java
  - javascript
  - rust
  - swift
  - dart
  - clojure
  message: 'messagebird-client-id

    A gitleaks messagebird-client-id was detected which attempts to identify hard-coded
    credentials.'
  metadata:
    category: Security
    explanation: '## messagebird-client-id

      A gitleaks messagebird-client-id was detected which attempts to identify hard-coded
      credentials. It is not recommended to store credentials in source-code, as this
      risks secrets being leaked and used by either an internal or external malicious
      adversary. It is recommended to use environment variables to securely provide
      credentials or retrieve credentials from a secure vault or HSM (Hardware Security
      Module).'
    subcategory: Auth
  severity: info
- id: Semgrep_generic.secrets.gitleaks.microsoft-teams-webhook.microsoft-teams-webhook
  languages:
  - c
  - python
  - visualforce
  - cpp
  - dockerfile
  - php
  - elixir
  - shell
  - csharp
  - json
  - typescript
  - apex
  - kotlin
  - terraform
  - ruby
  - scala
  - go
  - yaml
  - java
  - javascript
  - rust
  - swift
  - dart
  - clojure
  message: 'microsoft-teams-webhook

    A gitleaks microsoft-teams-webhook was detected which attempts to identify hard-coded
    credentials.'
  metadata:
    category: Security
    explanation: '## microsoft-teams-webhook

      A gitleaks microsoft-teams-webhook was detected which attempts to identify hard-coded
      credentials. It is not recommended to store credentials in source-code, as this
      risks secrets being leaked and used by either an internal or external malicious
      adversary. It is recommended to use environment variables to securely provide
      credentials or retrieve credentials from a secure vault or HSM (Hardware Security
      Module).'
    subcategory: Auth
  severity: info
- id: Semgrep_generic.secrets.gitleaks.netlify-access-token.netlify-access-token
  languages:
  - c
  - python
  - visualforce
  - cpp
  - dockerfile
  - php
  - elixir
  - shell
  - csharp
  - json
  - typescript
  - apex
  - kotlin
  - terraform
  - ruby
  - scala
  - go
  - yaml
  - java
  - javascript
  - rust
  - swift
  - dart
  - clojure
  message: 'netlify-access-token

    A gitleaks netlify-access-token was detected which attempts to identify hard-coded
    credentials.'
  metadata:
    category: Security
    explanation: '## netlify-access-token

      A gitleaks netlify-access-token was detected which attempts to identify hard-coded
      credentials. It is not recommended to store credentials in source-code, as this
      risks secrets being leaked and used by either an internal or external malicious
      adversary. It is recommended to use environment variables to securely provide
      credentials or retrieve credentials from a secure vault or HSM (Hardware Security
      Module).'
    subcategory: Auth
  severity: info
- id: Semgrep_generic.secrets.gitleaks.new-relic-browser-api-token.new-relic-browser-api-token
  languages:
  - c
  - python
  - visualforce
  - cpp
  - dockerfile
  - php
  - elixir
  - shell
  - csharp
  - json
  - typescript
  - apex
  - kotlin
  - terraform
  - ruby
  - scala
  - go
  - yaml
  - java
  - javascript
  - rust
  - swift
  - dart
  - clojure
  message: 'new-relic-browser-api-token

    A gitleaks new-relic-browser-api-token was detected which attempts to identify
    hard-coded credentials.'
  metadata:
    category: Security
    explanation: '## new-relic-browser-api-token

      A gitleaks new-relic-browser-api-token was detected which attempts to identify
      hard-coded credentials. It is not recommended to store credentials in source-code,
      as this risks secrets being leaked and used by either an internal or external
      malicious adversary. It is recommended to use environment variables to securely
      provide credentials or retrieve credentials from a secure vault or HSM (Hardware
      Security Module).'
    subcategory: Auth
  severity: info
- id: Semgrep_generic.secrets.gitleaks.new-relic-insert-key.new-relic-insert-key
  languages:
  - c
  - python
  - visualforce
  - cpp
  - dockerfile
  - php
  - elixir
  - shell
  - csharp
  - json
  - typescript
  - apex
  - kotlin
  - terraform
  - ruby
  - scala
  - go
  - yaml
  - java
  - javascript
  - rust
  - swift
  - dart
  - clojure
  message: 'new-relic-insert-key

    A gitleaks new-relic-insert-key was detected which attempts to identify hard-coded
    credentials.'
  metadata:
    category: Security
    explanation: '## new-relic-insert-key

      A gitleaks new-relic-insert-key was detected which attempts to identify hard-coded
      credentials. It is not recommended to store credentials in source-code, as this
      risks secrets being leaked and used by either an internal or external malicious
      adversary. It is recommended to use environment variables to securely provide
      credentials or retrieve credentials from a secure vault or HSM (Hardware Security
      Module).'
    subcategory: Auth
  severity: info
- id: Semgrep_generic.secrets.gitleaks.new-relic-user-api-id.new-relic-user-api-id
  languages:
  - c
  - python
  - visualforce
  - cpp
  - dockerfile
  - php
  - elixir
  - shell
  - csharp
  - json
  - typescript
  - apex
  - kotlin
  - terraform
  - ruby
  - scala
  - go
  - yaml
  - java
  - javascript
  - rust
  - swift
  - dart
  - clojure
  message: 'new-relic-user-api-id

    A gitleaks new-relic-user-api-id was detected which attempts to identify hard-coded
    credentials.'
  metadata:
    category: Security
    explanation: '## new-relic-user-api-id

      A gitleaks new-relic-user-api-id was detected which attempts to identify hard-coded
      credentials. It is not recommended to store credentials in source-code, as this
      risks secrets being leaked and used by either an internal or external malicious
      adversary. It is recommended to use environment variables to securely provide
      credentials or retrieve credentials from a secure vault or HSM (Hardware Security
      Module).'
    subcategory: Auth
  severity: info
- id: Semgrep_generic.secrets.gitleaks.new-relic-user-api-key.new-relic-user-api-key
  languages:
  - c
  - python
  - visualforce
  - cpp
  - dockerfile
  - php
  - elixir
  - shell
  - csharp
  - json
  - typescript
  - apex
  - kotlin
  - terraform
  - ruby
  - scala
  - go
  - yaml
  - java
  - javascript
  - rust
  - swift
  - dart
  - clojure
  message: 'new-relic-user-api-key

    A gitleaks new-relic-user-api-key was detected which attempts to identify hard-coded
    credentials.'
  metadata:
    category: Security
    explanation: '## new-relic-user-api-key

      A gitleaks new-relic-user-api-key was detected which attempts to identify hard-coded
      credentials. It is not recommended to store credentials in source-code, as this
      risks secrets being leaked and used by either an internal or external malicious
      adversary. It is recommended to use environment variables to securely provide
      credentials or retrieve credentials from a secure vault or HSM (Hardware Security
      Module).'
    subcategory: Auth
  severity: info
- id: Semgrep_generic.secrets.gitleaks.npm-access-token.npm-access-token
  languages:
  - c
  - python
  - visualforce
  - cpp
  - dockerfile
  - php
  - elixir
  - shell
  - csharp
  - json
  - typescript
  - apex
  - kotlin
  - terraform
  - ruby
  - scala
  - go
  - yaml
  - java
  - javascript
  - rust
  - swift
  - dart
  - clojure
  message: 'npm-access-token

    A gitleaks npm-access-token was detected which attempts to identify hard-coded
    credentials.'
  metadata:
    category: Security
    explanation: '## npm-access-token

      A gitleaks npm-access-token was detected which attempts to identify hard-coded
      credentials. It is not recommended to store credentials in source-code, as this
      risks secrets being leaked and used by either an internal or external malicious
      adversary. It is recommended to use environment variables to securely provide
      credentials or retrieve credentials from a secure vault or HSM (Hardware Security
      Module).'
    subcategory: Auth
  severity: info
- id: Semgrep_generic.secrets.gitleaks.nytimes-access-token.nytimes-access-token
  languages:
  - c
  - python
  - visualforce
  - cpp
  - dockerfile
  - php
  - elixir
  - shell
  - csharp
  - json
  - typescript
  - apex
  - kotlin
  - terraform
  - ruby
  - scala
  - go
  - yaml
  - java
  - javascript
  - rust
  - swift
  - dart
  - clojure
  message: 'nytimes-access-token

    A gitleaks nytimes-access-token was detected which attempts to identify hard-coded
    credentials.'
  metadata:
    category: Security
    explanation: '## nytimes-access-token

      A gitleaks nytimes-access-token was detected which attempts to identify hard-coded
      credentials. It is not recommended to store credentials in source-code, as this
      risks secrets being leaked and used by either an internal or external malicious
      adversary. It is recommended to use environment variables to securely provide
      credentials or retrieve credentials from a secure vault or HSM (Hardware Security
      Module).'
    subcategory: Auth
  severity: info
- id: Semgrep_generic.secrets.gitleaks.okta-access-token.okta-access-token
  languages:
  - c
  - python
  - visualforce
  - cpp
  - dockerfile
  - php
  - elixir
  - shell
  - csharp
  - json
  - typescript
  - apex
  - kotlin
  - terraform
  - ruby
  - scala
  - go
  - yaml
  - java
  - javascript
  - rust
  - swift
  - dart
  - clojure
  message: 'okta-access-token

    A gitleaks okta-access-token was detected which attempts to identify hard-coded
    credentials.'
  metadata:
    category: Security
    explanation: '## okta-access-token

      A gitleaks okta-access-token was detected which attempts to identify hard-coded
      credentials. It is not recommended to store credentials in source-code, as this
      risks secrets being leaked and used by either an internal or external malicious
      adversary. It is recommended to use environment variables to securely provide
      credentials or retrieve credentials from a secure vault or HSM (Hardware Security
      Module).'
    subcategory: Auth
  severity: info
- id: Semgrep_generic.secrets.gitleaks.openai-api-key.openai-api-key
  languages:
  - c
  - python
  - visualforce
  - cpp
  - dockerfile
  - php
  - elixir
  - shell
  - csharp
  - json
  - typescript
  - apex
  - kotlin
  - terraform
  - ruby
  - scala
  - go
  - yaml
  - java
  - javascript
  - rust
  - swift
  - dart
  - clojure
  message: 'openai-api-key

    A gitleaks openai-api-key was detected which attempts to identify hard-coded credentials.'
  metadata:
    category: Security
    explanation: '## openai-api-key

      A gitleaks openai-api-key was detected which attempts to identify hard-coded
      credentials. It is not recommended to store credentials in source-code, as this
      risks secrets being leaked and used by either an internal or external malicious
      adversary. It is recommended to use environment variables to securely provide
      credentials or retrieve credentials from a secure vault or HSM (Hardware Security
      Module).'
    subcategory: Auth
  severity: info
- id: Semgrep_generic.secrets.gitleaks.plaid-api-token.plaid-api-token
  languages:
  - c
  - python
  - visualforce
  - cpp
  - dockerfile
  - php
  - elixir
  - shell
  - csharp
  - json
  - typescript
  - apex
  - kotlin
  - terraform
  - ruby
  - scala
  - go
  - yaml
  - java
  - javascript
  - rust
  - swift
  - dart
  - clojure
  message: 'plaid-api-token

    A gitleaks plaid-api-token was detected which attempts to identify hard-coded
    credentials.'
  metadata:
    category: Security
    explanation: '## plaid-api-token

      A gitleaks plaid-api-token was detected which attempts to identify hard-coded
      credentials. It is not recommended to store credentials in source-code, as this
      risks secrets being leaked and used by either an internal or external malicious
      adversary. It is recommended to use environment variables to securely provide
      credentials or retrieve credentials from a secure vault or HSM (Hardware Security
      Module).'
    subcategory: Auth
  severity: info
- id: Semgrep_generic.secrets.gitleaks.plaid-client-id.plaid-client-id
  languages:
  - c
  - python
  - visualforce
  - cpp
  - dockerfile
  - php
  - elixir
  - shell
  - csharp
  - json
  - typescript
  - apex
  - kotlin
  - terraform
  - ruby
  - scala
  - go
  - yaml
  - java
  - javascript
  - rust
  - swift
  - dart
  - clojure
  message: 'plaid-client-id

    A gitleaks plaid-client-id was detected which attempts to identify hard-coded
    credentials.'
  metadata:
    category: Security
    explanation: '## plaid-client-id

      A gitleaks plaid-client-id was detected which attempts to identify hard-coded
      credentials. It is not recommended to store credentials in source-code, as this
      risks secrets being leaked and used by either an internal or external malicious
      adversary. It is recommended to use environment variables to securely provide
      credentials or retrieve credentials from a secure vault or HSM (Hardware Security
      Module).'
    subcategory: Auth
  severity: info
- id: Semgrep_generic.secrets.gitleaks.plaid-secret-key.plaid-secret-key
  languages:
  - c
  - python
  - visualforce
  - cpp
  - dockerfile
  - php
  - elixir
  - shell
  - csharp
  - json
  - typescript
  - apex
  - kotlin
  - terraform
  - ruby
  - scala
  - go
  - yaml
  - java
  - javascript
  - rust
  - swift
  - dart
  - clojure
  message: 'plaid-secret-key

    A gitleaks plaid-secret-key was detected which attempts to identify hard-coded
    credentials.'
  metadata:
    category: Security
    explanation: '## plaid-secret-key

      A gitleaks plaid-secret-key was detected which attempts to identify hard-coded
      credentials. It is not recommended to store credentials in source-code, as this
      risks secrets being leaked and used by either an internal or external malicious
      adversary. It is recommended to use environment variables to securely provide
      credentials or retrieve credentials from a secure vault or HSM (Hardware Security
      Module).'
    subcategory: Auth
  severity: info
- id: Semgrep_generic.secrets.gitleaks.planetscale-api-token.planetscale-api-token
  languages:
  - c
  - python
  - visualforce
  - cpp
  - dockerfile
  - php
  - elixir
  - shell
  - csharp
  - json
  - typescript
  - apex
  - kotlin
  - terraform
  - ruby
  - scala
  - go
  - yaml
  - java
  - javascript
  - rust
  - swift
  - dart
  - clojure
  message: 'planetscale-api-token

    A gitleaks planetscale-api-token was detected which attempts to identify hard-coded
    credentials.'
  metadata:
    category: Security
    explanation: '## planetscale-api-token

      A gitleaks planetscale-api-token was detected which attempts to identify hard-coded
      credentials. It is not recommended to store credentials in source-code, as this
      risks secrets being leaked and used by either an internal or external malicious
      adversary. It is recommended to use environment variables to securely provide
      credentials or retrieve credentials from a secure vault or HSM (Hardware Security
      Module).'
    subcategory: Auth
  severity: info
- id: Semgrep_generic.secrets.gitleaks.planetscale-oauth-token.planetscale-oauth-token
  languages:
  - c
  - python
  - visualforce
  - cpp
  - dockerfile
  - php
  - elixir
  - shell
  - csharp
  - json
  - typescript
  - apex
  - kotlin
  - terraform
  - ruby
  - scala
  - go
  - yaml
  - java
  - javascript
  - rust
  - swift
  - dart
  - clojure
  message: 'planetscale-oauth-token

    A gitleaks planetscale-oauth-token was detected which attempts to identify hard-coded
    credentials.'
  metadata:
    category: Security
    explanation: '## planetscale-oauth-token

      A gitleaks planetscale-oauth-token was detected which attempts to identify hard-coded
      credentials. It is not recommended to store credentials in source-code, as this
      risks secrets being leaked and used by either an internal or external malicious
      adversary. It is recommended to use environment variables to securely provide
      credentials or retrieve credentials from a secure vault or HSM (Hardware Security
      Module).'
    subcategory: Auth
  severity: info
- id: Semgrep_generic.secrets.gitleaks.planetscale-password.planetscale-password
  languages:
  - c
  - python
  - visualforce
  - cpp
  - dockerfile
  - php
  - elixir
  - shell
  - csharp
  - json
  - typescript
  - apex
  - kotlin
  - terraform
  - ruby
  - scala
  - go
  - yaml
  - java
  - javascript
  - rust
  - swift
  - dart
  - clojure
  message: 'planetscale-password

    A gitleaks planetscale-password was detected which attempts to identify hard-coded
    credentials.'
  metadata:
    category: Security
    explanation: '## planetscale-password

      A gitleaks planetscale-password was detected which attempts to identify hard-coded
      credentials. It is not recommended to store credentials in source-code, as this
      risks secrets being leaked and used by either an internal or external malicious
      adversary. It is recommended to use environment variables to securely provide
      credentials or retrieve credentials from a secure vault or HSM (Hardware Security
      Module).'
    subcategory: Auth
  severity: info
- id: Semgrep_generic.secrets.gitleaks.postman-api-token.postman-api-token
  languages:
  - c
  - python
  - visualforce
  - cpp
  - dockerfile
  - php
  - elixir
  - shell
  - csharp
  - json
  - typescript
  - apex
  - kotlin
  - terraform
  - ruby
  - scala
  - go
  - yaml
  - java
  - javascript
  - rust
  - swift
  - dart
  - clojure
  message: 'postman-api-token

    A gitleaks postman-api-token was detected which attempts to identify hard-coded
    credentials.'
  metadata:
    category: Security
    explanation: '## postman-api-token

      A gitleaks postman-api-token was detected which attempts to identify hard-coded
      credentials. It is not recommended to store credentials in source-code, as this
      risks secrets being leaked and used by either an internal or external malicious
      adversary. It is recommended to use environment variables to securely provide
      credentials or retrieve credentials from a secure vault or HSM (Hardware Security
      Module).'
    subcategory: Auth
  severity: info
- id: Semgrep_generic.secrets.gitleaks.prefect-api-token.prefect-api-token
  languages:
  - c
  - python
  - visualforce
  - cpp
  - dockerfile
  - php
  - elixir
  - shell
  - csharp
  - json
  - typescript
  - apex
  - kotlin
  - terraform
  - ruby
  - scala
  - go
  - yaml
  - java
  - javascript
  - rust
  - swift
  - dart
  - clojure
  message: 'prefect-api-token

    A gitleaks prefect-api-token was detected which attempts to identify hard-coded
    credentials.'
  metadata:
    category: Security
    explanation: '## prefect-api-token

      A gitleaks prefect-api-token was detected which attempts to identify hard-coded
      credentials. It is not recommended to store credentials in source-code, as this
      risks secrets being leaked and used by either an internal or external malicious
      adversary. It is recommended to use environment variables to securely provide
      credentials or retrieve credentials from a secure vault or HSM (Hardware Security
      Module).'
    subcategory: Auth
  severity: info
- id: Semgrep_generic.secrets.gitleaks.private-key.private-key
  languages:
  - c
  - python
  - visualforce
  - cpp
  - dockerfile
  - php
  - elixir
  - shell
  - csharp
  - json
  - typescript
  - apex
  - kotlin
  - terraform
  - ruby
  - scala
  - go
  - yaml
  - java
  - javascript
  - rust
  - swift
  - dart
  - clojure
  message: 'private-key

    A gitleaks private-key was detected which attempts to identify hard-coded credentials.'
  metadata:
    category: Security
    explanation: '## private-key

      A gitleaks private-key was detected which attempts to identify hard-coded credentials.
      It is not recommended to store credentials in source-code, as this risks secrets
      being leaked and used by either an internal or external malicious adversary.
      It is recommended to use environment variables to securely provide credentials
      or retrieve credentials from a secure vault or HSM (Hardware Security Module).'
    subcategory: Auth
  severity: info
- id: Semgrep_generic.secrets.gitleaks.pulumi-api-token.pulumi-api-token
  languages:
  - c
  - python
  - visualforce
  - cpp
  - dockerfile
  - php
  - elixir
  - shell
  - csharp
  - json
  - typescript
  - apex
  - kotlin
  - terraform
  - ruby
  - scala
  - go
  - yaml
  - java
  - javascript
  - rust
  - swift
  - dart
  - clojure
  message: 'pulumi-api-token

    A gitleaks pulumi-api-token was detected which attempts to identify hard-coded
    credentials.'
  metadata:
    category: Security
    explanation: '## pulumi-api-token

      A gitleaks pulumi-api-token was detected which attempts to identify hard-coded
      credentials. It is not recommended to store credentials in source-code, as this
      risks secrets being leaked and used by either an internal or external malicious
      adversary. It is recommended to use environment variables to securely provide
      credentials or retrieve credentials from a secure vault or HSM (Hardware Security
      Module).'
    subcategory: Auth
  severity: info
- id: Semgrep_generic.secrets.gitleaks.pypi-upload-token.pypi-upload-token
  languages:
  - c
  - python
  - visualforce
  - cpp
  - dockerfile
  - php
  - elixir
  - shell
  - csharp
  - json
  - typescript
  - apex
  - kotlin
  - terraform
  - ruby
  - scala
  - go
  - yaml
  - java
  - javascript
  - rust
  - swift
  - dart
  - clojure
  message: 'pypi-upload-token

    A gitleaks pypi-upload-token was detected which attempts to identify hard-coded
    credentials.'
  metadata:
    category: Security
    explanation: '## pypi-upload-token

      A gitleaks pypi-upload-token was detected which attempts to identify hard-coded
      credentials. It is not recommended to store credentials in source-code, as this
      risks secrets being leaked and used by either an internal or external malicious
      adversary. It is recommended to use environment variables to securely provide
      credentials or retrieve credentials from a secure vault or HSM (Hardware Security
      Module).'
    subcategory: Auth
  severity: info
- id: Semgrep_generic.secrets.gitleaks.rapidapi-access-token.rapidapi-access-token
  languages:
  - c
  - python
  - visualforce
  - cpp
  - dockerfile
  - php
  - elixir
  - shell
  - csharp
  - json
  - typescript
  - apex
  - kotlin
  - terraform
  - ruby
  - scala
  - go
  - yaml
  - java
  - javascript
  - rust
  - swift
  - dart
  - clojure
  message: 'rapidapi-access-token

    A gitleaks rapidapi-access-token was detected which attempts to identify hard-coded
    credentials.'
  metadata:
    category: Security
    explanation: '## rapidapi-access-token

      A gitleaks rapidapi-access-token was detected which attempts to identify hard-coded
      credentials. It is not recommended to store credentials in source-code, as this
      risks secrets being leaked and used by either an internal or external malicious
      adversary. It is recommended to use environment variables to securely provide
      credentials or retrieve credentials from a secure vault or HSM (Hardware Security
      Module).'
    subcategory: Auth
  severity: info
- id: Semgrep_generic.secrets.gitleaks.readme-api-token.readme-api-token
  languages:
  - c
  - python
  - visualforce
  - cpp
  - dockerfile
  - php
  - elixir
  - shell
  - csharp
  - json
  - typescript
  - apex
  - kotlin
  - terraform
  - ruby
  - scala
  - go
  - yaml
  - java
  - javascript
  - rust
  - swift
  - dart
  - clojure
  message: 'readme-api-token

    A gitleaks readme-api-token was detected which attempts to identify hard-coded
    credentials.'
  metadata:
    category: Security
    explanation: '## readme-api-token

      A gitleaks readme-api-token was detected which attempts to identify hard-coded
      credentials. It is not recommended to store credentials in source-code, as this
      risks secrets being leaked and used by either an internal or external malicious
      adversary. It is recommended to use environment variables to securely provide
      credentials or retrieve credentials from a secure vault or HSM (Hardware Security
      Module).'
    subcategory: Auth
  severity: info
- id: Semgrep_generic.secrets.gitleaks.rubygems-api-token.rubygems-api-token
  languages:
  - c
  - python
  - visualforce
  - cpp
  - dockerfile
  - php
  - elixir
  - shell
  - csharp
  - json
  - typescript
  - apex
  - kotlin
  - terraform
  - ruby
  - scala
  - go
  - yaml
  - java
  - javascript
  - rust
  - swift
  - dart
  - clojure
  message: 'rubygems-api-token

    A gitleaks rubygems-api-token was detected which attempts to identify hard-coded
    credentials.'
  metadata:
    category: Security
    explanation: '## rubygems-api-token

      A gitleaks rubygems-api-token was detected which attempts to identify hard-coded
      credentials. It is not recommended to store credentials in source-code, as this
      risks secrets being leaked and used by either an internal or external malicious
      adversary. It is recommended to use environment variables to securely provide
      credentials or retrieve credentials from a secure vault or HSM (Hardware Security
      Module).'
    subcategory: Auth
  severity: info
- id: Semgrep_generic.secrets.gitleaks.scalingo-api-token.scalingo-api-token
  languages:
  - c
  - python
  - visualforce
  - cpp
  - dockerfile
  - php
  - elixir
  - shell
  - csharp
  - json
  - typescript
  - apex
  - kotlin
  - terraform
  - ruby
  - scala
  - go
  - yaml
  - java
  - javascript
  - rust
  - swift
  - dart
  - clojure
  message: 'scalingo-api-token

    A gitleaks scalingo-api-token was detected which attempts to identify hard-coded
    credentials.'
  metadata:
    category: Security
    explanation: '## scalingo-api-token

      A gitleaks scalingo-api-token was detected which attempts to identify hard-coded
      credentials. It is not recommended to store credentials in source-code, as this
      risks secrets being leaked and used by either an internal or external malicious
      adversary. It is recommended to use environment variables to securely provide
      credentials or retrieve credentials from a secure vault or HSM (Hardware Security
      Module).'
    subcategory: Auth
  severity: info
- id: Semgrep_generic.secrets.gitleaks.sendbird-access-id.sendbird-access-id
  languages:
  - c
  - python
  - visualforce
  - cpp
  - dockerfile
  - php
  - elixir
  - shell
  - csharp
  - json
  - typescript
  - apex
  - kotlin
  - terraform
  - ruby
  - scala
  - go
  - yaml
  - java
  - javascript
  - rust
  - swift
  - dart
  - clojure
  message: 'sendbird-access-id

    A gitleaks sendbird-access-id was detected which attempts to identify hard-coded
    credentials.'
  metadata:
    category: Security
    explanation: '## sendbird-access-id

      A gitleaks sendbird-access-id was detected which attempts to identify hard-coded
      credentials. It is not recommended to store credentials in source-code, as this
      risks secrets being leaked and used by either an internal or external malicious
      adversary. It is recommended to use environment variables to securely provide
      credentials or retrieve credentials from a secure vault or HSM (Hardware Security
      Module).'
    subcategory: Auth
  severity: info
- id: Semgrep_generic.secrets.gitleaks.sendbird-access-token.sendbird-access-token
  languages:
  - c
  - python
  - visualforce
  - cpp
  - dockerfile
  - php
  - elixir
  - shell
  - csharp
  - json
  - typescript
  - apex
  - kotlin
  - terraform
  - ruby
  - scala
  - go
  - yaml
  - java
  - javascript
  - rust
  - swift
  - dart
  - clojure
  message: 'sendbird-access-token

    A gitleaks sendbird-access-token was detected which attempts to identify hard-coded
    credentials.'
  metadata:
    category: Security
    explanation: '## sendbird-access-token

      A gitleaks sendbird-access-token was detected which attempts to identify hard-coded
      credentials. It is not recommended to store credentials in source-code, as this
      risks secrets being leaked and used by either an internal or external malicious
      adversary. It is recommended to use environment variables to securely provide
      credentials or retrieve credentials from a secure vault or HSM (Hardware Security
      Module).'
    subcategory: Auth
  severity: info
- id: Semgrep_generic.secrets.gitleaks.sendgrid-api-token.sendgrid-api-token
  languages:
  - c
  - python
  - visualforce
  - cpp
  - dockerfile
  - php
  - elixir
  - shell
  - csharp
  - json
  - typescript
  - apex
  - kotlin
  - terraform
  - ruby
  - scala
  - go
  - yaml
  - java
  - javascript
  - rust
  - swift
  - dart
  - clojure
  message: 'sendgrid-api-token

    A gitleaks sendgrid-api-token was detected which attempts to identify hard-coded
    credentials.'
  metadata:
    category: Security
    explanation: '## sendgrid-api-token

      A gitleaks sendgrid-api-token was detected which attempts to identify hard-coded
      credentials. It is not recommended to store credentials in source-code, as this
      risks secrets being leaked and used by either an internal or external malicious
      adversary. It is recommended to use environment variables to securely provide
      credentials or retrieve credentials from a secure vault or HSM (Hardware Security
      Module).'
    subcategory: Auth
  severity: info
- id: Semgrep_generic.secrets.gitleaks.sendinblue-api-token.sendinblue-api-token
  languages:
  - c
  - python
  - visualforce
  - cpp
  - dockerfile
  - php
  - elixir
  - shell
  - csharp
  - json
  - typescript
  - apex
  - kotlin
  - terraform
  - ruby
  - scala
  - go
  - yaml
  - java
  - javascript
  - rust
  - swift
  - dart
  - clojure
  message: 'sendinblue-api-token

    A gitleaks sendinblue-api-token was detected which attempts to identify hard-coded
    credentials.'
  metadata:
    category: Security
    explanation: '## sendinblue-api-token

      A gitleaks sendinblue-api-token was detected which attempts to identify hard-coded
      credentials. It is not recommended to store credentials in source-code, as this
      risks secrets being leaked and used by either an internal or external malicious
      adversary. It is recommended to use environment variables to securely provide
      credentials or retrieve credentials from a secure vault or HSM (Hardware Security
      Module).'
    subcategory: Auth
  severity: info
- id: Semgrep_generic.secrets.gitleaks.sentry-access-token.sentry-access-token
  languages:
  - c
  - python
  - visualforce
  - cpp
  - dockerfile
  - php
  - elixir
  - shell
  - csharp
  - json
  - typescript
  - apex
  - kotlin
  - terraform
  - ruby
  - scala
  - go
  - yaml
  - java
  - javascript
  - rust
  - swift
  - dart
  - clojure
  message: 'sentry-access-token

    A gitleaks sentry-access-token was detected which attempts to identify hard-coded
    credentials.'
  metadata:
    category: Security
    explanation: '## sentry-access-token

      A gitleaks sentry-access-token was detected which attempts to identify hard-coded
      credentials. It is not recommended to store credentials in source-code, as this
      risks secrets being leaked and used by either an internal or external malicious
      adversary. It is recommended to use environment variables to securely provide
      credentials or retrieve credentials from a secure vault or HSM (Hardware Security
      Module).'
    subcategory: Auth
  severity: info
- id: Semgrep_generic.secrets.gitleaks.shippo-api-token.shippo-api-token
  languages:
  - c
  - python
  - visualforce
  - cpp
  - dockerfile
  - php
  - elixir
  - shell
  - csharp
  - json
  - typescript
  - apex
  - kotlin
  - terraform
  - ruby
  - scala
  - go
  - yaml
  - java
  - javascript
  - rust
  - swift
  - dart
  - clojure
  message: 'shippo-api-token

    A gitleaks shippo-api-token was detected which attempts to identify hard-coded
    credentials.'
  metadata:
    category: Security
    explanation: '## shippo-api-token

      A gitleaks shippo-api-token was detected which attempts to identify hard-coded
      credentials. It is not recommended to store credentials in source-code, as this
      risks secrets being leaked and used by either an internal or external malicious
      adversary. It is recommended to use environment variables to securely provide
      credentials or retrieve credentials from a secure vault or HSM (Hardware Security
      Module).'
    subcategory: Auth
  severity: info
- id: Semgrep_generic.secrets.gitleaks.shopify-access-token.shopify-access-token
  languages:
  - c
  - python
  - visualforce
  - cpp
  - dockerfile
  - php
  - elixir
  - shell
  - csharp
  - json
  - typescript
  - apex
  - kotlin
  - terraform
  - ruby
  - scala
  - go
  - yaml
  - java
  - javascript
  - rust
  - swift
  - dart
  - clojure
  message: 'shopify-access-token

    A gitleaks shopify-access-token was detected which attempts to identify hard-coded
    credentials.'
  metadata:
    category: Security
    explanation: '## shopify-access-token

      A gitleaks shopify-access-token was detected which attempts to identify hard-coded
      credentials. It is not recommended to store credentials in source-code, as this
      risks secrets being leaked and used by either an internal or external malicious
      adversary. It is recommended to use environment variables to securely provide
      credentials or retrieve credentials from a secure vault or HSM (Hardware Security
      Module).'
    subcategory: Auth
  severity: info
- id: Semgrep_generic.secrets.gitleaks.shopify-custom-access-token.shopify-custom-access-token
  languages:
  - c
  - python
  - visualforce
  - cpp
  - dockerfile
  - php
  - elixir
  - shell
  - csharp
  - json
  - typescript
  - apex
  - kotlin
  - terraform
  - ruby
  - scala
  - go
  - yaml
  - java
  - javascript
  - rust
  - swift
  - dart
  - clojure
  message: 'shopify-custom-access-token

    A gitleaks shopify-custom-access-token was detected which attempts to identify
    hard-coded credentials.'
  metadata:
    category: Security
    explanation: '## shopify-custom-access-token

      A gitleaks shopify-custom-access-token was detected which attempts to identify
      hard-coded credentials. It is not recommended to store credentials in source-code,
      as this risks secrets being leaked and used by either an internal or external
      malicious adversary. It is recommended to use environment variables to securely
      provide credentials or retrieve credentials from a secure vault or HSM (Hardware
      Security Module).'
    subcategory: Auth
  severity: info
- id: Semgrep_generic.secrets.gitleaks.shopify-private-app-access-token.shopify-private-app-access-token
  languages:
  - c
  - python
  - visualforce
  - cpp
  - dockerfile
  - php
  - elixir
  - shell
  - csharp
  - json
  - typescript
  - apex
  - kotlin
  - terraform
  - ruby
  - scala
  - go
  - yaml
  - java
  - javascript
  - rust
  - swift
  - dart
  - clojure
  message: 'shopify-private-app-access-token

    A gitleaks shopify-private-app-access-token was detected which attempts to identify
    hard-coded credentials.'
  metadata:
    category: Security
    explanation: '## shopify-private-app-access-token

      A gitleaks shopify-private-app-access-token was detected which attempts to identify
      hard-coded credentials. It is not recommended to store credentials in source-code,
      as this risks secrets being leaked and used by either an internal or external
      malicious adversary. It is recommended to use environment variables to securely
      provide credentials or retrieve credentials from a secure vault or HSM (Hardware
      Security Module).'
    subcategory: Auth
  severity: info
- id: Semgrep_generic.secrets.gitleaks.shopify-shared-secret.shopify-shared-secret
  languages:
  - c
  - python
  - visualforce
  - cpp
  - dockerfile
  - php
  - elixir
  - shell
  - csharp
  - json
  - typescript
  - apex
  - kotlin
  - terraform
  - ruby
  - scala
  - go
  - yaml
  - java
  - javascript
  - rust
  - swift
  - dart
  - clojure
  message: 'shopify-shared-secret

    A gitleaks shopify-shared-secret was detected which attempts to identify hard-coded
    credentials.'
  metadata:
    category: Security
    explanation: '## shopify-shared-secret

      A gitleaks shopify-shared-secret was detected which attempts to identify hard-coded
      credentials. It is not recommended to store credentials in source-code, as this
      risks secrets being leaked and used by either an internal or external malicious
      adversary. It is recommended to use environment variables to securely provide
      credentials or retrieve credentials from a secure vault or HSM (Hardware Security
      Module).'
    subcategory: Auth
  severity: info
- id: Semgrep_generic.secrets.gitleaks.sidekiq-secret.sidekiq-secret
  languages:
  - c
  - python
  - visualforce
  - cpp
  - dockerfile
  - php
  - elixir
  - shell
  - csharp
  - json
  - typescript
  - apex
  - kotlin
  - terraform
  - ruby
  - scala
  - go
  - yaml
  - java
  - javascript
  - rust
  - swift
  - dart
  - clojure
  message: 'sidekiq-secret

    A gitleaks sidekiq-secret was detected which attempts to identify hard-coded credentials.'
  metadata:
    category: Security
    explanation: '## sidekiq-secret

      A gitleaks sidekiq-secret was detected which attempts to identify hard-coded
      credentials. It is not recommended to store credentials in source-code, as this
      risks secrets being leaked and used by either an internal or external malicious
      adversary. It is recommended to use environment variables to securely provide
      credentials or retrieve credentials from a secure vault or HSM (Hardware Security
      Module).'
    subcategory: Auth
  severity: info
- id: Semgrep_generic.secrets.gitleaks.sidekiq-sensitive-url.sidekiq-sensitive-url
  languages:
  - c
  - python
  - visualforce
  - cpp
  - dockerfile
  - php
  - elixir
  - shell
  - csharp
  - json
  - typescript
  - apex
  - kotlin
  - terraform
  - ruby
  - scala
  - go
  - yaml
  - java
  - javascript
  - rust
  - swift
  - dart
  - clojure
  message: 'sidekiq-sensitive-url

    A gitleaks sidekiq-sensitive-url was detected which attempts to identify hard-coded
    credentials.'
  metadata:
    category: Security
    explanation: '## sidekiq-sensitive-url

      A gitleaks sidekiq-sensitive-url was detected which attempts to identify hard-coded
      credentials. It is not recommended to store credentials in source-code, as this
      risks secrets being leaked and used by either an internal or external malicious
      adversary. It is recommended to use environment variables to securely provide
      credentials or retrieve credentials from a secure vault or HSM (Hardware Security
      Module).'
    subcategory: Auth
  severity: info
- id: Semgrep_generic.secrets.gitleaks.slack-app-token.slack-app-token
  languages:
  - c
  - python
  - visualforce
  - cpp
  - dockerfile
  - php
  - elixir
  - shell
  - csharp
  - json
  - typescript
  - apex
  - kotlin
  - terraform
  - ruby
  - scala
  - go
  - yaml
  - java
  - javascript
  - rust
  - swift
  - dart
  - clojure
  message: 'slack-app-token

    A gitleaks slack-app-token was detected which attempts to identify hard-coded
    credentials.'
  metadata:
    category: Security
    explanation: '## slack-app-token

      A gitleaks slack-app-token was detected which attempts to identify hard-coded
      credentials. It is not recommended to store credentials in source-code, as this
      risks secrets being leaked and used by either an internal or external malicious
      adversary. It is recommended to use environment variables to securely provide
      credentials or retrieve credentials from a secure vault or HSM (Hardware Security
      Module).'
    subcategory: Auth
  severity: info
- id: Semgrep_generic.secrets.gitleaks.slack-bot-token.slack-bot-token
  languages:
  - c
  - python
  - visualforce
  - cpp
  - dockerfile
  - php
  - elixir
  - shell
  - csharp
  - json
  - typescript
  - apex
  - kotlin
  - terraform
  - ruby
  - scala
  - go
  - yaml
  - java
  - javascript
  - rust
  - swift
  - dart
  - clojure
  message: 'slack-bot-token

    A gitleaks slack-bot-token was detected which attempts to identify hard-coded
    credentials.'
  metadata:
    category: Security
    explanation: '## slack-bot-token

      A gitleaks slack-bot-token was detected which attempts to identify hard-coded
      credentials. It is not recommended to store credentials in source-code, as this
      risks secrets being leaked and used by either an internal or external malicious
      adversary. It is recommended to use environment variables to securely provide
      credentials or retrieve credentials from a secure vault or HSM (Hardware Security
      Module).'
    subcategory: Auth
  severity: info
- id: Semgrep_generic.secrets.gitleaks.slack-config-access-token.slack-config-access-token
  languages:
  - c
  - python
  - visualforce
  - cpp
  - dockerfile
  - php
  - elixir
  - shell
  - csharp
  - json
  - typescript
  - apex
  - kotlin
  - terraform
  - ruby
  - scala
  - go
  - yaml
  - java
  - javascript
  - rust
  - swift
  - dart
  - clojure
  message: 'slack-config-access-token

    A gitleaks slack-config-access-token was detected which attempts to identify hard-coded
    credentials.'
  metadata:
    category: Security
    explanation: '## slack-config-access-token

      A gitleaks slack-config-access-token was detected which attempts to identify
      hard-coded credentials. It is not recommended to store credentials in source-code,
      as this risks secrets being leaked and used by either an internal or external
      malicious adversary. It is recommended to use environment variables to securely
      provide credentials or retrieve credentials from a secure vault or HSM (Hardware
      Security Module).'
    subcategory: Auth
  severity: info
- id: Semgrep_generic.secrets.gitleaks.slack-config-refresh-token.slack-config-refresh-token
  languages:
  - c
  - python
  - visualforce
  - cpp
  - dockerfile
  - php
  - elixir
  - shell
  - csharp
  - json
  - typescript
  - apex
  - kotlin
  - terraform
  - ruby
  - scala
  - go
  - yaml
  - java
  - javascript
  - rust
  - swift
  - dart
  - clojure
  message: 'slack-config-refresh-token

    A gitleaks slack-config-refresh-token was detected which attempts to identify
    hard-coded credentials.'
  metadata:
    category: Security
    explanation: '## slack-config-refresh-token

      A gitleaks slack-config-refresh-token was detected which attempts to identify
      hard-coded credentials. It is not recommended to store credentials in source-code,
      as this risks secrets being leaked and used by either an internal or external
      malicious adversary. It is recommended to use environment variables to securely
      provide credentials or retrieve credentials from a secure vault or HSM (Hardware
      Security Module).'
    subcategory: Auth
  severity: info
- id: Semgrep_generic.secrets.gitleaks.slack-legacy-bot-token.slack-legacy-bot-token
  languages:
  - c
  - python
  - visualforce
  - cpp
  - dockerfile
  - php
  - elixir
  - shell
  - csharp
  - json
  - typescript
  - apex
  - kotlin
  - terraform
  - ruby
  - scala
  - go
  - yaml
  - java
  - javascript
  - rust
  - swift
  - dart
  - clojure
  message: 'slack-legacy-bot-token

    A gitleaks slack-legacy-bot-token was detected which attempts to identify hard-coded
    credentials.'
  metadata:
    category: Security
    explanation: '## slack-legacy-bot-token

      A gitleaks slack-legacy-bot-token was detected which attempts to identify hard-coded
      credentials. It is not recommended to store credentials in source-code, as this
      risks secrets being leaked and used by either an internal or external malicious
      adversary. It is recommended to use environment variables to securely provide
      credentials or retrieve credentials from a secure vault or HSM (Hardware Security
      Module).'
    subcategory: Auth
  severity: info
- id: Semgrep_generic.secrets.gitleaks.slack-legacy-token.slack-legacy-token
  languages:
  - c
  - python
  - visualforce
  - cpp
  - dockerfile
  - php
  - elixir
  - shell
  - csharp
  - json
  - typescript
  - apex
  - kotlin
  - terraform
  - ruby
  - scala
  - go
  - yaml
  - java
  - javascript
  - rust
  - swift
  - dart
  - clojure
  message: 'slack-legacy-token

    A gitleaks slack-legacy-token was detected which attempts to identify hard-coded
    credentials.'
  metadata:
    category: Security
    explanation: '## slack-legacy-token

      A gitleaks slack-legacy-token was detected which attempts to identify hard-coded
      credentials. It is not recommended to store credentials in source-code, as this
      risks secrets being leaked and used by either an internal or external malicious
      adversary. It is recommended to use environment variables to securely provide
      credentials or retrieve credentials from a secure vault or HSM (Hardware Security
      Module).'
    subcategory: Auth
  severity: info
- id: Semgrep_generic.secrets.gitleaks.slack-legacy-workspace-token.slack-legacy-workspace-token
  languages:
  - c
  - python
  - visualforce
  - cpp
  - dockerfile
  - php
  - elixir
  - shell
  - csharp
  - json
  - typescript
  - apex
  - kotlin
  - terraform
  - ruby
  - scala
  - go
  - yaml
  - java
  - javascript
  - rust
  - swift
  - dart
  - clojure
  message: 'slack-legacy-workspace-token

    A gitleaks slack-legacy-workspace-token was detected which attempts to identify
    hard-coded credentials.'
  metadata:
    category: Security
    explanation: '## slack-legacy-workspace-token

      A gitleaks slack-legacy-workspace-token was detected which attempts to identify
      hard-coded credentials. It is not recommended to store credentials in source-code,
      as this risks secrets being leaked and used by either an internal or external
      malicious adversary. It is recommended to use environment variables to securely
      provide credentials or retrieve credentials from a secure vault or HSM (Hardware
      Security Module).'
    subcategory: Auth
  severity: info
- id: Semgrep_generic.secrets.gitleaks.slack-user-token.slack-user-token
  languages:
  - c
  - python
  - visualforce
  - cpp
  - dockerfile
  - php
  - elixir
  - shell
  - csharp
  - json
  - typescript
  - apex
  - kotlin
  - terraform
  - ruby
  - scala
  - go
  - yaml
  - java
  - javascript
  - rust
  - swift
  - dart
  - clojure
  message: 'slack-user-token

    A gitleaks slack-user-token was detected which attempts to identify hard-coded
    credentials.'
  metadata:
    category: Security
    explanation: '## slack-user-token

      A gitleaks slack-user-token was detected which attempts to identify hard-coded
      credentials. It is not recommended to store credentials in source-code, as this
      risks secrets being leaked and used by either an internal or external malicious
      adversary. It is recommended to use environment variables to securely provide
      credentials or retrieve credentials from a secure vault or HSM (Hardware Security
      Module).'
    subcategory: Auth
  severity: info
- id: Semgrep_generic.secrets.gitleaks.slack-webhook-url.slack-webhook-url
  languages:
  - c
  - python
  - visualforce
  - cpp
  - dockerfile
  - php
  - elixir
  - shell
  - csharp
  - json
  - typescript
  - apex
  - kotlin
  - terraform
  - ruby
  - scala
  - go
  - yaml
  - java
  - javascript
  - rust
  - swift
  - dart
  - clojure
  message: 'slack-webhook-url

    A gitleaks slack-webhook-url was detected which attempts to identify hard-coded
    credentials.'
  metadata:
    category: Security
    explanation: '## slack-webhook-url

      A gitleaks slack-webhook-url was detected which attempts to identify hard-coded
      credentials. It is not recommended to store credentials in source-code, as this
      risks secrets being leaked and used by either an internal or external malicious
      adversary. It is recommended to use environment variables to securely provide
      credentials or retrieve credentials from a secure vault or HSM (Hardware Security
      Module).'
    subcategory: Auth
  severity: info
- id: Semgrep_generic.secrets.gitleaks.snyk-api-token.snyk-api-token
  languages:
  - c
  - python
  - visualforce
  - cpp
  - dockerfile
  - php
  - elixir
  - shell
  - csharp
  - json
  - typescript
  - apex
  - kotlin
  - terraform
  - ruby
  - scala
  - go
  - yaml
  - java
  - javascript
  - rust
  - swift
  - dart
  - clojure
  message: 'snyk-api-token

    A gitleaks snyk-api-token was detected which attempts to identify hard-coded credentials.'
  metadata:
    category: Security
    explanation: '## snyk-api-token

      A gitleaks snyk-api-token was detected which attempts to identify hard-coded
      credentials. It is not recommended to store credentials in source-code, as this
      risks secrets being leaked and used by either an internal or external malicious
      adversary. It is recommended to use environment variables to securely provide
      credentials or retrieve credentials from a secure vault or HSM (Hardware Security
      Module).'
    subcategory: Auth
  severity: info
- id: Semgrep_generic.secrets.gitleaks.square-access-token.square-access-token
  languages:
  - c
  - python
  - visualforce
  - cpp
  - dockerfile
  - php
  - elixir
  - shell
  - csharp
  - json
  - typescript
  - apex
  - kotlin
  - terraform
  - ruby
  - scala
  - go
  - yaml
  - java
  - javascript
  - rust
  - swift
  - dart
  - clojure
  message: 'square-access-token

    A gitleaks square-access-token was detected which attempts to identify hard-coded
    credentials.'
  metadata:
    category: Security
    explanation: '## square-access-token

      A gitleaks square-access-token was detected which attempts to identify hard-coded
      credentials. It is not recommended to store credentials in source-code, as this
      risks secrets being leaked and used by either an internal or external malicious
      adversary. It is recommended to use environment variables to securely provide
      credentials or retrieve credentials from a secure vault or HSM (Hardware Security
      Module).'
    subcategory: Auth
  severity: info
- id: Semgrep_generic.secrets.gitleaks.squarespace-access-token.squarespace-access-token
  languages:
  - c
  - python
  - visualforce
  - cpp
  - dockerfile
  - php
  - elixir
  - shell
  - csharp
  - json
  - typescript
  - apex
  - kotlin
  - terraform
  - ruby
  - scala
  - go
  - yaml
  - java
  - javascript
  - rust
  - swift
  - dart
  - clojure
  message: 'squarespace-access-token

    A gitleaks squarespace-access-token was detected which attempts to identify hard-coded
    credentials.'
  metadata:
    category: Security
    explanation: '## squarespace-access-token

      A gitleaks squarespace-access-token was detected which attempts to identify
      hard-coded credentials. It is not recommended to store credentials in source-code,
      as this risks secrets being leaked and used by either an internal or external
      malicious adversary. It is recommended to use environment variables to securely
      provide credentials or retrieve credentials from a secure vault or HSM (Hardware
      Security Module).'
    subcategory: Auth
  severity: info
- id: Semgrep_generic.secrets.gitleaks.stripe-access-token.stripe-access-token
  languages:
  - c
  - python
  - visualforce
  - cpp
  - dockerfile
  - php
  - elixir
  - shell
  - csharp
  - json
  - typescript
  - apex
  - kotlin
  - terraform
  - ruby
  - scala
  - go
  - yaml
  - java
  - javascript
  - rust
  - swift
  - dart
  - clojure
  message: 'stripe-access-token

    A gitleaks stripe-access-token was detected which attempts to identify hard-coded
    credentials.'
  metadata:
    category: Security
    explanation: '## stripe-access-token

      A gitleaks stripe-access-token was detected which attempts to identify hard-coded
      credentials. It is not recommended to store credentials in source-code, as this
      risks secrets being leaked and used by either an internal or external malicious
      adversary. It is recommended to use environment variables to securely provide
      credentials or retrieve credentials from a secure vault or HSM (Hardware Security
      Module).'
    subcategory: Auth
  severity: info
- id: Semgrep_generic.secrets.gitleaks.sumologic-access-id.sumologic-access-id
  languages:
  - c
  - python
  - visualforce
  - cpp
  - dockerfile
  - php
  - elixir
  - shell
  - csharp
  - json
  - typescript
  - apex
  - kotlin
  - terraform
  - ruby
  - scala
  - go
  - yaml
  - java
  - javascript
  - rust
  - swift
  - dart
  - clojure
  message: 'sumologic-access-id

    A gitleaks sumologic-access-id was detected which attempts to identify hard-coded
    credentials.'
  metadata:
    category: Security
    explanation: '## sumologic-access-id

      A gitleaks sumologic-access-id was detected which attempts to identify hard-coded
      credentials. It is not recommended to store credentials in source-code, as this
      risks secrets being leaked and used by either an internal or external malicious
      adversary. It is recommended to use environment variables to securely provide
      credentials or retrieve credentials from a secure vault or HSM (Hardware Security
      Module).'
    subcategory: Auth
  severity: info
- id: Semgrep_generic.secrets.gitleaks.sumologic-access-token.sumologic-access-token
  languages:
  - c
  - python
  - visualforce
  - cpp
  - dockerfile
  - php
  - elixir
  - shell
  - csharp
  - json
  - typescript
  - apex
  - kotlin
  - terraform
  - ruby
  - scala
  - go
  - yaml
  - java
  - javascript
  - rust
  - swift
  - dart
  - clojure
  message: 'sumologic-access-token

    A gitleaks sumologic-access-token was detected which attempts to identify hard-coded
    credentials.'
  metadata:
    category: Security
    explanation: '## sumologic-access-token

      A gitleaks sumologic-access-token was detected which attempts to identify hard-coded
      credentials. It is not recommended to store credentials in source-code, as this
      risks secrets being leaked and used by either an internal or external malicious
      adversary. It is recommended to use environment variables to securely provide
      credentials or retrieve credentials from a secure vault or HSM (Hardware Security
      Module).'
    subcategory: Auth
  severity: info
- id: Semgrep_generic.secrets.gitleaks.telegram-bot-api-token.telegram-bot-api-token
  languages:
  - c
  - python
  - visualforce
  - cpp
  - dockerfile
  - php
  - elixir
  - shell
  - csharp
  - json
  - typescript
  - apex
  - kotlin
  - terraform
  - ruby
  - scala
  - go
  - yaml
  - java
  - javascript
  - rust
  - swift
  - dart
  - clojure
  message: 'telegram-bot-api-token

    A gitleaks telegram-bot-api-token was detected which attempts to identify hard-coded
    credentials.'
  metadata:
    category: Security
    explanation: '## telegram-bot-api-token

      A gitleaks telegram-bot-api-token was detected which attempts to identify hard-coded
      credentials. It is not recommended to store credentials in source-code, as this
      risks secrets being leaked and used by either an internal or external malicious
      adversary. It is recommended to use environment variables to securely provide
      credentials or retrieve credentials from a secure vault or HSM (Hardware Security
      Module).'
    subcategory: Auth
  severity: info
- id: Semgrep_generic.secrets.gitleaks.travisci-access-token.travisci-access-token
  languages:
  - c
  - python
  - visualforce
  - cpp
  - dockerfile
  - php
  - elixir
  - shell
  - csharp
  - json
  - typescript
  - apex
  - kotlin
  - terraform
  - ruby
  - scala
  - go
  - yaml
  - java
  - javascript
  - rust
  - swift
  - dart
  - clojure
  message: 'travisci-access-token

    A gitleaks travisci-access-token was detected which attempts to identify hard-coded
    credentials.'
  metadata:
    category: Security
    explanation: '## travisci-access-token

      A gitleaks travisci-access-token was detected which attempts to identify hard-coded
      credentials. It is not recommended to store credentials in source-code, as this
      risks secrets being leaked and used by either an internal or external malicious
      adversary. It is recommended to use environment variables to securely provide
      credentials or retrieve credentials from a secure vault or HSM (Hardware Security
      Module).'
    subcategory: Auth
  severity: info
- id: Semgrep_generic.secrets.gitleaks.twilio-api-key.twilio-api-key
  languages:
  - c
  - python
  - visualforce
  - cpp
  - dockerfile
  - php
  - elixir
  - shell
  - csharp
  - json
  - typescript
  - apex
  - kotlin
  - terraform
  - ruby
  - scala
  - go
  - yaml
  - java
  - javascript
  - rust
  - swift
  - dart
  - clojure
  message: 'twilio-api-key

    A gitleaks twilio-api-key was detected which attempts to identify hard-coded credentials.'
  metadata:
    category: Security
    explanation: '## twilio-api-key

      A gitleaks twilio-api-key was detected which attempts to identify hard-coded
      credentials. It is not recommended to store credentials in source-code, as this
      risks secrets being leaked and used by either an internal or external malicious
      adversary. It is recommended to use environment variables to securely provide
      credentials or retrieve credentials from a secure vault or HSM (Hardware Security
      Module).'
    subcategory: Auth
  severity: info
- id: Semgrep_generic.secrets.gitleaks.twitch-api-token.twitch-api-token
  languages:
  - c
  - python
  - visualforce
  - cpp
  - dockerfile
  - php
  - elixir
  - shell
  - csharp
  - json
  - typescript
  - apex
  - kotlin
  - terraform
  - ruby
  - scala
  - go
  - yaml
  - java
  - javascript
  - rust
  - swift
  - dart
  - clojure
  message: 'twitch-api-token

    A gitleaks twitch-api-token was detected which attempts to identify hard-coded
    credentials.'
  metadata:
    category: Security
    explanation: '## twitch-api-token

      A gitleaks twitch-api-token was detected which attempts to identify hard-coded
      credentials. It is not recommended to store credentials in source-code, as this
      risks secrets being leaked and used by either an internal or external malicious
      adversary. It is recommended to use environment variables to securely provide
      credentials or retrieve credentials from a secure vault or HSM (Hardware Security
      Module).'
    subcategory: Auth
  severity: info
- id: Semgrep_generic.secrets.gitleaks.twitter-access-secret.twitter-access-secret
  languages:
  - c
  - python
  - visualforce
  - cpp
  - dockerfile
  - php
  - elixir
  - shell
  - csharp
  - json
  - typescript
  - apex
  - kotlin
  - terraform
  - ruby
  - scala
  - go
  - yaml
  - java
  - javascript
  - rust
  - swift
  - dart
  - clojure
  message: 'twitter-access-secret

    A gitleaks twitter-access-secret was detected which attempts to identify hard-coded
    credentials.'
  metadata:
    category: Security
    explanation: '## twitter-access-secret

      A gitleaks twitter-access-secret was detected which attempts to identify hard-coded
      credentials. It is not recommended to store credentials in source-code, as this
      risks secrets being leaked and used by either an internal or external malicious
      adversary. It is recommended to use environment variables to securely provide
      credentials or retrieve credentials from a secure vault or HSM (Hardware Security
      Module).'
    subcategory: Auth
  severity: info
- id: Semgrep_generic.secrets.gitleaks.twitter-access-token.twitter-access-token
  languages:
  - c
  - python
  - visualforce
  - cpp
  - dockerfile
  - php
  - elixir
  - shell
  - csharp
  - json
  - typescript
  - apex
  - kotlin
  - terraform
  - ruby
  - scala
  - go
  - yaml
  - java
  - javascript
  - rust
  - swift
  - dart
  - clojure
  message: 'twitter-access-token

    A gitleaks twitter-access-token was detected which attempts to identify hard-coded
    credentials.'
  metadata:
    category: Security
    explanation: '## twitter-access-token

      A gitleaks twitter-access-token was detected which attempts to identify hard-coded
      credentials. It is not recommended to store credentials in source-code, as this
      risks secrets being leaked and used by either an internal or external malicious
      adversary. It is recommended to use environment variables to securely provide
      credentials or retrieve credentials from a secure vault or HSM (Hardware Security
      Module).'
    subcategory: Auth
  severity: info
- id: Semgrep_generic.secrets.gitleaks.twitter-api-key.twitter-api-key
  languages:
  - c
  - python
  - visualforce
  - cpp
  - dockerfile
  - php
  - elixir
  - shell
  - csharp
  - json
  - typescript
  - apex
  - kotlin
  - terraform
  - ruby
  - scala
  - go
  - yaml
  - java
  - javascript
  - rust
  - swift
  - dart
  - clojure
  message: 'twitter-api-key

    A gitleaks twitter-api-key was detected which attempts to identify hard-coded
    credentials.'
  metadata:
    category: Security
    explanation: '## twitter-api-key

      A gitleaks twitter-api-key was detected which attempts to identify hard-coded
      credentials. It is not recommended to store credentials in source-code, as this
      risks secrets being leaked and used by either an internal or external malicious
      adversary. It is recommended to use environment variables to securely provide
      credentials or retrieve credentials from a secure vault or HSM (Hardware Security
      Module).'
    subcategory: Auth
  severity: info
- id: Semgrep_generic.secrets.gitleaks.twitter-api-secret.twitter-api-secret
  languages:
  - c
  - python
  - visualforce
  - cpp
  - dockerfile
  - php
  - elixir
  - shell
  - csharp
  - json
  - typescript
  - apex
  - kotlin
  - terraform
  - ruby
  - scala
  - go
  - yaml
  - java
  - javascript
  - rust
  - swift
  - dart
  - clojure
  message: 'twitter-api-secret

    A gitleaks twitter-api-secret was detected which attempts to identify hard-coded
    credentials.'
  metadata:
    category: Security
    explanation: '## twitter-api-secret

      A gitleaks twitter-api-secret was detected which attempts to identify hard-coded
      credentials. It is not recommended to store credentials in source-code, as this
      risks secrets being leaked and used by either an internal or external malicious
      adversary. It is recommended to use environment variables to securely provide
      credentials or retrieve credentials from a secure vault or HSM (Hardware Security
      Module).'
    subcategory: Auth
  severity: info
- id: Semgrep_generic.secrets.gitleaks.twitter-bearer-token.twitter-bearer-token
  languages:
  - c
  - python
  - visualforce
  - cpp
  - dockerfile
  - php
  - elixir
  - shell
  - csharp
  - json
  - typescript
  - apex
  - kotlin
  - terraform
  - ruby
  - scala
  - go
  - yaml
  - java
  - javascript
  - rust
  - swift
  - dart
  - clojure
  message: 'twitter-bearer-token

    A gitleaks twitter-bearer-token was detected which attempts to identify hard-coded
    credentials.'
  metadata:
    category: Security
    explanation: '## twitter-bearer-token

      A gitleaks twitter-bearer-token was detected which attempts to identify hard-coded
      credentials. It is not recommended to store credentials in source-code, as this
      risks secrets being leaked and used by either an internal or external malicious
      adversary. It is recommended to use environment variables to securely provide
      credentials or retrieve credentials from a secure vault or HSM (Hardware Security
      Module).'
    subcategory: Auth
  severity: info
- id: Semgrep_generic.secrets.gitleaks.typeform-api-token.typeform-api-token
  languages:
  - c
  - python
  - visualforce
  - cpp
  - dockerfile
  - php
  - elixir
  - shell
  - csharp
  - json
  - typescript
  - apex
  - kotlin
  - terraform
  - ruby
  - scala
  - go
  - yaml
  - java
  - javascript
  - rust
  - swift
  - dart
  - clojure
  message: 'typeform-api-token

    A gitleaks typeform-api-token was detected which attempts to identify hard-coded
    credentials.'
  metadata:
    category: Security
    explanation: '## typeform-api-token

      A gitleaks typeform-api-token was detected which attempts to identify hard-coded
      credentials. It is not recommended to store credentials in source-code, as this
      risks secrets being leaked and used by either an internal or external malicious
      adversary. It is recommended to use environment variables to securely provide
      credentials or retrieve credentials from a secure vault or HSM (Hardware Security
      Module).'
    subcategory: Auth
  severity: info
- id: Semgrep_generic.secrets.gitleaks.vault-batch-token.vault-batch-token
  languages:
  - c
  - python
  - visualforce
  - cpp
  - dockerfile
  - php
  - elixir
  - shell
  - csharp
  - json
  - typescript
  - apex
  - kotlin
  - terraform
  - ruby
  - scala
  - go
  - yaml
  - java
  - javascript
  - rust
  - swift
  - dart
  - clojure
  message: 'vault-batch-token

    A gitleaks vault-batch-token was detected which attempts to identify hard-coded
    credentials.'
  metadata:
    category: Security
    explanation: '## vault-batch-token

      A gitleaks vault-batch-token was detected which attempts to identify hard-coded
      credentials. It is not recommended to store credentials in source-code, as this
      risks secrets being leaked and used by either an internal or external malicious
      adversary. It is recommended to use environment variables to securely provide
      credentials or retrieve credentials from a secure vault or HSM (Hardware Security
      Module).'
    subcategory: Auth
  severity: info
- id: Semgrep_generic.secrets.gitleaks.vault-service-token.vault-service-token
  languages:
  - c
  - python
  - visualforce
  - cpp
  - dockerfile
  - php
  - elixir
  - shell
  - csharp
  - json
  - typescript
  - apex
  - kotlin
  - terraform
  - ruby
  - scala
  - go
  - yaml
  - java
  - javascript
  - rust
  - swift
  - dart
  - clojure
  message: 'vault-service-token

    A gitleaks vault-service-token was detected which attempts to identify hard-coded
    credentials.'
  metadata:
    category: Security
    explanation: '## vault-service-token

      A gitleaks vault-service-token was detected which attempts to identify hard-coded
      credentials. It is not recommended to store credentials in source-code, as this
      risks secrets being leaked and used by either an internal or external malicious
      adversary. It is recommended to use environment variables to securely provide
      credentials or retrieve credentials from a secure vault or HSM (Hardware Security
      Module).'
    subcategory: Auth
  severity: info
- id: Semgrep_generic.secrets.gitleaks.yandex-access-token.yandex-access-token
  languages:
  - c
  - python
  - visualforce
  - cpp
  - dockerfile
  - php
  - elixir
  - shell
  - csharp
  - json
  - typescript
  - apex
  - kotlin
  - terraform
  - ruby
  - scala
  - go
  - yaml
  - java
  - javascript
  - rust
  - swift
  - dart
  - clojure
  message: 'yandex-access-token

    A gitleaks yandex-access-token was detected which attempts to identify hard-coded
    credentials.'
  metadata:
    category: Security
    explanation: '## yandex-access-token

      A gitleaks yandex-access-token was detected which attempts to identify hard-coded
      credentials. It is not recommended to store credentials in source-code, as this
      risks secrets being leaked and used by either an internal or external malicious
      adversary. It is recommended to use environment variables to securely provide
      credentials or retrieve credentials from a secure vault or HSM (Hardware Security
      Module).'
    subcategory: Auth
  severity: info
- id: Semgrep_generic.secrets.gitleaks.yandex-api-key.yandex-api-key
  languages:
  - c
  - python
  - visualforce
  - cpp
  - dockerfile
  - php
  - elixir
  - shell
  - csharp
  - json
  - typescript
  - apex
  - kotlin
  - terraform
  - ruby
  - scala
  - go
  - yaml
  - java
  - javascript
  - rust
  - swift
  - dart
  - clojure
  message: 'yandex-api-key

    A gitleaks yandex-api-key was detected which attempts to identify hard-coded credentials.'
  metadata:
    category: Security
    explanation: '## yandex-api-key

      A gitleaks yandex-api-key was detected which attempts to identify hard-coded
      credentials. It is not recommended to store credentials in source-code, as this
      risks secrets being leaked and used by either an internal or external malicious
      adversary. It is recommended to use environment variables to securely provide
      credentials or retrieve credentials from a secure vault or HSM (Hardware Security
      Module).'
    subcategory: Auth
  severity: info
- id: Semgrep_generic.secrets.gitleaks.yandex-aws-access-token.yandex-aws-access-token
  languages:
  - c
  - python
  - visualforce
  - cpp
  - dockerfile
  - php
  - elixir
  - shell
  - csharp
  - json
  - typescript
  - apex
  - kotlin
  - terraform
  - ruby
  - scala
  - go
  - yaml
  - java
  - javascript
  - rust
  - swift
  - dart
  - clojure
  message: 'yandex-aws-access-token

    A gitleaks yandex-aws-access-token was detected which attempts to identify hard-coded
    credentials.'
  metadata:
    category: Security
    explanation: '## yandex-aws-access-token

      A gitleaks yandex-aws-access-token was detected which attempts to identify hard-coded
      credentials. It is not recommended to store credentials in source-code, as this
      risks secrets being leaked and used by either an internal or external malicious
      adversary. It is recommended to use environment variables to securely provide
      credentials or retrieve credentials from a secure vault or HSM (Hardware Security
      Module).'
    subcategory: Auth
  severity: info
- id: Semgrep_generic.secrets.gitleaks.zendesk-secret-key.zendesk-secret-key
  languages:
  - c
  - python
  - visualforce
  - cpp
  - dockerfile
  - php
  - elixir
  - shell
  - csharp
  - json
  - typescript
  - apex
  - kotlin
  - terraform
  - ruby
  - scala
  - go
  - yaml
  - java
  - javascript
  - rust
  - swift
  - dart
  - clojure
  message: 'zendesk-secret-key

    A gitleaks zendesk-secret-key was detected which attempts to identify hard-coded
    credentials.'
  metadata:
    category: Security
    explanation: '## zendesk-secret-key

      A gitleaks zendesk-secret-key was detected which attempts to identify hard-coded
      credentials. It is not recommended to store credentials in source-code, as this
      risks secrets being leaked and used by either an internal or external malicious
      adversary. It is recommended to use environment variables to securely provide
      credentials or retrieve credentials from a secure vault or HSM (Hardware Security
      Module).'
    subcategory: Auth
  severity: info
- id: Semgrep_generic.secrets.security.detected-amazon-mws-auth-token.detected-amazon-mws-auth-token
  languages:
  - c
  - python
  - visualforce
  - cpp
  - dockerfile
  - php
  - elixir
  - shell
  - csharp
  - json
  - typescript
  - apex
  - kotlin
  - terraform
  - ruby
  - scala
  - go
  - yaml
  - java
  - javascript
  - rust
  - swift
  - dart
  - clojure
  message: 'detected-amazon-mws-auth-token

    Amazon MWS Auth Token detected'
  metadata:
    category: Security
    explanation: '## detected-amazon-mws-auth-token

      Amazon MWS Auth Token detected'
    subcategory: Auth
  severity: error
- id: Semgrep_generic.secrets.security.detected-artifactory-password.detected-artifactory-password
  languages:
  - c
  - python
  - visualforce
  - cpp
  - dockerfile
  - php
  - elixir
  - shell
  - csharp
  - json
  - typescript
  - apex
  - kotlin
  - terraform
  - ruby
  - scala
  - go
  - yaml
  - java
  - javascript
  - rust
  - swift
  - dart
  - clojure
  message: 'detected-artifactory-password

    Artifactory token detected'
  metadata:
    category: Security
    explanation: '## detected-artifactory-password

      Artifactory token detected'
    subcategory: Auth
  severity: error
- id: Semgrep_generic.secrets.security.detected-artifactory-token.detected-artifactory-token
  languages:
  - c
  - python
  - visualforce
  - cpp
  - dockerfile
  - php
  - elixir
  - shell
  - csharp
  - json
  - typescript
  - apex
  - kotlin
  - terraform
  - ruby
  - scala
  - go
  - yaml
  - java
  - javascript
  - rust
  - swift
  - dart
  - clojure
  message: 'detected-artifactory-token

    Artifactory token detected'
  metadata:
    category: Security
    explanation: '## detected-artifactory-token

      Artifactory token detected'
    subcategory: Auth
  severity: error
- id: Semgrep_generic.secrets.security.detected-aws-access-key-id-value.detected-aws-access-key-id-value
  languages:
  - c
  - python
  - visualforce
  - cpp
  - dockerfile
  - php
  - elixir
  - shell
  - csharp
  - json
  - typescript
  - apex
  - kotlin
  - terraform
  - ruby
  - scala
  - go
  - yaml
  - java
  - javascript
  - rust
  - swift
  - dart
  - clojure
  message: 'detected-aws-access-key-id-value

    AWS Access Key ID Value detected.'
  metadata:
    category: Security
    explanation: '## detected-aws-access-key-id-value

      AWS Access Key ID Value detected. This is a sensitive credential and should
      not be hardcoded here. Instead, read this value from an environment variable
      or keep it in a separate, private file.'
    subcategory: Auth
  severity: error
- id: Semgrep_generic.secrets.security.detected-aws-account-id.detected-aws-account-id
  languages:
  - c
  - python
  - visualforce
  - cpp
  - dockerfile
  - php
  - elixir
  - shell
  - csharp
  - json
  - typescript
  - apex
  - kotlin
  - terraform
  - ruby
  - scala
  - go
  - yaml
  - java
  - javascript
  - rust
  - swift
  - dart
  - clojure
  message: 'detected-aws-account-id

    AWS Account ID detected.'
  metadata:
    category: Security
    explanation: '## detected-aws-account-id

      AWS Account ID detected. While not considered sensitive information, it is important
      to use them and share them carefully. For that reason it would be preferrable
      avoiding to hardcoded it here. Instead, read the value from an environment variable
      or keep the value in a separate, private file.'
    subcategory: Auth
  severity: error
- id: Semgrep_generic.secrets.security.detected-aws-appsync-graphql-key.detected-aws-appsync-graphql-key
  languages:
  - c
  - python
  - visualforce
  - cpp
  - dockerfile
  - php
  - elixir
  - shell
  - csharp
  - json
  - typescript
  - apex
  - kotlin
  - terraform
  - ruby
  - scala
  - go
  - yaml
  - java
  - javascript
  - rust
  - swift
  - dart
  - clojure
  message: 'detected-aws-appsync-graphql-key

    AWS AppSync GraphQL Key detected'
  metadata:
    category: Security
    explanation: '## detected-aws-appsync-graphql-key

      AWS AppSync GraphQL Key detected'
    subcategory: Auth
  severity: error
- id: Semgrep_generic.secrets.security.detected-aws-secret-access-key.detected-aws-secret-access-key
  languages:
  - c
  - python
  - visualforce
  - cpp
  - dockerfile
  - php
  - elixir
  - shell
  - csharp
  - json
  - typescript
  - apex
  - kotlin
  - terraform
  - ruby
  - scala
  - go
  - yaml
  - java
  - javascript
  - rust
  - swift
  - dart
  - clojure
  message: 'detected-aws-secret-access-key

    AWS Secret Access Key detected'
  metadata:
    category: Security
    explanation: '## detected-aws-secret-access-key

      AWS Secret Access Key detected'
    subcategory: Auth
  severity: error
- id: Semgrep_generic.secrets.security.detected-aws-session-token.detected-aws-session-token
  languages:
  - c
  - python
  - visualforce
  - cpp
  - dockerfile
  - php
  - elixir
  - shell
  - csharp
  - json
  - typescript
  - apex
  - kotlin
  - terraform
  - ruby
  - scala
  - go
  - yaml
  - java
  - javascript
  - rust
  - swift
  - dart
  - clojure
  message: 'detected-aws-session-token

    AWS Session Token detected'
  metadata:
    category: Security
    explanation: '## detected-aws-session-token

      AWS Session Token detected'
    subcategory: Auth
  severity: error
- id: Semgrep_generic.secrets.security.detected-bcrypt-hash.detected-bcrypt-hash
  languages:
  - c
  - python
  - visualforce
  - cpp
  - dockerfile
  - php
  - elixir
  - shell
  - csharp
  - json
  - typescript
  - apex
  - kotlin
  - terraform
  - ruby
  - scala
  - go
  - yaml
  - java
  - javascript
  - rust
  - swift
  - dart
  - clojure
  message: 'detected-bcrypt-hash

    bcrypt hash detected'
  metadata:
    category: Security
    explanation: '## detected-bcrypt-hash

      bcrypt hash detected'
    subcategory: Auth
  severity: error
- id: Semgrep_generic.secrets.security.detected-codeclimate.detected-codeclimate
  languages:
  - c
  - python
  - visualforce
  - cpp
  - dockerfile
  - php
  - elixir
  - shell
  - csharp
  - json
  - typescript
  - apex
  - kotlin
  - terraform
  - ruby
  - scala
  - go
  - yaml
  - java
  - javascript
  - rust
  - swift
  - dart
  - clojure
  message: 'detected-codeclimate

    CodeClimate detected'
  metadata:
    category: Security
    explanation: '## detected-codeclimate

      CodeClimate detected'
    subcategory: Auth
  severity: error
- id: Semgrep_generic.secrets.security.detected-etc-shadow.detected-etc-shadow
  languages:
  - c
  - python
  - visualforce
  - cpp
  - dockerfile
  - php
  - elixir
  - shell
  - csharp
  - json
  - typescript
  - apex
  - kotlin
  - terraform
  - ruby
  - scala
  - go
  - yaml
  - java
  - javascript
  - rust
  - swift
  - dart
  - clojure
  message: 'detected-etc-shadow

    linux shadow file detected'
  metadata:
    category: Security
    explanation: '## detected-etc-shadow

      linux shadow file detected'
    subcategory: Auth
  severity: error
- id: Semgrep_generic.secrets.security.detected-facebook-access-token.detected-facebook-access-token
  languages:
  - c
  - python
  - visualforce
  - cpp
  - dockerfile
  - php
  - elixir
  - shell
  - csharp
  - json
  - typescript
  - apex
  - kotlin
  - terraform
  - ruby
  - scala
  - go
  - yaml
  - java
  - javascript
  - rust
  - swift
  - dart
  - clojure
  message: 'detected-facebook-access-token

    Facebook Access Token detected'
  metadata:
    category: Security
    explanation: '## detected-facebook-access-token

      Facebook Access Token detected'
    subcategory: Auth
  severity: error
- id: Semgrep_generic.secrets.security.detected-facebook-oauth.detected-facebook-oauth
  languages:
  - c
  - python
  - visualforce
  - cpp
  - dockerfile
  - php
  - elixir
  - shell
  - csharp
  - json
  - typescript
  - apex
  - kotlin
  - terraform
  - ruby
  - scala
  - go
  - yaml
  - java
  - javascript
  - rust
  - swift
  - dart
  - clojure
  message: 'detected-facebook-oauth

    Facebook OAuth detected'
  metadata:
    category: Security
    explanation: '## detected-facebook-oauth

      Facebook OAuth detected'
    subcategory: Auth
  severity: error
- id: Semgrep_generic.secrets.security.detected-generic-api-key.detected-generic-api-key
  languages:
  - c
  - python
  - visualforce
  - cpp
  - dockerfile
  - php
  - elixir
  - shell
  - csharp
  - json
  - typescript
  - apex
  - kotlin
  - terraform
  - ruby
  - scala
  - go
  - yaml
  - java
  - javascript
  - rust
  - swift
  - dart
  - clojure
  message: 'detected-generic-api-key

    Generic API Key detected'
  metadata:
    category: Security
    explanation: '## detected-generic-api-key

      Generic API Key detected'
    subcategory: Auth
  severity: error
- id: Semgrep_generic.secrets.security.detected-generic-secret.detected-generic-secret
  languages:
  - c
  - python
  - visualforce
  - cpp
  - dockerfile
  - php
  - elixir
  - shell
  - csharp
  - json
  - typescript
  - apex
  - kotlin
  - terraform
  - ruby
  - scala
  - go
  - yaml
  - java
  - javascript
  - rust
  - swift
  - dart
  - clojure
  message: 'detected-generic-secret

    Generic Secret detected'
  metadata:
    category: Security
    explanation: '## detected-generic-secret

      Generic Secret detected'
    subcategory: Auth
  severity: error
- id: Semgrep_generic.secrets.security.detected-github-token.detected-github-token
  languages:
  - c
  - python
  - visualforce
  - cpp
  - dockerfile
  - php
  - elixir
  - shell
  - csharp
  - json
  - typescript
  - apex
  - kotlin
  - terraform
  - ruby
  - scala
  - go
  - yaml
  - java
  - javascript
  - rust
  - swift
  - dart
  - clojure
  message: 'detected-github-token

    GitHub Token detected'
  metadata:
    category: Security
    explanation: '## detected-github-token

      GitHub Token detected'
    subcategory: Auth
  severity: error
- id: Semgrep_generic.secrets.security.detected-google-api-key.detected-google-api-key
  languages:
  - c
  - python
  - visualforce
  - cpp
  - dockerfile
  - php
  - elixir
  - shell
  - csharp
  - json
  - typescript
  - apex
  - kotlin
  - terraform
  - ruby
  - scala
  - go
  - yaml
  - java
  - javascript
  - rust
  - swift
  - dart
  - clojure
  message: 'detected-google-api-key

    Google API Key Detected'
  metadata:
    category: Security
    explanation: '## detected-google-api-key

      Google API Key Detected'
    subcategory: Auth
  severity: error
- id: Semgrep_generic.secrets.security.detected-google-cloud-api-key.detected-google-cloud-api-key
  languages:
  - c
  - python
  - visualforce
  - cpp
  - dockerfile
  - php
  - elixir
  - shell
  - csharp
  - json
  - typescript
  - apex
  - kotlin
  - terraform
  - ruby
  - scala
  - go
  - yaml
  - java
  - javascript
  - rust
  - swift
  - dart
  - clojure
  message: 'detected-google-cloud-api-key

    Google Cloud API Key detected'
  metadata:
    category: Security
    explanation: '## detected-google-cloud-api-key

      Google Cloud API Key detected'
    subcategory: Auth
  severity: error
- id: Semgrep_generic.secrets.security.detected-google-gcm-service-account.detected-google-gcm-service-account
  languages:
  - c
  - python
  - visualforce
  - cpp
  - dockerfile
  - php
  - elixir
  - shell
  - csharp
  - json
  - typescript
  - apex
  - kotlin
  - terraform
  - ruby
  - scala
  - go
  - yaml
  - java
  - javascript
  - rust
  - swift
  - dart
  - clojure
  message: 'detected-google-gcm-service-account

    Google (GCM) Service account detected'
  metadata:
    category: Security
    explanation: '## detected-google-gcm-service-account

      Google (GCM) Service account detected'
    subcategory: Auth
  severity: error
- id: Semgrep_generic.secrets.security.detected-google-oauth-access-token.detected-google-oauth-access-token
  languages:
  - c
  - python
  - visualforce
  - cpp
  - dockerfile
  - php
  - elixir
  - shell
  - csharp
  - json
  - typescript
  - apex
  - kotlin
  - terraform
  - ruby
  - scala
  - go
  - yaml
  - java
  - javascript
  - rust
  - swift
  - dart
  - clojure
  message: 'detected-google-oauth-access-token

    Google OAuth Access Token detected'
  metadata:
    category: Security
    explanation: '## detected-google-oauth-access-token

      Google OAuth Access Token detected'
    subcategory: Auth
  severity: error
- id: Semgrep_generic.secrets.security.detected-google-oauth.detected-google-oauth-url
  languages:
  - c
  - python
  - visualforce
  - cpp
  - dockerfile
  - php
  - elixir
  - shell
  - csharp
  - json
  - typescript
  - apex
  - kotlin
  - terraform
  - ruby
  - scala
  - go
  - yaml
  - java
  - javascript
  - rust
  - swift
  - dart
  - clojure
  message: 'detected-google-oauth-url

    Google OAuth url detected'
  metadata:
    category: Security
    explanation: '## detected-google-oauth-url

      Google OAuth url detected'
    subcategory: Auth
  severity: error
- id: Semgrep_generic.secrets.security.detected-heroku-api-key.detected-heroku-api-key
  languages:
  - c
  - python
  - visualforce
  - cpp
  - dockerfile
  - php
  - elixir
  - shell
  - csharp
  - json
  - typescript
  - apex
  - kotlin
  - terraform
  - ruby
  - scala
  - go
  - yaml
  - java
  - javascript
  - rust
  - swift
  - dart
  - clojure
  message: 'detected-heroku-api-key

    Heroku API Key detected'
  metadata:
    category: Security
    explanation: '## detected-heroku-api-key

      Heroku API Key detected'
    subcategory: Auth
  severity: error
- id: Semgrep_generic.secrets.security.detected-hockeyapp.detected-hockeyapp
  languages:
  - c
  - python
  - visualforce
  - cpp
  - dockerfile
  - php
  - elixir
  - shell
  - csharp
  - json
  - typescript
  - apex
  - kotlin
  - terraform
  - ruby
  - scala
  - go
  - yaml
  - java
  - javascript
  - rust
  - swift
  - dart
  - clojure
  message: 'detected-hockeyapp

    HockeyApp detected'
  metadata:
    category: Security
    explanation: '## detected-hockeyapp

      HockeyApp detected'
    subcategory: Auth
  severity: error
- id: Semgrep_generic.secrets.security.detected-jwt-token.detected-jwt-token
  languages:
  - c
  - python
  - visualforce
  - cpp
  - dockerfile
  - php
  - elixir
  - shell
  - csharp
  - json
  - typescript
  - apex
  - kotlin
  - terraform
  - ruby
  - scala
  - go
  - yaml
  - java
  - javascript
  - rust
  - swift
  - dart
  - clojure
  message: 'detected-jwt-token

    JWT token detected'
  metadata:
    category: Security
    explanation: '## detected-jwt-token

      JWT token detected'
    subcategory: Cryptography
  severity: error
- id: Semgrep_generic.secrets.security.detected-kolide-api-key.detected-kolide-api-key
  languages:
  - c
  - python
  - visualforce
  - cpp
  - dockerfile
  - php
  - elixir
  - shell
  - csharp
  - json
  - typescript
  - apex
  - kotlin
  - terraform
  - ruby
  - scala
  - go
  - yaml
  - java
  - javascript
  - rust
  - swift
  - dart
  - clojure
  message: 'detected-kolide-api-key

    Kolide API Key detected'
  metadata:
    category: Security
    explanation: '## detected-kolide-api-key

      Kolide API Key detected'
    subcategory: Auth
  severity: error
- id: Semgrep_generic.secrets.security.detected-mailchimp-api-key.detected-mailchimp-api-key
  languages:
  - c
  - python
  - visualforce
  - cpp
  - dockerfile
  - php
  - elixir
  - shell
  - csharp
  - json
  - typescript
  - apex
  - kotlin
  - terraform
  - ruby
  - scala
  - go
  - yaml
  - java
  - javascript
  - rust
  - swift
  - dart
  - clojure
  message: 'detected-mailchimp-api-key

    MailChimp API Key detected'
  metadata:
    category: Security
    explanation: '## detected-mailchimp-api-key

      MailChimp API Key detected'
    subcategory: Auth
  severity: error
- id: Semgrep_generic.secrets.security.detected-mailgun-api-key.detected-mailgun-api-key
  languages:
  - c
  - python
  - visualforce
  - cpp
  - dockerfile
  - php
  - elixir
  - shell
  - csharp
  - json
  - typescript
  - apex
  - kotlin
  - terraform
  - ruby
  - scala
  - go
  - yaml
  - java
  - javascript
  - rust
  - swift
  - dart
  - clojure
  message: 'detected-mailgun-api-key

    Mailgun API Key detected'
  metadata:
    category: Security
    explanation: '## detected-mailgun-api-key

      Mailgun API Key detected'
    subcategory: Auth
  severity: error
- id: Semgrep_generic.secrets.security.detected-npm-registry-auth-token.detected-npm-registry-auth-token
  languages:
  - c
  - python
  - visualforce
  - cpp
  - dockerfile
  - php
  - elixir
  - shell
  - csharp
  - json
  - typescript
  - apex
  - kotlin
  - terraform
  - ruby
  - scala
  - go
  - yaml
  - java
  - javascript
  - rust
  - swift
  - dart
  - clojure
  message: 'detected-npm-registry-auth-token

    NPM registry authentication token detected'
  metadata:
    category: Security
    explanation: '## detected-npm-registry-auth-token

      NPM registry authentication token detected'
    subcategory: Auth
  severity: error
- id: Semgrep_generic.secrets.security.detected-outlook-team.detected-outlook-team
  languages:
  - c
  - python
  - visualforce
  - cpp
  - dockerfile
  - php
  - elixir
  - shell
  - csharp
  - json
  - typescript
  - apex
  - kotlin
  - terraform
  - ruby
  - scala
  - go
  - yaml
  - java
  - javascript
  - rust
  - swift
  - dart
  - clojure
  message: 'detected-outlook-team

    Outlook Team detected'
  metadata:
    category: Security
    explanation: '## detected-outlook-team

      Outlook Team detected'
    subcategory: Auth
  severity: error
- id: Semgrep_generic.secrets.security.detected-paypal-braintree-access-token.detected-paypal-braintree-access-token
  languages:
  - c
  - python
  - visualforce
  - cpp
  - dockerfile
  - php
  - elixir
  - shell
  - csharp
  - json
  - typescript
  - apex
  - kotlin
  - terraform
  - ruby
  - scala
  - go
  - yaml
  - java
  - javascript
  - rust
  - swift
  - dart
  - clojure
  message: 'detected-paypal-braintree-access-token

    PayPal Braintree Access Token detected'
  metadata:
    category: Security
    explanation: '## detected-paypal-braintree-access-token

      PayPal Braintree Access Token detected'
    subcategory: Auth
  severity: error
- id: Semgrep_generic.secrets.security.detected-pgp-private-key-block.detected-pgp-private-key-block
  languages:
  - c
  - python
  - visualforce
  - cpp
  - dockerfile
  - php
  - elixir
  - shell
  - csharp
  - json
  - typescript
  - apex
  - kotlin
  - terraform
  - ruby
  - scala
  - go
  - yaml
  - java
  - javascript
  - rust
  - swift
  - dart
  - clojure
  message: 'detected-pgp-private-key-block

    Something that looks like a PGP private key block is detected.'
  metadata:
    category: Security
    explanation: '## detected-pgp-private-key-block

      Something that looks like a PGP private key block is detected. This is a potential
      hardcoded secret that could be leaked if this code is committed. Instead, remove
      this code block from the commit.'
    subcategory: Auth
  severity: error
- id: Semgrep_generic.secrets.security.detected-picatic-api-key.detected-picatic-api-key
  languages:
  - c
  - python
  - visualforce
  - cpp
  - dockerfile
  - php
  - elixir
  - shell
  - csharp
  - json
  - typescript
  - apex
  - kotlin
  - terraform
  - ruby
  - scala
  - go
  - yaml
  - java
  - javascript
  - rust
  - swift
  - dart
  - clojure
  message: 'detected-picatic-api-key

    Picatic API Key detected'
  metadata:
    category: Security
    explanation: '## detected-picatic-api-key

      Picatic API Key detected'
    subcategory: Auth
  severity: error
- id: Semgrep_generic.secrets.security.detected-private-key.detected-private-key
  languages:
  - c
  - python
  - visualforce
  - cpp
  - dockerfile
  - php
  - elixir
  - shell
  - csharp
  - json
  - typescript
  - apex
  - kotlin
  - terraform
  - ruby
  - scala
  - go
  - yaml
  - java
  - javascript
  - rust
  - swift
  - dart
  - clojure
  message: 'detected-private-key

    Private Key detected.'
  metadata:
    category: Security
    explanation: '## detected-private-key

      Private Key detected. This is a sensitive credential and should not be hardcoded
      here. Instead, store this in a separate, private file.'
    subcategory: Auth
  severity: error
- id: Semgrep_generic.secrets.security.detected-sauce-token.detected-sauce-token
  languages:
  - c
  - python
  - visualforce
  - cpp
  - dockerfile
  - php
  - elixir
  - shell
  - csharp
  - json
  - typescript
  - apex
  - kotlin
  - terraform
  - ruby
  - scala
  - go
  - yaml
  - java
  - javascript
  - rust
  - swift
  - dart
  - clojure
  message: 'detected-sauce-token

    Sauce Token detected'
  metadata:
    category: Security
    explanation: '## detected-sauce-token

      Sauce Token detected'
    subcategory: Auth
  severity: error
- id: Semgrep_generic.secrets.security.detected-sendgrid-api-key.detected-sendgrid-api-key
  languages:
  - c
  - python
  - visualforce
  - cpp
  - dockerfile
  - php
  - elixir
  - shell
  - csharp
  - json
  - typescript
  - apex
  - kotlin
  - terraform
  - ruby
  - scala
  - go
  - yaml
  - java
  - javascript
  - rust
  - swift
  - dart
  - clojure
  message: 'detected-sendgrid-api-key

    SendGrid API Key detected'
  metadata:
    category: Security
    explanation: '## detected-sendgrid-api-key

      SendGrid API Key detected'
    subcategory: Auth
  severity: error
- id: Semgrep_generic.secrets.security.detected-slack-token.detected-slack-token
  languages:
  - c
  - python
  - visualforce
  - cpp
  - dockerfile
  - php
  - elixir
  - shell
  - csharp
  - json
  - typescript
  - apex
  - kotlin
  - terraform
  - ruby
  - scala
  - go
  - yaml
  - java
  - javascript
  - rust
  - swift
  - dart
  - clojure
  message: 'detected-slack-token

    Slack Token detected'
  metadata:
    category: Security
    explanation: '## detected-slack-token

      Slack Token detected'
    subcategory: Auth
  severity: error
- id: Semgrep_generic.secrets.security.detected-slack-webhook.detected-slack-webhook
  languages:
  - c
  - python
  - visualforce
  - cpp
  - dockerfile
  - php
  - elixir
  - shell
  - csharp
  - json
  - typescript
  - apex
  - kotlin
  - terraform
  - ruby
  - scala
  - go
  - yaml
  - java
  - javascript
  - rust
  - swift
  - dart
  - clojure
  message: 'detected-slack-webhook

    Slack Webhook detected'
  metadata:
    category: Security
    explanation: '## detected-slack-webhook

      Slack Webhook detected'
    subcategory: Auth
  severity: error
- id: Semgrep_generic.secrets.security.detected-snyk-api-key.detected-snyk-api-key
  languages:
  - c
  - python
  - visualforce
  - cpp
  - dockerfile
  - php
  - elixir
  - shell
  - csharp
  - json
  - typescript
  - apex
  - kotlin
  - terraform
  - ruby
  - scala
  - go
  - yaml
  - java
  - javascript
  - rust
  - swift
  - dart
  - clojure
  message: 'detected-snyk-api-key

    Snyk API Key detected'
  metadata:
    category: Security
    explanation: '## detected-snyk-api-key

      Snyk API Key detected'
    subcategory: Auth
  severity: error
- id: Semgrep_generic.secrets.security.detected-softlayer-api-key.detected-softlayer-api-key
  languages:
  - c
  - python
  - visualforce
  - cpp
  - dockerfile
  - php
  - elixir
  - shell
  - csharp
  - json
  - typescript
  - apex
  - kotlin
  - terraform
  - ruby
  - scala
  - go
  - yaml
  - java
  - javascript
  - rust
  - swift
  - dart
  - clojure
  message: 'detected-softlayer-api-key

    SoftLayer API Key detected'
  metadata:
    category: Security
    explanation: '## detected-softlayer-api-key

      SoftLayer API Key detected'
    subcategory: Auth
  severity: error
- id: Semgrep_generic.secrets.security.detected-sonarqube-docs-api-key.detected-sonarqube-docs-api-key
  languages:
  - c
  - python
  - visualforce
  - cpp
  - dockerfile
  - php
  - elixir
  - shell
  - csharp
  - json
  - typescript
  - apex
  - kotlin
  - terraform
  - ruby
  - scala
  - go
  - yaml
  - java
  - javascript
  - rust
  - swift
  - dart
  - clojure
  message: 'detected-sonarqube-docs-api-key

    SonarQube Docs API Key detected'
  metadata:
    category: Security
    explanation: '## detected-sonarqube-docs-api-key

      SonarQube Docs API Key detected'
    subcategory: Auth
  severity: error
- id: Semgrep_generic.secrets.security.detected-square-access-token.detected-square-access-token
  languages:
  - c
  - python
  - visualforce
  - cpp
  - dockerfile
  - php
  - elixir
  - shell
  - csharp
  - json
  - typescript
  - apex
  - kotlin
  - terraform
  - ruby
  - scala
  - go
  - yaml
  - java
  - javascript
  - rust
  - swift
  - dart
  - clojure
  message: 'detected-square-access-token

    Square Access Token detected'
  metadata:
    category: Security
    explanation: '## detected-square-access-token

      Square Access Token detected'
    subcategory: Auth
  severity: error
- id: Semgrep_generic.secrets.security.detected-square-oauth-secret.detected-square-oauth-secret
  languages:
  - c
  - python
  - visualforce
  - cpp
  - dockerfile
  - php
  - elixir
  - shell
  - csharp
  - json
  - typescript
  - apex
  - kotlin
  - terraform
  - ruby
  - scala
  - go
  - yaml
  - java
  - javascript
  - rust
  - swift
  - dart
  - clojure
  message: 'detected-square-oauth-secret

    Square OAuth Secret detected'
  metadata:
    category: Security
    explanation: '## detected-square-oauth-secret

      Square OAuth Secret detected'
    subcategory: Auth
  severity: error
- id: Semgrep_generic.secrets.security.detected-ssh-password.detected-ssh-password
  languages:
  - c
  - python
  - visualforce
  - cpp
  - dockerfile
  - php
  - elixir
  - shell
  - csharp
  - json
  - typescript
  - apex
  - kotlin
  - terraform
  - ruby
  - scala
  - go
  - yaml
  - java
  - javascript
  - rust
  - swift
  - dart
  - clojure
  message: 'detected-ssh-password

    SSH Password detected'
  metadata:
    category: Security
    explanation: '## detected-ssh-password

      SSH Password detected'
    subcategory: Auth
  severity: error
- id: Semgrep_generic.secrets.security.detected-stripe-api-key.detected-stripe-api-key
  languages:
  - c
  - python
  - visualforce
  - cpp
  - dockerfile
  - php
  - elixir
  - shell
  - csharp
  - json
  - typescript
  - apex
  - kotlin
  - terraform
  - ruby
  - scala
  - go
  - yaml
  - java
  - javascript
  - rust
  - swift
  - dart
  - clojure
  message: 'detected-stripe-api-key

    Stripe API Key detected'
  metadata:
    category: Security
    explanation: '## detected-stripe-api-key

      Stripe API Key detected'
    subcategory: Auth
  severity: error
- id: Semgrep_generic.secrets.security.detected-stripe-restricted-api-key.detected-stripe-restricted-api-key
  languages:
  - c
  - python
  - visualforce
  - cpp
  - dockerfile
  - php
  - elixir
  - shell
  - csharp
  - json
  - typescript
  - apex
  - kotlin
  - terraform
  - ruby
  - scala
  - go
  - yaml
  - java
  - javascript
  - rust
  - swift
  - dart
  - clojure
  message: 'detected-stripe-restricted-api-key

    Stripe Restricted API Key detected'
  metadata:
    category: Security
    explanation: '## detected-stripe-restricted-api-key

      Stripe Restricted API Key detected'
    subcategory: Auth
  severity: error
- id: Semgrep_generic.secrets.security.detected-telegram-bot-api-key.detected-telegram-bot-api-key
  languages:
  - c
  - python
  - visualforce
  - cpp
  - dockerfile
  - php
  - elixir
  - shell
  - csharp
  - json
  - typescript
  - apex
  - kotlin
  - terraform
  - ruby
  - scala
  - go
  - yaml
  - java
  - javascript
  - rust
  - swift
  - dart
  - clojure
  message: 'detected-telegram-bot-api-key

    Telegram Bot API Key detected'
  metadata:
    category: Security
    explanation: '## detected-telegram-bot-api-key

      Telegram Bot API Key detected'
    subcategory: Auth
  severity: error
- id: Semgrep_generic.secrets.security.detected-twilio-api-key.detected-twilio-api-key
  languages:
  - c
  - python
  - visualforce
  - cpp
  - dockerfile
  - php
  - elixir
  - shell
  - csharp
  - json
  - typescript
  - apex
  - kotlin
  - terraform
  - ruby
  - scala
  - go
  - yaml
  - java
  - javascript
  - rust
  - swift
  - dart
  - clojure
  message: 'detected-twilio-api-key

    Twilio API Key detected'
  metadata:
    category: Security
    explanation: '## detected-twilio-api-key

      Twilio API Key detected'
    subcategory: Auth
  severity: error
- id: Semgrep_generic.secrets.security.detected-username-and-password-in-uri.detected-username-and-password-in-uri
  languages:
  - c
  - python
  - visualforce
  - cpp
  - dockerfile
  - php
  - elixir
  - shell
  - csharp
  - json
  - typescript
  - apex
  - kotlin
  - terraform
  - ruby
  - scala
  - go
  - yaml
  - java
  - javascript
  - rust
  - swift
  - dart
  - clojure
  message: 'detected-username-and-password-in-uri

    Username and password in URI detected'
  metadata:
    category: Security
    explanation: '## detected-username-and-password-in-uri

      Username and password in URI detected'
    subcategory: Auth
  severity: error
- id: Semgrep_generic.secrets.security.google-maps-apikeyleak.google-maps-apikeyleak
  languages:
  - c
  - python
  - visualforce
  - cpp
  - dockerfile
  - php
  - elixir
  - shell
  - csharp
  - json
  - typescript
  - apex
  - kotlin
  - terraform
  - ruby
  - scala
  - go
  - yaml
  - java
  - javascript
  - rust
  - swift
  - dart
  - clojure
  message: 'google-maps-apikeyleak

    Detects potential Google Maps API keys in code'
  metadata:
    category: Security
    explanation: '## google-maps-apikeyleak

      Detects potential Google Maps API keys in code'
    subcategory: Visibility
  severity: warning
- id: Semgrep_generic.unicode.security.bidi.contains-bidirectional-characters
  languages:
  - c
  - javascript
  - ruby
  - python
  - shell
  - cpp
  - scala
  - csharp
  - go
  - json
  - rust
  - typescript
  - yaml
  - php
  - kotlin
  - java
  message: 'contains-bidirectional-characters

    This code contains bidirectional (bidi) characters.'
  metadata:
    category: Security
    explanation: '## contains-bidirectional-characters

      This code contains bidirectional (bidi) characters. While this is useful for
      support of right-to-left languages such as Arabic or Hebrew, it can also be
      used to trick language parsers into executing code in a manner that is different
      from how it is displayed in code editing and review tools. If this is not what
      you were expecting, please review this code in an editor that can reveal hidden
      Unicode characters.'
    subcategory: InputValidation
  severity: warning
- id: Semgrep_python.airflow.security.audit.formatted-string-bashoperator.formatted-string-bashoperator
  languages:
  - python
  message: 'formatted-string-bashoperator

    Found a formatted string in BashOperator: $CMD. This could be vulnerable to injection.'
  metadata:
    category: Security
    explanation: '## formatted-string-bashoperator

      Found a formatted string in BashOperator: $CMD. This could be vulnerable to
      injection. Be extra sure your variables are not controllable by external sources.'
    subcategory: InputValidation
  severity: error
- id: Semgrep_python.aws-lambda.security.dangerous-asyncio-create-exec.dangerous-asyncio-create-exec
  languages:
  - python
  message: 'dangerous-asyncio-create-exec

    Detected ''create_subprocess_exec'' function with argument tainted by `event`
    object.'
  metadata:
    category: Security
    explanation: '## dangerous-asyncio-create-exec

      Detected ''create_subprocess_exec'' function with argument tainted by `event`
      object. If this data can be controlled by a malicious actor, it may be an instance
      of command injection. Audit the use of this call to ensure it is not controllable
      by an external resource. You may consider using ''shlex.escape()''.'
    subcategory: InputValidation
  severity: error
- id: Semgrep_python.aws-lambda.security.dangerous-asyncio-exec.dangerous-asyncio-exec
  languages:
  - python
  message: 'dangerous-asyncio-exec

    Detected subprocess function ''$LOOP.subprocess_exec'' with argument tainted by
    `event` object.'
  metadata:
    category: Security
    explanation: '## dangerous-asyncio-exec

      Detected subprocess function ''$LOOP.subprocess_exec'' with argument tainted
      by `event` object. If this data can be controlled by a malicious actor, it may
      be an instance of command injection. Audit the use of this call to ensure it
      is not controllable by an external resource. You may consider using ''shlex.escape()''.'
    subcategory: InputValidation
  severity: error
- id: Semgrep_python.aws-lambda.security.dangerous-asyncio-shell.dangerous-asyncio-shell
  languages:
  - python
  message: 'dangerous-asyncio-shell

    Detected asyncio subprocess function with argument tainted by `event` object.'
  metadata:
    category: Security
    explanation: '## dangerous-asyncio-shell

      Detected asyncio subprocess function with argument tainted by `event` object.
      If this data can be controlled by a malicious actor, it may be an instance of
      command injection. Audit the use of this call to ensure it is not controllable
      by an external resource. You may consider using ''shlex.escape()''.'
    subcategory: InputValidation
  severity: error
- id: Semgrep_python.aws-lambda.security.dangerous-spawn-process.dangerous-spawn-process
  languages:
  - python
  message: 'dangerous-spawn-process

    Detected `os` function with argument tainted by `event` object.'
  metadata:
    category: Security
    explanation: '## dangerous-spawn-process

      Detected `os` function with argument tainted by `event` object. This is dangerous
      if external data can reach this function call because it allows a malicious
      actor to execute commands. Ensure no external data reaches here.'
    subcategory: InputValidation
  severity: error
- id: Semgrep_python.aws-lambda.security.dangerous-subprocess-use.dangerous-subprocess-use
  languages:
  - python
  message: 'dangerous-subprocess-use

    Detected subprocess function with argument tainted by an `event` object.'
  metadata:
    category: Security
    explanation: '## dangerous-subprocess-use

      Detected subprocess function with argument tainted by an `event` object.  If
      this data can be controlled by a malicious actor, it may be an instance of command
      injection. The default option for `shell` is False, and this is secure by default.
      Consider removing the `shell=True` or setting it to False explicitely. Using
      `shell=False` means you have to split the command string into an array of strings
      for the command and its arguments. You may consider using ''shlex.split()''
      for this purpose.'
    subcategory: InputValidation
  severity: error
- id: Semgrep_python.aws-lambda.security.dangerous-system-call.dangerous-system-call
  languages:
  - python
  message: 'dangerous-system-call

    Detected `os` function with argument tainted by `event` object.'
  metadata:
    category: Security
    explanation: '## dangerous-system-call

      Detected `os` function with argument tainted by `event` object. This is dangerous
      if external data can reach this function call because it allows a malicious
      actor to execute commands. Use the ''subprocess'' module instead, which is easier
      to use without accidentally exposing a command injection vulnerability.'
    subcategory: InputValidation
  severity: error
- id: Semgrep_python.aws-lambda.security.dynamodb-filter-injection.dynamodb-filter-injection
  languages:
  - python
  message: 'dynamodb-filter-injection

    Detected DynamoDB query filter that is tainted by `$EVENT` object.'
  metadata:
    category: Security
    explanation: '## dynamodb-filter-injection

      Detected DynamoDB query filter that is tainted by `$EVENT` object. This could
      lead to NoSQL injection if the variable is user-controlled and not properly
      sanitized. Explicitly assign query params instead of passing data from `$EVENT`
      directly to DynamoDB client.'
    subcategory: InputValidation
  severity: error
- id: Semgrep_python.aws-lambda.security.mysql-sqli.mysql-sqli
  languages:
  - python
  message: 'mysql-sqli

    Detected SQL statement that is tainted by `event` object.'
  metadata:
    category: Security
    explanation: '## mysql-sqli

      Detected SQL statement that is tainted by `event` object. This could lead to
      SQL injection if the variable is user-controlled and not properly sanitized.
      In order to prevent SQL injection, use parameterized queries or prepared statements
      instead. You can use parameterized statements like so: `cursor.execute(''SELECT
      * FROM projects WHERE status = %s'', (''active''))`'
    subcategory: InputValidation
  severity: warning
- id: Semgrep_python.aws-lambda.security.psycopg-sqli.psycopg-sqli
  languages:
  - python
  message: 'psycopg-sqli

    Detected SQL statement that is tainted by `event` object.'
  metadata:
    category: Security
    explanation: '## psycopg-sqli

      Detected SQL statement that is tainted by `event` object. This could lead to
      SQL injection if the variable is user-controlled and not properly sanitized.
      In order to prevent SQL injection, use parameterized queries or prepared statements
      instead. You can use parameterized statements like so: `cursor.execute(''SELECT
      * FROM projects WHERE status = %s'', ''active'')`'
    subcategory: InputValidation
  severity: warning
- id: Semgrep_python.aws-lambda.security.pymssql-sqli.pymssql-sqli
  languages:
  - python
  message: 'pymssql-sqli

    Detected SQL statement that is tainted by `event` object.'
  metadata:
    category: Security
    explanation: '## pymssql-sqli

      Detected SQL statement that is tainted by `event` object. This could lead to
      SQL injection if the variable is user-controlled and not properly sanitized.
      In order to prevent SQL injection, use parameterized queries or prepared statements
      instead. You can use parameterized statements like so: `cursor.execute(''SELECT
      * FROM projects WHERE status = %s'', ''active'')`'
    subcategory: InputValidation
  severity: warning
- id: Semgrep_python.aws-lambda.security.pymysql-sqli.pymysql-sqli
  languages:
  - python
  message: 'pymysql-sqli

    Detected SQL statement that is tainted by `event` object.'
  metadata:
    category: Security
    explanation: '## pymysql-sqli

      Detected SQL statement that is tainted by `event` object. This could lead to
      SQL injection if the variable is user-controlled and not properly sanitized.
      In order to prevent SQL injection, use parameterized queries or prepared statements
      instead. You can use parameterized statements like so: `cursor.execute(''SELECT
      * FROM projects WHERE status = %s'', (''active''))`'
    subcategory: InputValidation
  severity: warning
- id: Semgrep_python.aws-lambda.security.sqlalchemy-sqli.sqlalchemy-sqli
  languages:
  - python
  message: 'sqlalchemy-sqli

    Detected SQL statement that is tainted by `event` object.'
  metadata:
    category: Security
    explanation: '## sqlalchemy-sqli

      Detected SQL statement that is tainted by `event` object. This could lead to
      SQL injection if the variable is user-controlled and not properly sanitized.
      In order to prevent SQL injection, use parameterized queries or prepared statements
      instead. You can use parameterized statements like so: `cursor.execute(''SELECT
      * FROM projects WHERE status = ?'', ''active'')`'
    subcategory: InputValidation
  severity: warning
- id: Semgrep_python.aws-lambda.security.tainted-code-exec.tainted-code-exec
  languages:
  - python
  message: 'tainted-code-exec

    Detected the use of `exec/eval`.This can be dangerous if used to evaluate dynamic
    content.'
  metadata:
    category: Security
    explanation: '## tainted-code-exec

      Detected the use of `exec/eval`.This can be dangerous if used to evaluate dynamic
      content. If this content can be input from outside the program, this may be
      a code injection vulnerability. Ensure evaluated content is not definable by
      external sources.'
    subcategory: InputValidation
  severity: warning
- id: Semgrep_python.aws-lambda.security.tainted-html-response.tainted-html-response
  languages:
  - python
  message: 'tainted-html-response

    Detected user input flowing into an HTML response.'
  metadata:
    category: Security
    explanation: '## tainted-html-response

      Detected user input flowing into an HTML response. You may be accidentally bypassing
      secure methods of rendering HTML by manually constructing HTML and this could
      create a cross-site scripting vulnerability, which could let attackers steal
      sensitive user data.'
    subcategory: InputValidation
  severity: warning
- id: Semgrep_python.aws-lambda.security.tainted-html-string.tainted-html-string
  languages:
  - python
  message: 'tainted-html-string

    Detected user input flowing into a manually constructed HTML string.'
  metadata:
    category: Security
    explanation: '## tainted-html-string

      Detected user input flowing into a manually constructed HTML string. You may
      be accidentally bypassing secure methods of rendering HTML by manually constructing
      HTML and this could create a cross-site scripting vulnerability, which could
      let attackers steal sensitive user data. To be sure this is safe, check that
      the HTML is rendered safely. Otherwise, use templates which will safely render
      HTML instead.'
    subcategory: InputValidation
  severity: warning
- id: Semgrep_python.aws-lambda.security.tainted-pickle-deserialization.tainted-pickle-deserialization
  languages:
  - python
  message: 'tainted-pickle-deserialization

    Avoid using `pickle`, which is known to lead to code execution vulnerabilities.'
  metadata:
    category: Security
    explanation: '## tainted-pickle-deserialization

      Avoid using `pickle`, which is known to lead to code execution vulnerabilities.
      When unpickling, the serialized data could be manipulated to run arbitrary code.
      Instead, consider serializing the relevant data as JSON or a similar text-based
      serialization format.'
    subcategory: InputValidation
  severity: warning
- id: Semgrep_python.aws-lambda.security.tainted-sql-string.tainted-sql-string
  languages:
  - python
  message: 'tainted-sql-string

    Detected user input used to manually construct a SQL string.'
  metadata:
    category: Security
    explanation: '## tainted-sql-string

      Detected user input used to manually construct a SQL string. This is usually
      bad practice because manual construction could accidentally result in a SQL
      injection. An attacker could use a SQL injection to steal or modify contents
      of the database. Instead, use a parameterized query which is available by default
      in most database engines. Alternatively, consider using an object-relational
      mapper (ORM) such as Sequelize which will protect your queries.'
    subcategory: InputValidation
  severity: error
- id: Semgrep_python.boto3.security.hardcoded-token.hardcoded-token
  languages:
  - python
  message: 'hardcoded-token

    A hard-coded credential was detected.'
  metadata:
    category: Security
    explanation: '## hardcoded-token

      A hard-coded credential was detected. It is not recommended to store credentials
      in source-code, as this risks secrets being leaked and used by either an internal
      or external malicious adversary. It is recommended to use environment variables
      to securely provide credentials or retrieve credentials from a secure vault
      or HSM (Hardware Security Module).'
    subcategory: Auth
  severity: warning
- id: Semgrep_python.cryptography.security.empty-aes-key.empty-aes-key
  languages:
  - python
  message: 'empty-aes-key

    Potential empty AES encryption key.'
  metadata:
    category: Security
    explanation: '## empty-aes-key

      Potential empty AES encryption key. Using an empty key in AES encryption can
      result in weak encryption and may allow attackers to easily decrypt sensitive
      data. Ensure that a strong, non-empty key is used for AES encryption.'
    subcategory: Other
  severity: warning
- id: Semgrep_python.cryptography.security.insecure-cipher-algorithms-arc4.insecure-cipher-algorithm-arc4
  languages:
  - python
  message: 'insecure-cipher-algorithm-arc4

    ARC4 (Alleged RC4) is a stream cipher with serious weaknesses in its initial stream
    output.'
  metadata:
    category: Security
    explanation: '## insecure-cipher-algorithm-arc4

      ARC4 (Alleged RC4) is a stream cipher with serious weaknesses in its initial
      stream output.  Its use is strongly discouraged. ARC4 does not use mode constructions.
      Use a strong symmetric cipher such as EAS instead. With the `cryptography` package
      it is recommended to use the `Fernet` which is a secure implementation of AES
      in CBC mode with a 128-bit key.  Alternatively, keep using the `Cipher` class
      from the hazmat primitives but use the AES algorithm instead.'
    subcategory: Visibility
  severity: warning
- id: Semgrep_python.cryptography.security.insecure-cipher-algorithms-blowfish.insecure-cipher-algorithm-blowfish
  languages:
  - python
  message: 'insecure-cipher-algorithm-blowfish

    Blowfish is a block cipher developed by Bruce Schneier.'
  metadata:
    category: Security
    explanation: '## insecure-cipher-algorithm-blowfish

      Blowfish is a block cipher developed by Bruce Schneier. It is known to be susceptible
      to attacks when using weak keys.  The author has recommended that users of Blowfish
      move to newer algorithms such as AES. With the `cryptography` package it is
      recommended to use `Fernet` which is a secure implementation of AES in CBC mode
      with a 128-bit key.  Alternatively, keep using the `Cipher` class from the hazmat
      primitives but use the AES algorithm instead.'
    subcategory: Visibility
  severity: warning
- id: Semgrep_python.cryptography.security.insecure-cipher-algorithms.insecure-cipher-algorithm-idea
  languages:
  - python
  message: 'insecure-cipher-algorithm-idea

    IDEA (International Data Encryption Algorithm) is a block cipher created in 1991.  It
    is an optional component of the OpenPGP standard.'
  metadata:
    category: Security
    explanation: '## insecure-cipher-algorithm-idea

      IDEA (International Data Encryption Algorithm) is a block cipher created in
      1991.  It is an optional component of the OpenPGP standard. This cipher is susceptible
      to attacks when using weak keys.  It is recommended that you do not use this
      cipher for new applications. Use a strong symmetric cipher such as EAS instead.
      With the `cryptography` package it is recommended to use `Fernet` which is a
      secure implementation of AES in CBC mode with a 128-bit key.  Alternatively,
      keep using the `Cipher` class from the hazmat primitives but use the AES algorithm
      instead.'
    subcategory: Visibility
  severity: warning
- id: Semgrep_python.cryptography.security.insecure-cipher-mode-ecb.insecure-cipher-mode-ecb
  languages:
  - python
  message: 'insecure-cipher-mode-ecb

    ECB (Electronic Code Book) is the simplest mode of operation for block ciphers.'
  metadata:
    category: Security
    explanation: '## insecure-cipher-mode-ecb

      ECB (Electronic Code Book) is the simplest mode of operation for block ciphers.  Each
      block of data is encrypted in the same way.  This means identical plaintext
      blocks will always result in identical ciphertext blocks, which can leave significant
      patterns in the output. Use a different, cryptographically strong mode instead,
      such as GCM.'
    subcategory: Visibility
  severity: warning
- id: Semgrep_python.cryptography.security.insecure-hash-algorithms-md5.insecure-hash-algorithm-md5
  languages:
  - python
  message: 'insecure-hash-algorithm-md5

    Detected MD5 hash algorithm which is considered insecure.'
  metadata:
    category: Security
    explanation: '## insecure-hash-algorithm-md5

      Detected MD5 hash algorithm which is considered insecure. MD5 is not collision
      resistant and is therefore not suitable as a cryptographic signature. Use SHA256
      or SHA3 instead.'
    subcategory: Visibility
  severity: warning
- id: Semgrep_python.cryptography.security.insecure-hash-algorithms.insecure-hash-algorithm-sha1
  languages:
  - python
  message: 'insecure-hash-algorithm-sha1

    Detected SHA1 hash algorithm which is considered insecure.'
  metadata:
    category: Security
    explanation: '## insecure-hash-algorithm-sha1

      Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision
      resistant and is therefore not suitable as a cryptographic signature. Use SHA256
      or SHA3 instead.'
    subcategory: Visibility
  severity: warning
- id: Semgrep_python.cryptography.security.insufficient-dsa-key-size.insufficient-dsa-key-size
  languages:
  - python
  message: 'insufficient-dsa-key-size

    Detected an insufficient key size for DSA. NIST recommends a key size of 2048
    or higher.'
  metadata:
    category: Security
    explanation: '## insufficient-dsa-key-size

      Detected an insufficient key size for DSA. NIST recommends a key size of 2048
      or higher.'
    subcategory: Visibility
  severity: warning
- id: Semgrep_python.cryptography.security.insufficient-ec-key-size.insufficient-ec-key-size
  languages:
  - python
  message: 'insufficient-ec-key-size

    Detected an insufficient curve size for EC. NIST recommends a key size of 224
    or higher.'
  metadata:
    category: Security
    explanation: '## insufficient-ec-key-size

      Detected an insufficient curve size for EC. NIST recommends a key size of 224
      or higher. For example, use ''ec.SECP256R1''.'
    subcategory: Visibility
  severity: warning
- id: Semgrep_python.cryptography.security.insufficient-rsa-key-size.insufficient-rsa-key-size
  languages:
  - python
  message: 'insufficient-rsa-key-size

    Detected an insufficient key size for RSA. NIST recommends a key size of 2048
    or higher.'
  metadata:
    category: Security
    explanation: '## insufficient-rsa-key-size

      Detected an insufficient key size for RSA. NIST recommends a key size of 2048
      or higher.'
    subcategory: Visibility
  severity: warning
- id: Semgrep_python.cryptography.security.mode-without-authentication.crypto-mode-without-authentication
  languages:
  - python
  message: 'crypto-mode-without-authentication

    An encryption mode of operation is being used without proper message authentication.'
  metadata:
    category: Security
    explanation: '## crypto-mode-without-authentication

      An encryption mode of operation is being used without proper message authentication.
      This can potentially result in the encrypted content to be decrypted by an attacker.
      Consider instead use an AEAD mode of operation like GCM. '
    subcategory: Visibility
  severity: error
- id: Semgrep_python.distributed.security.require-encryption
  languages:
  - python
  message: 'require-encryption

    Initializing a security context for Dask (`distributed`) without "require_encryption"
    keyword argument may silently fail to provide security.'
  metadata:
    category: Security
    explanation: '## require-encryption

      Initializing a security context for Dask (`distributed`) without "require_encryption"
      keyword argument may silently fail to provide security.'
    subcategory: Visibility
  severity: warning
- id: Semgrep_python.django.security.audit.avoid-insecure-deserialization.avoid-insecure-deserialization
  languages:
  - python
  message: 'avoid-insecure-deserialization

    Avoid using insecure deserialization library, backed by `pickle`, `_pickle`, `cpickle`,
    `dill`, `shelve`, or `yaml`, which are known to lead to remote code execution
    vulnerabilities.'
  metadata:
    category: Security
    explanation: '## avoid-insecure-deserialization

      Avoid using insecure deserialization library, backed by `pickle`, `_pickle`,
      `cpickle`, `dill`, `shelve`, or `yaml`, which are known to lead to remote code
      execution vulnerabilities.'
    subcategory: InputValidation
  severity: error
- id: Semgrep_python.django.security.audit.avoid-mark-safe.avoid-mark-safe
  languages:
  - python
  message: 'avoid-mark-safe

    ''mark_safe()'' is used to mark a string as "safe" for HTML output.'
  metadata:
    category: Security
    explanation: '## avoid-mark-safe

      ''mark_safe()'' is used to mark a string as "safe" for HTML output. This disables
      escaping and could therefore subject the content to XSS attacks. Use ''django.utils.html.format_html()''
      to build HTML for rendering instead.'
    subcategory: InputValidation
  severity: warning
- id: Semgrep_python.django.security.audit.csrf-exempt.no-csrf-exempt
  languages:
  - python
  message: 'no-csrf-exempt

    Detected usage of @csrf_exempt, which indicates that there is no CSRF token set
    for this route.'
  metadata:
    category: Security
    explanation: '## no-csrf-exempt

      Detected usage of @csrf_exempt, which indicates that there is no CSRF token
      set for this route. This could lead to an attacker manipulating the user''s
      account and exfiltration of private data. Instead, create a function without
      this decorator.'
    subcategory: InsecureStorage
  severity: warning
- id: Semgrep_python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql
  languages:
  - python
  message: 'custom-expression-as-sql

    Detected a Custom Expression ''''$EXPRESSION'''' calling ''''as_sql(...).''''
    This could lead to SQL injection, which can result in attackers exfiltrating sensitive
    data.'
  metadata:
    category: Security
    explanation: '## custom-expression-as-sql

      Detected a Custom Expression ''''$EXPRESSION'''' calling ''''as_sql(...).''''
      This could lead to SQL injection, which can result in attackers exfiltrating
      sensitive data. Instead, ensure no user input enters this function or that user
      input is properly sanitized.'
    subcategory: InputValidation
  severity: warning
- id: Semgrep_python.django.security.audit.django-rest-framework.missing-throttle-config.missing-throttle-config
  languages:
  - python
  message: 'missing-throttle-config

    Django REST framework configuration is missing default rate- limiting options.'
  metadata:
    category: Security
    explanation: '## missing-throttle-config

      Django REST framework configuration is missing default rate- limiting options.
      This could inadvertently allow resource starvation or Denial of Service (DoS)
      attacks. Add ''DEFAULT_THROTTLE_CLASSES'' and ''DEFAULT_THROTTLE_RATES'' to
      add rate-limiting to your application.'
    subcategory: Other
  severity: warning
- id: Semgrep_python.django.security.audit.extends-custom-expression.extends-custom-expression
  languages:
  - python
  message: 'extends-custom-expression

    Found extension of custom expression: $CLASS. Extending expressions in this way
    could inadvertently lead to a SQL injection vulnerability, which can result in
    attackers exfiltrating sensitive data.'
  metadata:
    category: Security
    explanation: '## extends-custom-expression

      Found extension of custom expression: $CLASS. Extending expressions in this
      way could inadvertently lead to a SQL injection vulnerability, which can result
      in attackers exfiltrating sensitive data. Instead, ensure no user input enters
      this function or that user input is properly sanitized.'
    subcategory: InputValidation
  severity: warning
- id: Semgrep_python.django.security.audit.query-set-extra.avoid-query-set-extra
  languages:
  - python
  message: 'avoid-query-set-extra

    QuerySet.extra'' does not provide safeguards against SQL injection and requires
    very careful use.'
  metadata:
    category: Security
    explanation: '## avoid-query-set-extra

      QuerySet.extra'' does not provide safeguards against SQL injection and requires
      very careful use. SQL injection can lead to critical data being stolen by attackers.
      Instead of using ''.extra'', use the Django ORM and parameterized queries such
      as `People.objects.get(name=''Bob'')`.'
    subcategory: InputValidation
  severity: warning
- id: Semgrep_python.django.security.audit.raw-query.avoid-raw-sql
  languages:
  - python
  message: 'avoid-raw-sql

    Detected the use of ''RawSQL'' or ''raw'' indicating the execution of a non-parameterized
    SQL query.'
  metadata:
    category: Security
    explanation: '## avoid-raw-sql

      Detected the use of ''RawSQL'' or ''raw'' indicating the execution of a non-parameterized
      SQL query. This could lead to a SQL injection and therefore protected information
      could be leaked. Instead, use Django ORM and parameterized queries before raw
      SQL. An example of using the Django ORM is: `People.objects.get(name=''Bob'')`'
    subcategory: InputValidation
  severity: warning
- id: Semgrep_python.django.security.audit.secure-cookies.django-secure-set-cookie
  languages:
  - python
  message: 'django-secure-set-cookie

    Django cookies should be handled securely by setting secure=True, httponly=True,
    and samesite=''Lax'' in response.set_cookie(...). If your situation calls for
    different settings, explicitly disable the setting.'
  metadata:
    category: Security
    explanation: '## django-secure-set-cookie

      Django cookies should be handled securely by setting secure=True, httponly=True,
      and samesite=''Lax'' in response.set_cookie(...). If your situation calls for
      different settings, explicitly disable the setting. If you want to send the
      cookie over http, set secure=False. If you want to let client-side JavaScript
      read the cookie, set httponly=False. If you want to attach cookies to requests
      for external sites, set samesite=None.'
    subcategory: Other
  severity: warning
- id: Semgrep_python.django.security.audit.templates.debug-template-tag.debug-template-tag
  languages:
  - python
  message: 'debug-template-tag

    Detected a debug template tag in a Django template.'
  metadata:
    category: Security
    explanation: '## debug-template-tag

      Detected a debug template tag in a Django template. This dumps debugging information
      to the page when debug mode is enabled. Showing debug information to users is
      dangerous because it may reveal information about your environment that malicious
      actors can use to gain access to the system. Remove the debug tag.'
    subcategory: Other
  severity: warning
- id: Semgrep_python.django.security.audit.unvalidated-password.unvalidated-password
  languages:
  - python
  message: 'unvalidated-password

    The password on ''$MODEL'' is being set without validating the password.'
  metadata:
    category: Security
    explanation: '## unvalidated-password

      The password on ''$MODEL'' is being set without validating the password. Call
      django.contrib.auth.password_validation.validate_password() with validation
      functions before setting the password. See https://docs.djangoproject.com/en/3.0/topics/auth/passwords/
      for more information.'
    subcategory: Auth
  severity: warning
- id: Semgrep_python.django.security.audit.xss.class-extends-safestring.class-extends-safestring
  languages:
  - python
  message: 'class-extends-safestring

    Found a class extending ''SafeString'', ''SafeText'' or ''SafeData''. These classes
    are for bypassing the escaping engine built in to Django and should not be used
    directly.'
  metadata:
    category: Security
    explanation: '## class-extends-safestring

      Found a class extending ''SafeString'', ''SafeText'' or ''SafeData''. These
      classes are for bypassing the escaping engine built in to Django and should
      not be used directly. Improper use of this class exposes your application to
      cross-site scripting (XSS) vulnerabilities. If you need this functionality,
      use ''mark_safe'' instead and ensure no user data can reach it.'
    subcategory: InputValidation
  severity: warning
- id: Semgrep_python.django.security.audit.xss.context-autoescape-off.context-autoescape-off
  languages:
  - python
  message: 'context-autoescape-off

    Detected a Context with autoescape disabled.'
  metadata:
    category: Security
    explanation: '## context-autoescape-off

      Detected a Context with autoescape disabled. If you are rendering any web pages,
      this exposes your application to cross-site scripting (XSS) vulnerabilities.
      Remove ''autoescape: False'' or set it to ''True''.'
    subcategory: InputValidation
  severity: warning
- id: Semgrep_python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse
  languages:
  - python
  message: 'direct-use-of-httpresponse

    Detected data rendered directly to the end user via ''HttpResponse'' or a similar
    object.'
  metadata:
    category: Security
    explanation: '## direct-use-of-httpresponse

      Detected data rendered directly to the end user via ''HttpResponse'' or a similar
      object. This bypasses Django''s built-in cross-site scripting (XSS) defenses
      and could result in an XSS vulnerability. Use Django''s template engine to safely
      render HTML.'
    subcategory: InputValidation
  severity: warning
- id: Semgrep_python.django.security.audit.xss.filter-with-is-safe.filter-with-is-safe
  languages:
  - python
  message: 'filter-with-is-safe

    Detected Django filters flagged with ''is_safe''. ''is_safe'' tells Django not
    to apply escaping on the value returned by this filter (although the input is
    escaped). Used improperly, ''is_safe'' could expose your application to cross-site
    scripting (XSS) vulnerabilities.'
  metadata:
    category: Security
    explanation: '## filter-with-is-safe

      Detected Django filters flagged with ''is_safe''. ''is_safe'' tells Django not
      to apply escaping on the value returned by this filter (although the input is
      escaped). Used improperly, ''is_safe'' could expose your application to cross-site
      scripting (XSS) vulnerabilities. Ensure this filter does not 1) add HTML characters,
      2) remove characters, or 3) use external data in any way. Consider instead removing
      ''is_safe'' and explicitly marking safe content with ''mark_safe()''.'
    subcategory: InputValidation
  severity: warning
- id: Semgrep_python.django.security.audit.xss.formathtml-fstring-parameter.formathtml-fstring-parameter
  languages:
  - python
  message: 'formathtml-fstring-parameter

    Passing a formatted string as first parameter to `format_html` disables the proper
    encoding of variables.'
  metadata:
    category: Security
    explanation: '## formathtml-fstring-parameter

      Passing a formatted string as first parameter to `format_html` disables the
      proper encoding of variables. Any HTML in the first parameter is not encoded.
      Using a formatted string as first parameter obscures which parameters are encoded.
      Correct use of `format_html` is passing a static format string as first parameter,
      and the variables to substitute as subsequent parameters.'
    subcategory: InputValidation
  severity: warning
- id: Semgrep_python.django.security.audit.xss.global-autoescape-off.global-autoescape-off
  languages:
  - python
  message: 'global-autoescape-off

    Autoescape is globally disbaled for this Django application.'
  metadata:
    category: Security
    explanation: '## global-autoescape-off

      Autoescape is globally disbaled for this Django application. If you are rendering
      any web pages, this exposes your application to cross-site scripting (XSS) vulnerabilities.
      Remove ''autoescape: False'' or set it to ''True''.'
    subcategory: InputValidation
  severity: warning
- id: Semgrep_python.django.security.audit.xss.html-magic-method.html-magic-method
  languages:
  - python
  message: 'html-magic-method

    The `__html__` method indicates to the Django template engine that the value is
    ''safe'' for rendering.'
  metadata:
    category: Security
    explanation: '## html-magic-method

      The `__html__` method indicates to the Django template engine that the value
      is ''safe'' for rendering. This means that normal HTML escaping will not be
      applied to the return value. This exposes your application to cross-site scripting
      (XSS) vulnerabilities. If you need to render raw HTML, consider instead using
      `mark_safe()` which more clearly marks the intent to render raw HTML than a
      class with a magic method.'
    subcategory: InputValidation
  severity: warning
- id: Semgrep_python.django.security.audit.xss.html-safe.html-safe
  languages:
  - python
  message: 'html-safe

    `html_safe()` add the `__html__` magic method to the provided class.'
  metadata:
    category: Security
    explanation: '## html-safe

      `html_safe()` add the `__html__` magic method to the provided class. The `__html__`
      method indicates to the Django template engine that the value is ''safe'' for
      rendering. This means that normal HTML escaping will not be applied to the return
      value. This exposes your application to cross-site scripting (XSS) vulnerabilities.
      If you need to render raw HTML, consider instead using `mark_safe()` which more
      clearly marks the intent to render raw HTML than a class with a magic method.'
    subcategory: InputValidation
  severity: warning
- id: Semgrep_python.django.security.audit.xss.template-autoescape-off.template-autoescape-off
  languages:
  - python
  message: 'template-autoescape-off

    Detected a template block where autoescaping is explicitly disabled with ''{%
    autoescape off %}''. This allows rendering of raw HTML in this segment.'
  metadata:
    category: Security
    explanation: '## template-autoescape-off

      Detected a template block where autoescaping is explicitly disabled with ''{%
      autoescape off %}''. This allows rendering of raw HTML in this segment. Turn
      autoescaping on to prevent cross-site scripting (XSS). If you must do this,
      consider instead, using `mark_safe` in Python code.'
    subcategory: InputValidation
  severity: warning
- id: Semgrep_python.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape
  languages:
  - python
  message: 'template-blocktranslate-no-escape

    Translated strings will not be escaped when rendered in a template.'
  metadata:
    category: Security
    explanation: '## template-blocktranslate-no-escape

      Translated strings will not be escaped when rendered in a template. This leads
      to a vulnerability where translators could include malicious script tags in
      their translations. Consider using `force_escape` to explicitly escape a translated
      text.'
    subcategory: InputValidation
  severity: info
- id: Semgrep_python.django.security.audit.xss.template-href-var.template-href-var
  languages:
  - python
  message: 'template-href-var

    Detected a template variable used in an anchor tag with the ''href'' attribute.'
  metadata:
    category: Security
    explanation: '## template-href-var

      Detected a template variable used in an anchor tag with the ''href'' attribute.
      This allows a malicious actor to input the ''javascript:'' URI and is subject
      to cross- site scripting (XSS) attacks. Use the ''url'' template tag to safely
      generate a URL. You may also consider setting the Content Security Policy (CSP)
      header.'
    subcategory: InputValidation
  severity: warning
- id: Semgrep_python.django.security.audit.xss.template-translate-as-no-escape.template-translate-as-no-escape
  languages:
  - python
  message: 'template-translate-as-no-escape

    Translated strings will not be escaped when rendered in a template.'
  metadata:
    category: Security
    explanation: '## template-translate-as-no-escape

      Translated strings will not be escaped when rendered in a template. This leads
      to a vulnerability where translators could include malicious script tags in
      their translations. Consider using `force_escape` to explicitly escape a translated
      text.'
    subcategory: InputValidation
  severity: info
- id: Semgrep_python.django.security.audit.xss.template-var-unescaped-with-safeseq.template-var-unescaped-with-safeseq
  languages:
  - python
  message: 'template-var-unescaped-with-safeseq

    Detected a template variable where autoescaping is explicitly disabled with ''|
    safeseq'' filter.'
  metadata:
    category: Security
    explanation: '## template-var-unescaped-with-safeseq

      Detected a template variable where autoescaping is explicitly disabled with
      ''| safeseq'' filter. This allows rendering of raw HTML in this segment. Ensure
      no user data is rendered here, otherwise this is a cross-site scripting (XSS)
      vulnerability. If you must do this, use `mark_safe` in your Python code.'
    subcategory: InputValidation
  severity: warning
- id: Semgrep_python.django.security.audit.xss.var-in-script-tag.var-in-script-tag
  languages:
  - python
  message: 'var-in-script-tag

    Detected a template variable used in a script tag.'
  metadata:
    category: Security
    explanation: '## var-in-script-tag

      Detected a template variable used in a script tag. Although template variables
      are HTML escaped, HTML escaping does not always prevent cross-site scripting
      (XSS) attacks when used directly in JavaScript. If you need this data on the
      rendered page, consider placing it in the HTML portion (outside of a script
      tag). Alternatively, use a JavaScript-specific encoder, such as the one available
      in OWASP ESAPI. For Django, you may also consider using the ''json_script''
      template tag and retrieving the data in your script by using the element ID
      (e.g., `document.getElementById`).'
    subcategory: InputValidation
  severity: error
- id: Semgrep_python.django.security.django-no-csrf-token.django-no-csrf-token
  languages:
  - python
  message: 'django-no-csrf-token

    Manually-created forms in django templates should specify a csrf_token to prevent
    CSRF attacks'
  metadata:
    category: Security
    explanation: '## django-no-csrf-token

      Manually-created forms in django templates should specify a csrf_token to prevent
      CSRF attacks'
    subcategory: ''
  severity: warning
- id: Semgrep_python.django.security.django-using-request-post-after-is-valid.django-using-request-post-after-is-valid
  languages:
  - python
  message: 'django-using-request-post-after-is-valid

    Use $FORM.cleaned_data[] instead of request.POST[] after form.is_valid() has been
    executed to only access sanitized data'
  metadata:
    category: Security
    explanation: '## django-using-request-post-after-is-valid

      Use $FORM.cleaned_data[] instead of request.POST[] after form.is_valid() has
      been executed to only access sanitized data'
    subcategory: ''
  severity: warning
- id: Semgrep_python.django.security.globals-as-template-context.globals-as-template-context
  languages:
  - python
  message: 'globals-as-template-context

    Using ''globals()'' as a context to ''render(...)'' is extremely dangerous.'
  metadata:
    category: Security
    explanation: '## globals-as-template-context

      Using ''globals()'' as a context to ''render(...)'' is extremely dangerous.
      This exposes Python functions to the template that were not meant to be exposed.
      An attacker could use these functions to execute code that was not intended
      to run and could compromise the application. (This is server-side template injection
      (SSTI)). Do not use ''globals()''. Instead, specify each variable in a dictionary
      or ''django.template.Context'' object, like ''{"var1": "hello"}'' and use that
      instead.'
    subcategory: InputValidation
  severity: error
- id: Semgrep_python.django.security.hashids-with-django-secret.hashids-with-django-secret
  languages:
  - python
  message: 'hashids-with-django-secret

    The Django secret key is used as salt in HashIDs. The HashID mechanism is not
    secure.'
  metadata:
    category: Security
    explanation: '## hashids-with-django-secret

      The Django secret key is used as salt in HashIDs. The HashID mechanism is not
      secure. By observing sufficient HashIDs, the salt used to construct them can
      be recovered. This means the Django secret key can be obtained by attackers,
      through the HashIDs.'
    subcategory: Cryptography
  severity: error
- id: Semgrep_python.django.security.injection.code.globals-misuse-code-execution.globals-misuse-code-execution
  languages:
  - python
  message: 'globals-misuse-code-execution

    Found request data as an index to ''globals()''. This is extremely dangerous because
    it allows an attacker to execute arbitrary code on the system.'
  metadata:
    category: Security
    explanation: '## globals-misuse-code-execution

      Found request data as an index to ''globals()''. This is extremely dangerous
      because it allows an attacker to execute arbitrary code on the system. Refactor
      your code not to use ''globals()''.'
    subcategory: InputValidation
  severity: warning
- id: Semgrep_python.django.security.injection.code.user-eval-format-string.user-eval-format-string
  languages:
  - python
  message: 'user-eval-format-string

    Found user data in a call to ''eval''. This is extremely dangerous because it
    can enable an attacker to execute remote code.'
  metadata:
    category: Security
    explanation: '## user-eval-format-string

      Found user data in a call to ''eval''. This is extremely dangerous because it
      can enable an attacker to execute remote code. See https://owasp.org/www-community/attacks/Code_Injection
      for more information.'
    subcategory: InputValidation
  severity: warning
- id: Semgrep_python.django.security.injection.code.user-eval.user-eval
  languages:
  - python
  message: 'user-eval

    Found user data in a call to ''eval''. This is extremely dangerous because it
    can enable an attacker to execute arbitrary remote code on the system.'
  metadata:
    category: Security
    explanation: '## user-eval

      Found user data in a call to ''eval''. This is extremely dangerous because it
      can enable an attacker to execute arbitrary remote code on the system. Instead,
      refactor your code to not use ''eval'' and instead use a safe library for the
      specific functionality you need.'
    subcategory: InputValidation
  severity: warning
- id: Semgrep_python.django.security.injection.code.user-exec-format-string.user-exec-format-string
  languages:
  - python
  message: 'user-exec-format-string

    Found user data in a call to ''exec''. This is extremely dangerous because it
    can enable an attacker to execute arbitrary remote code on the system.'
  metadata:
    category: Security
    explanation: '## user-exec-format-string

      Found user data in a call to ''exec''. This is extremely dangerous because it
      can enable an attacker to execute arbitrary remote code on the system. Instead,
      refactor your code to not use ''eval'' and instead use a safe library for the
      specific functionality you need.'
    subcategory: InputValidation
  severity: warning
- id: Semgrep_python.django.security.injection.code.user-exec.user-exec
  languages:
  - python
  message: 'user-exec

    Found user data in a call to ''exec''. This is extremely dangerous because it
    can enable an attacker to execute arbitrary remote code on the system.'
  metadata:
    category: Security
    explanation: '## user-exec

      Found user data in a call to ''exec''. This is extremely dangerous because it
      can enable an attacker to execute arbitrary remote code on the system. Instead,
      refactor your code to not use ''eval'' and instead use a safe library for the
      specific functionality you need.'
    subcategory: InputValidation
  severity: warning
- id: Semgrep_python.django.security.injection.command.command-injection-os-system.command-injection-os-system
  languages:
  - python
  message: 'command-injection-os-system

    Request data detected in os.system.'
  metadata:
    category: Security
    explanation: '## command-injection-os-system

      Request data detected in os.system. This could be vulnerable to a command injection
      and should be avoided. If this must be done, use the ''subprocess'' module instead
      and pass the arguments as a list. See https://owasp.org/www-community/attacks/Command_Injection
      for more information.'
    subcategory: InputValidation
  severity: error
- id: Semgrep_python.django.security.injection.command.subprocess-injection.subprocess-injection
  languages:
  - python
  message: 'subprocess-injection

    Detected user input entering a `subprocess` call unsafely.'
  metadata:
    category: Security
    explanation: '## subprocess-injection

      Detected user input entering a `subprocess` call unsafely. This could result
      in a command injection vulnerability. An attacker could use this vulnerability
      to execute arbitrary commands on the host, which allows them to download malware,
      scan sensitive data, or run any command they wish on the server. Do not let
      users choose the command to run. In general, prefer to use Python API versions
      of system commands. If you must use subprocess, use a dictionary to allowlist
      a set of commands.'
    subcategory: InputValidation
  severity: error
- id: Semgrep_python.django.security.injection.csv-writer-injection.csv-writer-injection
  languages:
  - python
  message: 'csv-writer-injection

    Detected user input into a generated CSV file using the built-in `csv` module.'
  metadata:
    category: Security
    explanation: '## csv-writer-injection

      Detected user input into a generated CSV file using the built-in `csv` module.
      If user data is used to generate the data in this file, it is possible that
      an attacker could inject a formula when the CSV is imported into a spreadsheet
      application that runs an attacker script, which could steal data from the importing
      user or, at worst, install malware on the user''s computer. `defusedcsv` is
      a drop-in replacement with the same API that will attempt to mitigate formula
      injection attempts. You can use `defusedcsv` instead of `csv` to safely generate
      CSVs.'
    subcategory: InputValidation
  severity: error
- id: Semgrep_python.django.security.injection.email.xss-html-email-body.xss-html-email-body
  languages:
  - python
  message: 'xss-html-email-body

    Found request data in an EmailMessage that is set to use HTML. This is dangerous
    because HTML emails are susceptible to XSS. An attacker could inject data into
    this HTML email, causing XSS.'
  metadata:
    category: Security
    explanation: '## xss-html-email-body

      Found request data in an EmailMessage that is set to use HTML. This is dangerous
      because HTML emails are susceptible to XSS. An attacker could inject data into
      this HTML email, causing XSS.'
    subcategory: InputValidation
  severity: warning
- id: Semgrep_python.django.security.injection.email.xss-send-mail-html-message.xss-send-mail-html-message
  languages:
  - python
  message: 'xss-send-mail-html-message

    Found request data in ''send_mail(...)'' that uses ''html_message''. This is dangerous
    because HTML emails are susceptible to XSS. An attacker could inject data into
    this HTML email, causing XSS.'
  metadata:
    category: Security
    explanation: '## xss-send-mail-html-message

      Found request data in ''send_mail(...)'' that uses ''html_message''. This is
      dangerous because HTML emails are susceptible to XSS. An attacker could inject
      data into this HTML email, causing XSS.'
    subcategory: InputValidation
  severity: warning
- id: Semgrep_python.django.security.injection.mass-assignment.mass-assignment
  languages:
  - python
  message: 'mass-assignment

    Mass assignment detected.'
  metadata:
    category: Security
    explanation: '## mass-assignment

      Mass assignment detected. This can result in assignment to model fields that
      are unintended and can be exploited by an attacker. Instead of using ''**request.$W'',
      assign each field you want to edit individually to prevent mass assignment.
      You can read more about mass assignment at https://cheatsheetseries.owasp.org/cheatsheets/Mass_Assignment_Cheat_Sheet.html.'
    subcategory: UnexpectedBehaviour
  severity: warning
- id: Semgrep_python.django.security.injection.open-redirect.open-redirect
  languages:
  - python
  message: 'open-redirect

    Data from request ($DATA) is passed to redirect(). This is an open redirect and
    could be exploited.'
  metadata:
    category: Security
    explanation: '## open-redirect

      Data from request ($DATA) is passed to redirect(). This is an open redirect
      and could be exploited. Ensure you are redirecting to safe URLs by using django.utils.http.is_safe_url().
      See https://cwe.mitre.org/data/definitions/601.html for more information.'
    subcategory: InsecureStorage
  severity: warning
- id: Semgrep_python.django.security.injection.path-traversal.path-traversal-file-name.path-traversal-file-name
  languages:
  - python
  message: 'path-traversal-file-name

    Data from request is passed to a file name `$FILE`. This is a path traversal vulnerability,
    which can lead to sensitive data being leaked.'
  metadata:
    category: Security
    explanation: '## path-traversal-file-name

      Data from request is passed to a file name `$FILE`. This is a path traversal
      vulnerability, which can lead to sensitive data being leaked. To mitigate, consider
      using os.path.abspath or os.path.realpath or the pathlib library.'
    subcategory: InsecureStorage
  severity: warning
- id: Semgrep_python.django.security.injection.path-traversal.path-traversal-join.path-traversal-join
  languages:
  - python
  message: 'path-traversal-join

    Data from request is passed to os.path.join() and to open(). This is a path traversal
    vulnerability, which can lead to sensitive data being leaked.'
  metadata:
    category: Security
    explanation: '## path-traversal-join

      Data from request is passed to os.path.join() and to open(). This is a path
      traversal vulnerability, which can lead to sensitive data being leaked. To mitigate,
      consider using os.path.abspath or os.path.realpath or Path library.'
    subcategory: InsecureStorage
  severity: warning
- id: Semgrep_python.django.security.injection.path-traversal.path-traversal-open.path-traversal-open
  languages:
  - python
  message: 'path-traversal-open

    Found request data in a call to ''open''. Ensure the request data is validated
    or sanitized, otherwise it could result in path traversal attacks and therefore
    sensitive data being leaked.'
  metadata:
    category: Security
    explanation: '## path-traversal-open

      Found request data in a call to ''open''. Ensure the request data is validated
      or sanitized, otherwise it could result in path traversal attacks and therefore
      sensitive data being leaked. To mitigate, consider using os.path.abspath or
      os.path.realpath or the pathlib library.'
    subcategory: InsecureStorage
  severity: warning
- id: Semgrep_python.django.security.injection.raw-html-format.raw-html-format
  languages:
  - python
  message: 'raw-html-format

    Detected user input flowing into a manually constructed HTML string.'
  metadata:
    category: Security
    explanation: '## raw-html-format

      Detected user input flowing into a manually constructed HTML string. You may
      be accidentally bypassing secure methods of rendering HTML by manually constructing
      HTML and this could create a cross-site scripting vulnerability, which could
      let attackers steal sensitive user data. To be sure this is safe, check that
      the HTML is rendered safely. Otherwise, use templates (`django.shortcuts.render`)
      which will safely render HTML instead.'
    subcategory: InputValidation
  severity: warning
- id: Semgrep_python.django.security.injection.reflected-data-httpresponse.reflected-data-httpresponse
  languages:
  - python
  message: 'reflected-data-httpresponse

    Found user-controlled request data passed into HttpResponse.'
  metadata:
    category: Security
    explanation: '## reflected-data-httpresponse

      Found user-controlled request data passed into HttpResponse. This could be vulnerable
      to XSS, leading to attackers gaining access to user cookies and protected information.
      Ensure that the request data is properly escaped or sanitzed.'
    subcategory: InputValidation
  severity: warning
- id: Semgrep_python.django.security.injection.reflected-data-httpresponsebadrequest.reflected-data-httpresponsebadrequest
  languages:
  - python
  message: 'reflected-data-httpresponsebadrequest

    Found user-controlled request data passed into a HttpResponseBadRequest.'
  metadata:
    category: Security
    explanation: '## reflected-data-httpresponsebadrequest

      Found user-controlled request data passed into a HttpResponseBadRequest. This
      could be vulnerable to XSS, leading to attackers gaining access to user cookies
      and protected information. Ensure that the request data is properly escaped
      or sanitzed.'
    subcategory: InputValidation
  severity: warning
- id: Semgrep_python.django.security.injection.request-data-fileresponse.request-data-fileresponse
  languages:
  - python
  message: 'request-data-fileresponse

    Found user-controlled request data being passed into a file open, which is them
    passed as an argument into the FileResponse.'
  metadata:
    category: Security
    explanation: '## request-data-fileresponse

      Found user-controlled request data being passed into a file open, which is them
      passed as an argument into the FileResponse. This is dangerous because an attacker
      could specify an arbitrary file to read, which could result in leaking important
      data. Be sure to validate or sanitize the user-inputted filename in the request
      data before using it in FileResponse.'
    subcategory: InsecureStorage
  severity: warning
- id: Semgrep_python.django.security.injection.request-data-write.request-data-write
  languages:
  - python
  message: 'request-data-write

    Found user-controlled request data passed into ''.write(...)''. This could be
    dangerous if a malicious actor is able to control data into sensitive files.'
  metadata:
    category: Security
    explanation: '## request-data-write

      Found user-controlled request data passed into ''.write(...)''. This could be
      dangerous if a malicious actor is able to control data into sensitive files.
      For example, a malicious actor could force rolling of critical log files, or
      cause a denial-of-service by using up available disk space. Instead, ensure
      that request data is properly escaped or sanitized.'
    subcategory: InputValidation
  severity: warning
- id: Semgrep_python.django.security.injection.sql.sql-injection-extra.sql-injection-using-extra-where
  languages:
  - python
  message: 'sql-injection-using-extra-where

    User-controlled data from a request is passed to ''extra()''. This could lead
    to a SQL injection and therefore protected information could be leaked.'
  metadata:
    category: Security
    explanation: '## sql-injection-using-extra-where

      User-controlled data from a request is passed to ''extra()''. This could lead
      to a SQL injection and therefore protected information could be leaked. Instead,
      use parameterized queries or escape the user-controlled data by using `params`
      and not using quote placeholders in the SQL string.'
    subcategory: InputValidation
  severity: warning
- id: Semgrep_python.django.security.injection.sql.sql-injection-rawsql.sql-injection-using-rawsql
  languages:
  - python
  message: 'sql-injection-using-rawsql

    User-controlled data from request is passed to ''RawSQL()''. This could lead to
    a SQL injection and therefore protected information could be leaked.'
  metadata:
    category: Security
    explanation: '## sql-injection-using-rawsql

      User-controlled data from request is passed to ''RawSQL()''. This could lead
      to a SQL injection and therefore protected information could be leaked. Instead,
      use parameterized queries or escape the user-controlled data by using `params`
      and not using quote placeholders in the SQL string.'
    subcategory: InputValidation
  severity: warning
- id: Semgrep_python.django.security.injection.sql.sql-injection-using-db-cursor-execute.sql-injection-db-cursor-execute
  languages:
  - python
  message: 'sql-injection-db-cursor-execute

    User-controlled data from a request is passed to ''execute()''. This could lead
    to a SQL injection and therefore protected information could be leaked.'
  metadata:
    category: Security
    explanation: '## sql-injection-db-cursor-execute

      User-controlled data from a request is passed to ''execute()''. This could lead
      to a SQL injection and therefore protected information could be leaked. Instead,
      use django''s QuerySets, which are built with query parameterization and therefore
      not vulnerable to sql injection. For example, you could use `Entry.objects.filter(date=2006)`.'
    subcategory: InputValidation
  severity: warning
- id: Semgrep_python.django.security.injection.sql.sql-injection-using-raw.sql-injection-using-raw
  languages:
  - python
  message: 'sql-injection-using-raw

    Data that is possible user-controlled from a python request is passed to `raw()`.
    This could lead to SQL injection and attackers gaining access to protected information.'
  metadata:
    category: Security
    explanation: '## sql-injection-using-raw

      Data that is possible user-controlled from a python request is passed to `raw()`.
      This could lead to SQL injection and attackers gaining access to protected information.
      Instead, use django''s QuerySets, which are built with query parameterization
      and therefore not vulnerable to sql injection. For example, you could use `Entry.objects.filter(date=2006)`.'
    subcategory: InputValidation
  severity: warning
- id: Semgrep_python.django.security.injection.ssrf.ssrf-injection-requests.ssrf-injection-requests
  languages:
  - python
  message: 'ssrf-injection-requests

    Data from request object is passed to a new server-side request.'
  metadata:
    category: Security
    explanation: '## ssrf-injection-requests

      Data from request object is passed to a new server-side request. This could
      lead to a server-side request forgery (SSRF). To mitigate, ensure that schemes
      and hosts are validated against an allowlist, do not forward the response to
      the user, and ensure proper authentication and transport-layer security in the
      proxied request. See https://owasp.org/www-community/attacks/Server_Side_Request_Forgery
      to learn more about SSRF vulnerabilities.'
    subcategory: InputValidation
  severity: error
- id: Semgrep_python.django.security.injection.ssrf.ssrf-injection-urllib.ssrf-injection-urllib
  languages:
  - python
  message: 'ssrf-injection-urllib

    Data from request object is passed to a new server-side request.'
  metadata:
    category: Security
    explanation: '## ssrf-injection-urllib

      Data from request object is passed to a new server-side request. This could
      lead to a server-side request forgery (SSRF), which could result in attackers
      gaining access to private organization data. To mitigate, ensure that schemes
      and hosts are validated against an allowlist, do not forward the response to
      the user, and ensure proper authentication and transport-layer security in the
      proxied request.'
    subcategory: InputValidation
  severity: error
- id: Semgrep_python.django.security.injection.tainted-sql-string.tainted-sql-string
  languages:
  - python
  message: 'tainted-sql-string

    Detected user input used to manually construct a SQL string.'
  metadata:
    category: Security
    explanation: '## tainted-sql-string

      Detected user input used to manually construct a SQL string. This is usually
      bad practice because manual construction could accidentally result in a SQL
      injection. An attacker could use a SQL injection to steal or modify contents
      of the database. Instead, use a parameterized query which is available by default
      in most database engines. Alternatively, consider using the Django object-relational
      mappers (ORM) instead of raw SQL queries.'
    subcategory: UnexpectedBehaviour
  severity: error
- id: Semgrep_python.django.security.injection.tainted-url-host.tainted-url-host
  languages:
  - python
  message: 'tainted-url-host

    User data flows into the host portion of this manually-constructed URL. This could
    allow an attacker to send data to their own server, potentially exposing sensitive
    data such as cookies or authorization information sent with this request.'
  metadata:
    category: Security
    explanation: '## tainted-url-host

      User data flows into the host portion of this manually-constructed URL. This
      could allow an attacker to send data to their own server, potentially exposing
      sensitive data such as cookies or authorization information sent with this request.
      They could also probe internal servers or other resources that the server running
      this code can access. (This is called server-side request forgery, or SSRF.)
      Do not allow arbitrary hosts. Instead, create an allowlist for approved hosts,
      or hardcode the correct host.'
    subcategory: InputValidation
  severity: warning
- id: Semgrep_python.django.security.locals-as-template-context.locals-as-template-context
  languages:
  - python
  message: 'locals-as-template-context

    Using ''locals()'' as a context to ''render(...)'' is extremely dangerous.'
  metadata:
    category: Security
    explanation: '## locals-as-template-context

      Using ''locals()'' as a context to ''render(...)'' is extremely dangerous. This
      exposes Python functions to the template that were not meant to be exposed.
      An attacker could use these functions to execute code that was not intended
      to run and could compromise the application. (This is server-side template injection
      (SSTI)). Do not use ''locals()''. Instead, specify each variable in a dictionary
      or ''django.template.Context'' object, like ''{"var1": "hello"}'' and use that
      instead.'
    subcategory: InputValidation
  severity: error
- id: Semgrep_python.django.security.nan-injection.nan-injection
  languages:
  - python
  message: 'nan-injection

    Found user input going directly into typecast for bool(), float(), or complex().
    This allows an attacker to inject Python''s not-a-number (NaN) into the typecast.'
  metadata:
    category: Security
    explanation: '## nan-injection

      Found user input going directly into typecast for bool(), float(), or complex().
      This allows an attacker to inject Python''s not-a-number (NaN) into the typecast.
      This results in undefind behavior, particularly when doing comparisons. Either
      cast to a different type, or add a guard checking for all capitalizations of
      the string ''nan''.'
    subcategory: ''
  severity: error
- id: Semgrep_python.django.security.passwords.password-empty-string.password-empty-string
  languages:
  - python
  message: 'password-empty-string

    ''$VAR'' is the empty string and is being used to set the password on ''$MODEL''.
    If you meant to set an unusable password, set the password to None or call ''set_unusable_password()''.'
  metadata:
    category: Security
    explanation: '## password-empty-string

      ''$VAR'' is the empty string and is being used to set the password on ''$MODEL''.
      If you meant to set an unusable password, set the password to None or call ''set_unusable_password()''.'
    subcategory: Auth
  severity: error
- id: Semgrep_python.django.security.passwords.use-none-for-password-default.use-none-for-password-default
  languages:
  - python
  message: 'use-none-for-password-default

    ''$VAR'' is using the empty string as its default and is being used to set the
    password on ''$MODEL''. If you meant to set an unusable password, set the default
    value to ''None'' or call ''set_unusable_password()''.'
  metadata:
    category: Security
    explanation: '## use-none-for-password-default

      ''$VAR'' is using the empty string as its default and is being used to set the
      password on ''$MODEL''. If you meant to set an unusable password, set the default
      value to ''None'' or call ''set_unusable_password()''.'
    subcategory: Auth
  severity: error
- id: Semgrep_python.docker.security.audit.docker-arbitrary-container-run.docker-arbitrary-container-run
  languages:
  - python
  message: 'docker-arbitrary-container-run

    If unverified user data can reach the `run` or `create` method it can result in
    running arbitrary container.'
  metadata:
    category: Security
    explanation: '## docker-arbitrary-container-run

      If unverified user data can reach the `run` or `create` method it can result
      in running arbitrary container.'
    subcategory: ''
  severity: warning
- id: Semgrep_python.fastapi.security.wildcard-cors.wildcard-cors
  languages:
  - python
  message: 'wildcard-cors

    CORS policy allows any origin (using wildcard ''*''). This is insecure and should
    be avoided.'
  metadata:
    category: Security
    explanation: '## wildcard-cors

      CORS policy allows any origin (using wildcard ''*''). This is insecure and should
      be avoided.'
    subcategory: Other
  severity: warning
- id: Semgrep_python.flask.security.audit.app-run-param-config.avoid_app_run_with_bad_host
  languages:
  - python
  message: 'avoid_app_run_with_bad_host

    Running flask app with host 0.0.0.0 could expose the server publicly.'
  metadata:
    category: Security
    explanation: '## avoid_app_run_with_bad_host

      Running flask app with host 0.0.0.0 could expose the server publicly.'
    subcategory: InsecureStorage
  severity: warning
- id: Semgrep_python.flask.security.audit.app-run-security-config.avoid_using_app_run_directly
  languages:
  - python
  message: 'avoid_using_app_run_directly

    top-level app.run(...) is ignored by flask.'
  metadata:
    category: Security
    explanation: '## avoid_using_app_run_directly

      top-level app.run(...) is ignored by flask. Consider putting app.run(...) behind
      a guard, like inside a function'
    subcategory: InsecureStorage
  severity: warning
- id: Semgrep_python.flask.security.audit.debug-enabled.debug-enabled
  languages:
  - python
  message: 'debug-enabled

    Detected Flask app with debug=True.'
  metadata:
    category: Security
    explanation: '## debug-enabled

      Detected Flask app with debug=True. Do not deploy to production with this flag
      enabled as it will leak sensitive information. Instead, consider using Flask
      configuration variables or setting ''debug'' using system environment variables.'
    subcategory: Other
  severity: warning
- id: Semgrep_python.flask.security.audit.directly-returned-format-string.directly-returned-format-string
  languages:
  - python
  message: 'directly-returned-format-string

    Detected Flask route directly returning a formatted string.'
  metadata:
    category: Security
    explanation: '## directly-returned-format-string

      Detected Flask route directly returning a formatted string. This is subject
      to cross-site scripting if user input can reach the string. Consider using the
      template engine instead and rendering pages with ''render_template()''.'
    subcategory: InputValidation
  severity: warning
- id: Semgrep_python.flask.security.audit.hardcoded-config.avoid_hardcoded_config_debug
  languages:
  - python
  message: 'avoid_hardcoded_config_debug

    Hardcoded variable `DEBUG` detected.'
  metadata:
    category: Security
    explanation: '## avoid_hardcoded_config_debug

      Hardcoded variable `DEBUG` detected. Set this by using FLASK_DEBUG environment
      variable'
    subcategory: Other
  severity: warning
- id: Semgrep_python.flask.security.audit.hardcoded-config.avoid_hardcoded_config_env
  languages:
  - python
  message: 'avoid_hardcoded_config_env

    Hardcoded variable `ENV` detected.'
  metadata:
    category: Security
    explanation: '## avoid_hardcoded_config_env

      Hardcoded variable `ENV` detected. Set this by using FLASK_ENV environment variable'
    subcategory: Other
  severity: warning
- id: Semgrep_python.flask.security.audit.hardcoded-config.avoid_hardcoded_config_secret_key
  languages:
  - python
  message: 'avoid_hardcoded_config_secret_key

    Hardcoded variable `SECRET_KEY` detected.'
  metadata:
    category: Security
    explanation: '## avoid_hardcoded_config_secret_key

      Hardcoded variable `SECRET_KEY` detected. Use environment variables or config
      files instead'
    subcategory: Other
  severity: error
- id: Semgrep_python.flask.security.audit.hardcoded-config.avoid_hardcoded_config_testing
  languages:
  - python
  message: 'avoid_hardcoded_config_testing

    Hardcoded variable `TESTING` detected.'
  metadata:
    category: Security
    explanation: '## avoid_hardcoded_config_testing

      Hardcoded variable `TESTING` detected. Use environment variables or config files
      instead'
    subcategory: Other
  severity: warning
- id: Semgrep_python.flask.security.audit.host-header-injection-python.host-header-injection-python
  languages:
  - python
  message: 'host-header-injection-python

    The `flask.request.host` is used to construct an HTTP request.'
  metadata:
    category: Security
    explanation: '## host-header-injection-python

      The `flask.request.host` is used to construct an HTTP request.  This can lead
      to host header injection issues. Vulnerabilities  that generally occur due to
      this issue are authentication bypasses,  password reset issues, Server-Side-Request-Forgery
      (SSRF), and many more.  It is recommended to validate the URL before passing
      it to a  request library, or using application logic such as authentication  or
      password resets.'
    subcategory: ''
  severity: info
- id: Semgrep_python.flask.security.audit.render-template-string.render-template-string
  languages:
  - python
  message: 'render-template-string

    Found a template created with string formatting.'
  metadata:
    category: Security
    explanation: '## render-template-string

      Found a template created with string formatting. This is susceptible to server-side
      template injection and cross-site scripting attacks.'
    subcategory: InputValidation
  severity: warning
- id: Semgrep_python.flask.security.audit.secure-set-cookie.secure-set-cookie
  languages:
  - python
  message: 'secure-set-cookie

    Found a Flask cookie with insecurely configured properties.'
  metadata:
    category: Security
    explanation: '## secure-set-cookie

      Found a Flask cookie with insecurely configured properties.  By default the
      secure, httponly and samesite ar configured insecurely. cookies should be handled
      securely by setting `secure=True`, `httponly=True`, and `samesite=''Lax''` in
      response.set_cookie(...). If these parameters are not properly set, your cookies
      are not properly protected and are at risk of being stolen by an attacker. Include
      the `secure=True`, `httponly=True`, `samesite=''Lax''` arguments or set these
      to be true in the Flask configuration.'
    subcategory: Other
  severity: warning
- id: Semgrep_python.flask.security.audit.wtf-csrf-disabled.flask-wtf-csrf-disabled
  languages:
  - python
  message: 'flask-wtf-csrf-disabled

    Setting ''WTF_CSRF_ENABLED'' to ''False'' explicitly disables CSRF protection.'
  metadata:
    category: Security
    explanation: '## flask-wtf-csrf-disabled

      Setting ''WTF_CSRF_ENABLED'' to ''False'' explicitly disables CSRF protection.'
    subcategory: InsecureStorage
  severity: warning
- id: Semgrep_python.flask.security.audit.xss.make-response-with-unknown-content.make-response-with-unknown-content
  languages:
  - python
  message: 'make-response-with-unknown-content

    Be careful with `flask.make_response()`. If this response is rendered onto a webpage,
    this could create a cross-site scripting (XSS) vulnerability. `flask.make_response()`
    will not autoescape HTML. If you are rendering HTML, write your HTML in a template
    file and use `flask.render_template()` which will take care of escaping.'
  metadata:
    category: Security
    explanation: '## make-response-with-unknown-content

      Be careful with `flask.make_response()`. If this response is rendered onto a
      webpage, this could create a cross-site scripting (XSS) vulnerability. `flask.make_response()`
      will not autoescape HTML. If you are rendering HTML, write your HTML in a template
      file and use `flask.render_template()` which will take care of escaping. If
      you are returning data from an API, consider using `flask.jsonify()`.'
    subcategory: InputValidation
  severity: warning
- id: Semgrep_python.flask.security.dangerous-template-string.dangerous-template-string
  languages:
  - python
  message: 'dangerous-template-string

    Found a template created with string formatting.'
  metadata:
    category: Security
    explanation: '## dangerous-template-string

      Found a template created with string formatting. This is susceptible to server-side
      template injection and cross-site scripting attacks.'
    subcategory: InputValidation
  severity: error
- id: Semgrep_python.flask.security.flask-api-method-string-format.flask-api-method-string-format
  languages:
  - python
  message: 'flask-api-method-string-format

    Method $METHOD in API controller $CLASS provides user arg $ARG to requests method
    $REQMETHOD'
  metadata:
    category: Security
    explanation: '## flask-api-method-string-format

      Method $METHOD in API controller $CLASS provides user arg $ARG to requests method
      $REQMETHOD'
    subcategory: ''
  severity: error
- id: Semgrep_python.flask.security.hashids-with-flask-secret.hashids-with-flask-secret
  languages:
  - python
  message: 'hashids-with-flask-secret

    The Flask secret key is used as salt in HashIDs. The HashID mechanism is not secure.'
  metadata:
    category: Security
    explanation: '## hashids-with-flask-secret

      The Flask secret key is used as salt in HashIDs. The HashID mechanism is not
      secure. By observing sufficient HashIDs, the salt used to construct them can
      be recovered. This means the Flask secret key can be obtained by attackers,
      through the HashIDs.'
    subcategory: Cryptography
  severity: error
- id: Semgrep_python.flask.security.injection.csv-writer-injection.csv-writer-injection
  languages:
  - python
  message: 'csv-writer-injection

    Detected user input into a generated CSV file using the built-in `csv` module.'
  metadata:
    category: Security
    explanation: '## csv-writer-injection

      Detected user input into a generated CSV file using the built-in `csv` module.
      If user data is used to generate the data in this file, it is possible that
      an attacker could inject a formula when the CSV is imported into a spreadsheet
      application that runs an attacker script, which could steal data from the importing
      user or, at worst, install malware on the user''s computer. `defusedcsv` is
      a drop-in replacement with the same API that will attempt to mitigate formula
      injection attempts. You can use `defusedcsv` instead of `csv` to safely generate
      CSVs.'
    subcategory: InputValidation
  severity: error
- id: Semgrep_python.flask.security.injection.nan-injection.nan-injection
  languages:
  - python
  message: 'nan-injection

    Found user input going directly into typecast for bool(), float(), or complex().
    This allows an attacker to inject Python''s not-a-number (NaN) into the typecast.'
  metadata:
    category: Security
    explanation: '## nan-injection

      Found user input going directly into typecast for bool(), float(), or complex().
      This allows an attacker to inject Python''s not-a-number (NaN) into the typecast.
      This results in undefind behavior, particularly when doing comparisons. Either
      cast to a different type, or add a guard checking for all capitalizations of
      the string ''nan''.'
    subcategory: ''
  severity: error
- id: Semgrep_python.flask.security.injection.os-system-injection.os-system-injection
  languages:
  - python
  message: 'os-system-injection

    User data detected in os.system.'
  metadata:
    category: Security
    explanation: '## os-system-injection

      User data detected in os.system. This could be vulnerable to a command injection
      and should be avoided. If this must be done, use the ''subprocess'' module instead
      and pass the arguments as a list.'
    subcategory: InputValidation
  severity: error
- id: Semgrep_python.flask.security.injection.path-traversal-open.path-traversal-open
  languages:
  - python
  message: 'path-traversal-open

    Found request data in a call to ''open''. Ensure the request data is validated
    or sanitized, otherwise it could result in path traversal attacks.'
  metadata:
    category: Security
    explanation: '## path-traversal-open

      Found request data in a call to ''open''. Ensure the request data is validated
      or sanitized, otherwise it could result in path traversal attacks.'
    subcategory: InsecureStorage
  severity: error
- id: Semgrep_python.flask.security.injection.raw-html-concat.raw-html-format
  languages:
  - python
  message: 'raw-html-format

    Detected user input flowing into a manually constructed HTML string.'
  metadata:
    category: Security
    explanation: '## raw-html-format

      Detected user input flowing into a manually constructed HTML string. You may
      be accidentally bypassing secure methods of rendering HTML by manually constructing
      HTML and this could create a cross-site scripting vulnerability, which could
      let attackers steal sensitive user data. To be sure this is safe, check that
      the HTML is rendered safely. Otherwise, use templates (`flask.render_template`)
      which will safely render HTML instead.'
    subcategory: InputValidation
  severity: warning
- id: Semgrep_python.flask.security.injection.ssrf-requests.ssrf-requests
  languages:
  - python
  message: 'ssrf-requests

    Data from request object is passed to a new server-side request.'
  metadata:
    category: Security
    explanation: '## ssrf-requests

      Data from request object is passed to a new server-side request. This could
      lead to a server-side request forgery (SSRF). To mitigate, ensure that schemes
      and hosts are validated against an allowlist, do not forward the response to
      the user, and ensure proper authentication and transport-layer security in the
      proxied request.'
    subcategory: InputValidation
  severity: error
- id: Semgrep_python.flask.security.injection.subprocess-injection.subprocess-injection
  languages:
  - python
  message: 'subprocess-injection

    Detected user input entering a `subprocess` call unsafely.'
  metadata:
    category: Security
    explanation: '## subprocess-injection

      Detected user input entering a `subprocess` call unsafely. This could result
      in a command injection vulnerability. An attacker could use this vulnerability
      to execute arbitrary commands on the host, which allows them to download malware,
      scan sensitive data, or run any command they wish on the server. Do not let
      users choose the command to run. In general, prefer to use Python API versions
      of system commands. If you must use subprocess, use a dictionary to allowlist
      a set of commands.'
    subcategory: InputValidation
  severity: error
- id: Semgrep_python.flask.security.injection.tainted-sql-string.tainted-sql-string
  languages:
  - python
  message: 'tainted-sql-string

    Detected user input used to manually construct a SQL string.'
  metadata:
    category: Security
    explanation: '## tainted-sql-string

      Detected user input used to manually construct a SQL string. This is usually
      bad practice because manual construction could accidentally result in a SQL
      injection. An attacker could use a SQL injection to steal or modify contents
      of the database. Instead, use a parameterized query which is available by default
      in most database engines. Alternatively, consider using an object-relational
      mapper (ORM) such as SQLAlchemy which will protect your queries.'
    subcategory: InputValidation
  severity: error
- id: Semgrep_python.flask.security.injection.tainted-url-host.tainted-url-host
  languages:
  - python
  message: 'tainted-url-host

    User data flows into the host portion of this manually-constructed URL. This could
    allow an attacker to send data to their own server, potentially exposing sensitive
    data such as cookies or authorization information sent with this request.'
  metadata:
    category: Security
    explanation: '## tainted-url-host

      User data flows into the host portion of this manually-constructed URL. This
      could allow an attacker to send data to their own server, potentially exposing
      sensitive data such as cookies or authorization information sent with this request.
      They could also probe internal servers or other resources that the server running
      this code can access. (This is called server-side request forgery, or SSRF.)
      Do not allow arbitrary hosts. Instead, create an allowlist for approved hosts,
      or hardcode the correct host.'
    subcategory: InputValidation
  severity: warning
- id: Semgrep_python.flask.security.injection.user-eval.eval-injection
  languages:
  - python
  message: 'eval-injection

    Detected user data flowing into eval.'
  metadata:
    category: Security
    explanation: '## eval-injection

      Detected user data flowing into eval. This is code injection and should be avoided.'
    subcategory: InputValidation
  severity: error
- id: Semgrep_python.flask.security.injection.user-exec.exec-injection
  languages:
  - python
  message: 'exec-injection

    Detected user data flowing into exec.'
  metadata:
    category: Security
    explanation: '## exec-injection

      Detected user data flowing into exec. This is code injection and should be avoided.'
    subcategory: InputValidation
  severity: error
- id: Semgrep_python.flask.security.insecure-deserialization.insecure-deserialization
  languages:
  - python
  message: 'insecure-deserialization

    Detected the use of an insecure deserialization library in a Flask route.'
  metadata:
    category: Security
    explanation: '## insecure-deserialization

      Detected the use of an insecure deserialization library in a Flask route. These
      libraries are prone to code execution vulnerabilities. Ensure user data does
      not enter this function. To fix this, try to avoid serializing whole objects.
      Consider instead using a serializer such as JSON.'
    subcategory: InputValidation
  severity: error
- id: Semgrep_python.flask.security.open-redirect.open-redirect
  languages:
  - python
  message: 'open-redirect

    Data from request is passed to redirect(). This is an open redirect and could
    be exploited.'
  metadata:
    category: Security
    explanation: '## open-redirect

      Data from request is passed to redirect(). This is an open redirect and could
      be exploited. Consider using ''url_for()'' to generate links to known locations.
      If you must use a URL to unknown pages, consider using ''urlparse()'' or similar
      and checking if the ''netloc'' property is the same as your site''s host name.
      See the references for more information.'
    subcategory: InsecureStorage
  severity: error
- id: Semgrep_python.flask.security.secure-static-file-serve.avoid_send_file_without_path_sanitization
  languages:
  - python
  message: 'avoid_send_file_without_path_sanitization

    Detected a user-controlled `filename` that could flow to `flask.send_file()` function.'
  metadata:
    category: Security
    explanation: '## avoid_send_file_without_path_sanitization

      Detected a user-controlled `filename` that could flow to `flask.send_file()`
      function. This could lead to an attacker reading arbitrary file from the system,
      leaking private information. Make sure to properly sanitize filename or use
      `flask.send_from_directory`'
    subcategory: Other
  severity: warning
- id: Semgrep_python.flask.security.unescaped-template-extension.unescaped-template-extension
  languages:
  - python
  message: 'unescaped-template-extension

    Flask does not automatically escape Jinja templates unless they have .html, .htm,
    .xml, or .xhtml extensions.'
  metadata:
    category: Security
    explanation: '## unescaped-template-extension

      Flask does not automatically escape Jinja templates unless they have .html,
      .htm, .xml, or .xhtml extensions. This could lead to XSS attacks. Use .html,
      .htm, .xml, or .xhtml for your template extensions. See https://flask.palletsprojects.com/en/1.1.x/templating/#jinja-setup
      for more information.'
    subcategory: InputValidation
  severity: warning
- id: Semgrep_python.flask.security.unsanitized-input.response-contains-unsanitized-input
  languages:
  - python
  message: 'response-contains-unsanitized-input

    Flask response reflects unsanitized user input.'
  metadata:
    category: Security
    explanation: '## response-contains-unsanitized-input

      Flask response reflects unsanitized user input. This could lead to a cross-site
      scripting vulnerability (https://owasp.org/www-community/attacks/xss/) in which
      an attacker causes arbitrary code to be executed in the user''s browser. To
      prevent, please sanitize the user input, e.g. by rendering the response in a
      Jinja2 template (see considerations in https://flask.palletsprojects.com/en/1.0.x/security/).'
    subcategory: InputValidation
  severity: warning
- id: Semgrep_python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2
  languages:
  - python
  message: 'direct-use-of-jinja2

    Detected direct use of jinja2. If not done properly, this may bypass HTML escaping
    which opens up the application to cross-site scripting (XSS) vulnerabilities.'
  metadata:
    category: Security
    explanation: '## direct-use-of-jinja2

      Detected direct use of jinja2. If not done properly, this may bypass HTML escaping
      which opens up the application to cross-site scripting (XSS) vulnerabilities.
      Prefer using the Flask method ''render_template()'' and templates with a ''.html''
      extension in order to prevent XSS.'
    subcategory: InputValidation
  severity: warning
- id: Semgrep_python.flask.security.xss.audit.explicit-unescape-with-markup.explicit-unescape-with-markup
  languages:
  - python
  message: 'explicit-unescape-with-markup

    Detected explicitly unescaped content using ''Markup()''. This permits the unescaped
    data to include unescaped HTML which could result in cross-site scripting.'
  metadata:
    category: Security
    explanation: '## explicit-unescape-with-markup

      Detected explicitly unescaped content using ''Markup()''. This permits the unescaped
      data to include unescaped HTML which could result in cross-site scripting. Ensure
      this data is not externally controlled, or consider rewriting to not use ''Markup()''.'
    subcategory: InputValidation
  severity: warning
- id: Semgrep_python.flask.security.xss.audit.template-autoescape-off.template-autoescape-off
  languages:
  - python
  message: 'template-autoescape-off

    Detected a segment of a Flask template where autoescaping is explicitly disabled
    with ''{% autoescape off %}''. This allows rendering of raw HTML in this segment.'
  metadata:
    category: Security
    explanation: '## template-autoescape-off

      Detected a segment of a Flask template where autoescaping is explicitly disabled
      with ''{% autoescape off %}''. This allows rendering of raw HTML in this segment.
      Ensure no user data is rendered here, otherwise this is a cross-site scripting
      (XSS) vulnerability, or turn autoescape on.'
    subcategory: InputValidation
  severity: warning
- id: Semgrep_python.flask.security.xss.audit.template-href-var.template-href-var
  languages:
  - python
  message: 'template-href-var

    Detected a template variable used in an anchor tag with the ''href'' attribute.'
  metadata:
    category: Security
    explanation: '## template-href-var

      Detected a template variable used in an anchor tag with the ''href'' attribute.
      This allows a malicious actor to input the ''javascript:'' URI and is subject
      to cross- site scripting (XSS) attacks. Use ''url_for()'' to safely generate
      a URL. You may also consider setting the Content Security Policy (CSP) header.'
    subcategory: InputValidation
  severity: warning
- id: Semgrep_python.flask.security.xss.audit.template-unescaped-with-safe.template-unescaped-with-safe
  languages:
  - python
  message: 'template-unescaped-with-safe

    Detected a segment of a Flask template where autoescaping is explicitly disabled
    with ''| safe'' filter.'
  metadata:
    category: Security
    explanation: '## template-unescaped-with-safe

      Detected a segment of a Flask template where autoescaping is explicitly disabled
      with ''| safe'' filter. This allows rendering of raw HTML in this segment. Ensure
      no user data is rendered here, otherwise this is a cross-site scripting (XSS)
      vulnerability.'
    subcategory: InputValidation
  severity: warning
- id: Semgrep_python.flask.security.xss.audit.template-unquoted-attribute-var.template-unquoted-attribute-var
  languages:
  - python
  message: 'template-unquoted-attribute-var

    Detected a unquoted template variable as an attribute.'
  metadata:
    category: Security
    explanation: '## template-unquoted-attribute-var

      Detected a unquoted template variable as an attribute. If unquoted, a malicious
      actor could inject custom JavaScript handlers. To fix this, add quotes around
      the template expression, like this: "{{ $...VAR }}".'
    subcategory: InputValidation
  severity: warning
- id: Semgrep_python.jinja2.security.audit.autoescape-disabled-false.incorrect-autoescape-disabled
  languages:
  - python
  message: 'incorrect-autoescape-disabled

    Detected a Jinja2 environment with ''autoescaping'' disabled.'
  metadata:
    category: Security
    explanation: '## incorrect-autoescape-disabled

      Detected a Jinja2 environment with ''autoescaping'' disabled. This is dangerous
      if you are rendering to a browser because this allows for cross-site scripting
      (XSS) attacks. If you are in a web context, enable ''autoescaping'' by setting
      ''autoescape=True.'' You may also consider using ''jinja2.select_autoescape()''
      to only enable automatic escaping for certain file extensions.'
    subcategory: InputValidation
  severity: warning
- id: Semgrep_python.jinja2.security.audit.missing-autoescape-disabled.missing-autoescape-disabled
  languages:
  - python
  message: 'missing-autoescape-disabled

    Detected a Jinja2 environment without autoescaping.'
  metadata:
    category: Security
    explanation: '## missing-autoescape-disabled

      Detected a Jinja2 environment without autoescaping. Jinja2 does not autoescape
      by default. This is dangerous if you are rendering to a browser because this
      allows for cross-site scripting (XSS) attacks. If you are in a web context,
      enable autoescaping by setting ''autoescape=True.'' You may also consider using
      ''jinja2.select_autoescape()'' to only enable automatic escaping for certain
      file extensions.'
    subcategory: InputValidation
  severity: warning
- id: Semgrep_python.jwt.security.audit.jwt-exposed-data.jwt-python-exposed-data
  languages:
  - python
  message: 'jwt-python-exposed-data

    The object is passed strictly to jwt.encode(...) Make sure that sensitive information
    is not exposed through JWT token payload.'
  metadata:
    category: Security
    explanation: '## jwt-python-exposed-data

      The object is passed strictly to jwt.encode(...) Make sure that sensitive information
      is not exposed through JWT token payload.'
    subcategory: Auth
  severity: warning
- id: Semgrep_python.jwt.security.jwt-exposed-credentials.jwt-python-exposed-credentials
  languages:
  - python
  message: 'jwt-python-exposed-credentials

    Password is exposed through JWT token payload.'
  metadata:
    category: Security
    explanation: '## jwt-python-exposed-credentials

      Password is exposed through JWT token payload. This is not encrypted and the
      password could be compromised. Do not store passwords in JWT tokens.'
    subcategory: Auth
  severity: error
- id: Semgrep_python.jwt.security.jwt-hardcode.jwt-python-hardcoded-secret
  languages:
  - python
  message: 'jwt-python-hardcoded-secret

    Hardcoded JWT secret or private key is used.'
  metadata:
    category: Security
    explanation: '## jwt-python-hardcoded-secret

      Hardcoded JWT secret or private key is used. This is a Insufficiently Protected
      Credentials weakness: https://cwe.mitre.org/data/definitions/522.html Consider
      using an appropriate security mechanism to protect the credentials (e.g. keeping
      secrets in environment variables)'
    subcategory: Auth
  severity: error
- id: Semgrep_python.jwt.security.jwt-none-alg.jwt-python-none-alg
  languages:
  - python
  message: 'jwt-python-none-alg

    Detected use of the ''none'' algorithm in a JWT token.'
  metadata:
    category: Security
    explanation: '## jwt-python-none-alg

      Detected use of the ''none'' algorithm in a JWT token. The ''none'' algorithm
      assumes the integrity of the token has already been verified. This would allow
      a malicious actor to forge a JWT token that will automatically be verified.
      Do not explicitly use the ''none'' algorithm. Instead, use an algorithm such
      as ''HS256''.'
    subcategory: Visibility
  severity: error
- id: Semgrep_python.jwt.security.unverified-jwt-decode.unverified-jwt-decode
  languages:
  - python
  message: 'unverified-jwt-decode

    Detected JWT token decoded with ''verify=False''. This bypasses any integrity
    checks for the token which means the token could be tampered with by malicious
    actors.'
  metadata:
    category: Security
    explanation: '## unverified-jwt-decode

      Detected JWT token decoded with ''verify=False''. This bypasses any integrity
      checks for the token which means the token could be tampered with by malicious
      actors. Ensure that the JWT token is verified.'
    subcategory: Auth
  severity: error
- id: Semgrep_python.lang.security.audit.conn_recv.multiprocessing-recv
  languages:
  - python
  message: 'multiprocessing-recv

    The Connection.recv() method automatically unpickles the data it receives, which
    can be a security risk unless you can trust the process which sent the message.'
  metadata:
    category: Security
    explanation: '## multiprocessing-recv

      The Connection.recv() method automatically unpickles the data it receives, which
      can be a security risk unless you can trust the process which sent the message.
      Therefore, unless the connection object was produced using Pipe() you should
      only use the recv() and send() methods after performing some sort of authentication.
      See more dettails: https://docs.python.org/3/library/multiprocessing.html?highlight=security#multiprocessing.connection.Connection'
    subcategory: InputValidation
  severity: warning
- id: Semgrep_python.lang.security.audit.dangerous-annotations-usage.dangerous-annotations-usage
  languages:
  - python
  message: 'dangerous-annotations-usage

    Annotations passed to `typing.get_type_hints` are evaluated in `globals` and `locals`
    namespaces.'
  metadata:
    category: Security
    explanation: '## dangerous-annotations-usage

      Annotations passed to `typing.get_type_hints` are evaluated in `globals` and
      `locals` namespaces. Make sure that no arbitrary value can be written as the
      annotation and passed to `typing.get_type_hints` function.'
    subcategory: InputValidation
  severity: info
- id: Semgrep_python.lang.security.audit.dangerous-asyncio-create-exec-audit.dangerous-asyncio-create-exec-audit
  languages:
  - python
  message: 'dangerous-asyncio-create-exec-audit

    Detected ''create_subprocess_exec'' function without a static string.'
  metadata:
    category: Security
    explanation: '## dangerous-asyncio-create-exec-audit

      Detected ''create_subprocess_exec'' function without a static string. If this
      data can be controlled by a malicious actor, it may be an instance of command
      injection. Audit the use of this call to ensure it is not controllable by an
      external resource. You may consider using ''shlex.escape()''.'
    subcategory: InputValidation
  severity: error
- id: Semgrep_python.lang.security.audit.dangerous-asyncio-create-exec-tainted-env-args.dangerous-asyncio-create-exec-tainted-env-args
  languages:
  - python
  message: 'dangerous-asyncio-create-exec-tainted-env-args

    Detected ''create_subprocess_exec'' function with user controlled data.'
  metadata:
    category: Security
    explanation: '## dangerous-asyncio-create-exec-tainted-env-args

      Detected ''create_subprocess_exec'' function with user controlled data. You
      may consider using ''shlex.escape()''.'
    subcategory: InputValidation
  severity: error
- id: Semgrep_python.lang.security.audit.dangerous-asyncio-exec-audit.dangerous-asyncio-exec-audit
  languages:
  - python
  message: 'dangerous-asyncio-exec-audit

    Detected subprocess function ''$LOOP.subprocess_exec'' without a static string.'
  metadata:
    category: Security
    explanation: '## dangerous-asyncio-exec-audit

      Detected subprocess function ''$LOOP.subprocess_exec'' without a static string.
      If this data can be controlled by a malicious actor, it may be an instance of
      command injection. Audit the use of this call to ensure it is not controllable
      by an external resource. You may consider using ''shlex.escape()''.'
    subcategory: InputValidation
  severity: error
- id: Semgrep_python.lang.security.audit.dangerous-asyncio-exec-tainted-env-args.dangerous-asyncio-exec-tainted-env-args
  languages:
  - python
  message: 'dangerous-asyncio-exec-tainted-env-args

    Detected subprocess function ''$LOOP.subprocess_exec'' with user controlled data.'
  metadata:
    category: Security
    explanation: '## dangerous-asyncio-exec-tainted-env-args

      Detected subprocess function ''$LOOP.subprocess_exec'' with user controlled
      data. You may consider using ''shlex.escape()''.'
    subcategory: InputValidation
  severity: error
- id: Semgrep_python.lang.security.audit.dangerous-asyncio-shell-audit.dangerous-asyncio-shell-audit
  languages:
  - python
  message: 'dangerous-asyncio-shell-audit

    Detected asyncio subprocess function without a static string.'
  metadata:
    category: Security
    explanation: '## dangerous-asyncio-shell-audit

      Detected asyncio subprocess function without a static string. If this data can
      be controlled by a malicious actor, it may be an instance of command injection.
      Audit the use of this call to ensure it is not controllable by an external resource.
      You may consider using ''shlex.escape()''.'
    subcategory: InputValidation
  severity: error
- id: Semgrep_python.lang.security.audit.dangerous-asyncio-shell-tainted-env-args.dangerous-asyncio-shell-tainted-env-args
  languages:
  - python
  message: 'dangerous-asyncio-shell-tainted-env-args

    Detected asyncio subprocess function with user controlled data.'
  metadata:
    category: Security
    explanation: '## dangerous-asyncio-shell-tainted-env-args

      Detected asyncio subprocess function with user controlled data. You may consider
      using ''shlex.escape()''.'
    subcategory: InputValidation
  severity: error
- id: Semgrep_python.lang.security.audit.dangerous-code-run-audit.dangerous-interactive-code-run-audit
  languages:
  - python
  message: 'dangerous-interactive-code-run-audit

    Found dynamic content inside InteractiveConsole/InteractiveInterpreter method.'
  metadata:
    category: Security
    explanation: '## dangerous-interactive-code-run-audit

      Found dynamic content inside InteractiveConsole/InteractiveInterpreter method.
      This is dangerous if external data can reach this function call because it allows
      a malicious actor to run arbitrary Python code. Ensure no external data reaches
      here.'
    subcategory: InputValidation
  severity: warning
- id: Semgrep_python.lang.security.audit.dangerous-code-run-tainted-env-args.dangerous-interactive-code-run-tainted-env-args
  languages:
  - python
  message: 'dangerous-interactive-code-run-tainted-env-args

    Found user controlled data inside InteractiveConsole/InteractiveInterpreter method.'
  metadata:
    category: Security
    explanation: '## dangerous-interactive-code-run-tainted-env-args

      Found user controlled data inside InteractiveConsole/InteractiveInterpreter
      method. This is dangerous if external data can reach this function call because
      it allows a malicious actor to run arbitrary Python code.'
    subcategory: InputValidation
  severity: warning
- id: Semgrep_python.lang.security.audit.dangerous-os-exec-audit.dangerous-os-exec-audit
  languages:
  - python
  message: 'dangerous-os-exec-audit

    Found dynamic content when spawning a process.'
  metadata:
    category: Security
    explanation: '## dangerous-os-exec-audit

      Found dynamic content when spawning a process. This is dangerous if external
      data can reach this function call because it allows a malicious actor to execute
      commands. Ensure no external data reaches here.'
    subcategory: InputValidation
  severity: error
- id: Semgrep_python.lang.security.audit.dangerous-os-exec-tainted-env-args.dangerous-os-exec-tainted-env-args
  languages:
  - python
  message: 'dangerous-os-exec-tainted-env-args

    Found user controlled content when spawning a process.'
  metadata:
    category: Security
    explanation: '## dangerous-os-exec-tainted-env-args

      Found user controlled content when spawning a process. This is dangerous because
      it allows a malicious actor to execute commands.'
    subcategory: InputValidation
  severity: error
- id: Semgrep_python.lang.security.audit.dangerous-spawn-process-audit.dangerous-spawn-process-audit
  languages:
  - python
  message: 'dangerous-spawn-process-audit

    Found dynamic content when spawning a process.'
  metadata:
    category: Security
    explanation: '## dangerous-spawn-process-audit

      Found dynamic content when spawning a process. This is dangerous if external
      data can reach this function call because it allows a malicious actor to execute
      commands. Ensure no external data reaches here.'
    subcategory: InputValidation
  severity: error
- id: Semgrep_python.lang.security.audit.dangerous-spawn-process-tainted-env-args.dangerous-spawn-process-tainted-env-args
  languages:
  - python
  message: 'dangerous-spawn-process-tainted-env-args

    Found user controlled content when spawning a process.'
  metadata:
    category: Security
    explanation: '## dangerous-spawn-process-tainted-env-args

      Found user controlled content when spawning a process. This is dangerous because
      it allows a malicious actor to execute commands.'
    subcategory: InputValidation
  severity: error
- id: Semgrep_python.lang.security.audit.dangerous-subinterpreters-run-string-audit.dangerous-subinterpreters-run-string-audit
  languages:
  - python
  message: 'dangerous-subinterpreters-run-string-audit

    Found dynamic content in `run_string`. This is dangerous if external data can
    reach this function call because it allows a malicious actor to run arbitrary
    Python code.'
  metadata:
    category: Security
    explanation: '## dangerous-subinterpreters-run-string-audit

      Found dynamic content in `run_string`. This is dangerous if external data can
      reach this function call because it allows a malicious actor to run arbitrary
      Python code. Ensure no external data reaches here.'
    subcategory: InputValidation
  severity: warning
- id: Semgrep_python.lang.security.audit.dangerous-subinterpreters-run-string-tainted-env-args.dangerous-subinterpreters-run-string-tainted-env-args
  languages:
  - python
  message: 'dangerous-subinterpreters-run-string-tainted-env-args

    Found user controlled content in `run_string`. This is dangerous because it allows
    a malicious actor to run arbitrary Python code.'
  metadata:
    category: Security
    explanation: '## dangerous-subinterpreters-run-string-tainted-env-args

      Found user controlled content in `run_string`. This is dangerous because it
      allows a malicious actor to run arbitrary Python code.'
    subcategory: InputValidation
  severity: warning
- id: Semgrep_python.lang.security.audit.dangerous-subprocess-use-audit.dangerous-subprocess-use-audit
  languages:
  - python
  message: 'dangerous-subprocess-use-audit

    Detected subprocess function ''$FUNC'' without a static string.'
  metadata:
    category: Security
    explanation: '## dangerous-subprocess-use-audit

      Detected subprocess function ''$FUNC'' without a static string. If this data
      can be controlled by a malicious actor, it may be an instance of command injection.
      Audit the use of this call to ensure it is not controllable by an external resource.
      You may consider using ''shlex.escape()''.'
    subcategory: InputValidation
  severity: error
- id: Semgrep_python.lang.security.audit.dangerous-subprocess-use-tainted-env-args.dangerous-subprocess-use-tainted-env-args
  languages:
  - python
  message: 'dangerous-subprocess-use-tainted-env-args

    Detected subprocess function ''$FUNC'' with user controlled data.'
  metadata:
    category: Security
    explanation: '## dangerous-subprocess-use-tainted-env-args

      Detected subprocess function ''$FUNC'' with user controlled data. A malicious
      actor could leverage this to perform command injection. You may consider using
      ''shlex.escape()''.'
    subcategory: InputValidation
  severity: error
- id: Semgrep_python.lang.security.audit.dangerous-system-call-audit.dangerous-system-call-audit
  languages:
  - python
  message: 'dangerous-system-call-audit

    Found dynamic content used in a system call.'
  metadata:
    category: Security
    explanation: '## dangerous-system-call-audit

      Found dynamic content used in a system call. This is dangerous if external data
      can reach this function call because it allows a malicious actor to execute
      commands. Use the ''subprocess'' module instead, which is easier to use without
      accidentally exposing a command injection vulnerability.'
    subcategory: InputValidation
  severity: error
- id: Semgrep_python.lang.security.audit.dangerous-system-call-tainted-env-args.dangerous-system-call-tainted-env-args
  languages:
  - python
  message: 'dangerous-system-call-tainted-env-args

    Found user-controlled data used in a system call.'
  metadata:
    category: Security
    explanation: '## dangerous-system-call-tainted-env-args

      Found user-controlled data used in a system call. This could allow a malicious
      actor to execute commands. Use the ''subprocess'' module instead, which is easier
      to use without accidentally exposing a command injection vulnerability.'
    subcategory: InputValidation
  severity: error
- id: Semgrep_python.lang.security.audit.dangerous-testcapi-run-in-subinterp-audit.dangerous-testcapi-run-in-subinterp-audit
  languages:
  - python
  message: 'dangerous-testcapi-run-in-subinterp-audit

    Found dynamic content in `run_in_subinterp`. This is dangerous if external data
    can reach this function call because it allows a malicious actor to run arbitrary
    Python code.'
  metadata:
    category: Security
    explanation: '## dangerous-testcapi-run-in-subinterp-audit

      Found dynamic content in `run_in_subinterp`. This is dangerous if external data
      can reach this function call because it allows a malicious actor to run arbitrary
      Python code. Ensure no external data reaches here.'
    subcategory: InputValidation
  severity: warning
- id: Semgrep_python.lang.security.audit.dangerous-testcapi-run-in-subinterp-tainted-env-args.dangerous-testcapi-run-in-subinterp-tainted-env-args
  languages:
  - python
  message: 'dangerous-testcapi-run-in-subinterp-tainted-env-args

    Found user controlled content in `run_in_subinterp`. This is dangerous because
    it allows a malicious actor to run arbitrary Python code.'
  metadata:
    category: Security
    explanation: '## dangerous-testcapi-run-in-subinterp-tainted-env-args

      Found user controlled content in `run_in_subinterp`. This is dangerous because
      it allows a malicious actor to run arbitrary Python code.'
    subcategory: InputValidation
  severity: warning
- id: Semgrep_python.lang.security.audit.dynamic-urllib-use-detected.dynamic-urllib-use-detected
  languages:
  - python
  message: 'dynamic-urllib-use-detected

    Detected a dynamic value being used with urllib. urllib supports ''file://'' schemes,
    so a dynamic value controlled by a malicious actor may allow them to read arbitrary
    files.'
  metadata:
    category: Security
    explanation: '## dynamic-urllib-use-detected

      Detected a dynamic value being used with urllib. urllib supports ''file://''
      schemes, so a dynamic value controlled by a malicious actor may allow them to
      read arbitrary files. Audit uses of urllib calls to ensure user data cannot
      control the URLs, or consider using the ''requests'' library instead.'
    subcategory: InputValidation
  severity: warning
- id: Semgrep_python.lang.security.audit.eval-detected.eval-detected
  languages:
  - python
  message: 'eval-detected

    Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic
    content.'
  metadata:
    category: Security
    explanation: '## eval-detected

      Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic
      content. If this content can be input from outside the program, this may be
      a code injection vulnerability. Ensure evaluated content is not definable by
      external sources.'
    subcategory: InputValidation
  severity: warning
- id: Semgrep_python.lang.security.audit.exec-detected.exec-detected
  languages:
  - python
  message: 'exec-detected

    Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic
    content.'
  metadata:
    category: Security
    explanation: '## exec-detected

      Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic
      content. If this content can be input from outside the program, this may be
      a code injection vulnerability. Ensure evaluated content is not definable by
      external sources.'
    subcategory: InputValidation
  severity: warning
- id: Semgrep_python.lang.security.audit.formatted-sql-query.formatted-sql-query
  languages:
  - python
  message: 'formatted-sql-query

    Detected possible formatted SQL query.'
  metadata:
    category: Security
    explanation: '## formatted-sql-query

      Detected possible formatted SQL query. Use parameterized queries instead.'
    subcategory: InputValidation
  severity: warning
- id: Semgrep_python.lang.security.audit.ftplib.ftplib
  languages:
  - python
  message: 'ftplib

    FTP does not encrypt communications by default.'
  metadata:
    category: Security
    explanation: '## ftplib

      FTP does not encrypt communications by default. This can lead to sensitive data
      being exposed. Ensure use of FTP here does not expose sensitive data.'
    subcategory: Visibility
  severity: warning
- id: Semgrep_python.lang.security.audit.hardcoded-password-default-argument.hardcoded-password-default-argument
  languages:
  - python
  message: 'hardcoded-password-default-argument

    Hardcoded password is used as a default argument to ''$FUNC''. This could be dangerous
    if a real password is not supplied.'
  metadata:
    category: Security
    explanation: '## hardcoded-password-default-argument

      Hardcoded password is used as a default argument to ''$FUNC''. This could be
      dangerous if a real password is not supplied.'
    subcategory: Auth
  severity: warning
- id: Semgrep_python.lang.security.audit.httpsconnection-detected.httpsconnection-detected
  languages:
  - python
  message: 'httpsconnection-detected

    The HTTPSConnection API has changed frequently with minor releases of Python.'
  metadata:
    category: Security
    explanation: '## httpsconnection-detected

      The HTTPSConnection API has changed frequently with minor releases of Python.
      Ensure you are using the API for your version of Python securely. For example,
      Python 3 versions prior to 3.4.3 will not verify SSL certificates by default.
      See https://docs.python.org/3/library/http.client.html#http.client.HTTPSConnection
      for more information.'
    subcategory: Visibility
  severity: warning
- id: Semgrep_python.lang.security.audit.insecure-file-permissions.insecure-file-permissions
  languages:
  - python
  message: 'insecure-file-permissions

    These permissions `$BITS` are widely permissive and grant access to more people
    than may be necessary.'
  metadata:
    category: Security
    explanation: '## insecure-file-permissions

      These permissions `$BITS` are widely permissive and grant access to more people
      than may be necessary. A good default is `0o644` which gives read and write
      access to yourself and read access to everyone else.'
    subcategory: InsecureStorage
  severity: warning
- id: Semgrep_python.lang.security.audit.insecure-transport.ftplib.use-ftp-tls.use-ftp-tls
  languages:
  - python
  message: 'use-ftp-tls

    The ''FTP'' class sends information unencrypted.'
  metadata:
    category: Security
    explanation: '## use-ftp-tls

      The ''FTP'' class sends information unencrypted. Consider using the ''FTP_TLS''
      class instead.'
    subcategory: Visibility
  severity: warning
- id: Semgrep_python.lang.security.audit.insecure-transport.requests.request-session-http-in-with-context.request-session-http-in-with-context
  languages:
  - python
  message: 'request-session-http-in-with-context

    Detected a request using ''http://''. This request will be unencrypted.'
  metadata:
    category: Security
    explanation: '## request-session-http-in-with-context

      Detected a request using ''http://''. This request will be unencrypted. Use
      ''https://'' instead.'
    subcategory: Visibility
  severity: info
- id: Semgrep_python.lang.security.audit.insecure-transport.requests.request-session-with-http.request-session-with-http
  languages:
  - python
  message: 'request-session-with-http

    Detected a request using ''http://''. This request will be unencrypted.'
  metadata:
    category: Security
    explanation: '## request-session-with-http

      Detected a request using ''http://''. This request will be unencrypted. Use
      ''https://'' instead.'
    subcategory: Visibility
  severity: info
- id: Semgrep_python.lang.security.audit.insecure-transport.requests.request-with-http.request-with-http
  languages:
  - python
  message: 'request-with-http

    Detected a request using ''http://''. This request will be unencrypted, and attackers
    could listen into traffic on the network and be able to obtain sensitive information.'
  metadata:
    category: Security
    explanation: '## request-with-http

      Detected a request using ''http://''. This request will be unencrypted, and
      attackers could listen into traffic on the network and be able to obtain sensitive
      information. Use ''https://'' instead.'
    subcategory: Visibility
  severity: info
- id: Semgrep_python.lang.security.audit.insecure-transport.ssl.no-set-ciphers.no-set-ciphers
  languages:
  - python
  message: 'no-set-ciphers

    The ''ssl'' module disables insecure cipher suites by default.'
  metadata:
    category: Security
    explanation: '## no-set-ciphers

      The ''ssl'' module disables insecure cipher suites by default. Therefore, use
      of ''set_ciphers()'' should only be used when you have very specialized requirements.
      Otherwise, you risk lowering the security of the SSL channel.'
    subcategory: Visibility
  severity: warning
- id: Semgrep_python.lang.security.audit.insecure-transport.urllib.insecure-openerdirector-open-ftp.insecure-openerdirector-open-ftp
  languages:
  - python
  message: 'insecure-openerdirector-open-ftp

    Detected an unsecured transmission channel.'
  metadata:
    category: Security
    explanation: '## insecure-openerdirector-open-ftp

      Detected an unsecured transmission channel. ''OpenerDirector.open(...)'' is
      being used with ''ftp://''. Information sent over this connection will be unencrypted.
      Consider using SFTP instead. urllib does not support SFTP, so consider a library
      which supports SFTP.'
    subcategory: Visibility
  severity: warning
- id: Semgrep_python.lang.security.audit.insecure-transport.urllib.insecure-openerdirector-open.insecure-openerdirector-open
  languages:
  - python
  message: 'insecure-openerdirector-open

    Detected an unsecured transmission channel.'
  metadata:
    category: Security
    explanation: '## insecure-openerdirector-open

      Detected an unsecured transmission channel. ''OpenerDirector.open(...)'' is
      being used with ''http://''. Use ''https://'' instead to secure the channel.'
    subcategory: Visibility
  severity: warning
- id: Semgrep_python.lang.security.audit.insecure-transport.urllib.insecure-request-object-ftp.insecure-request-object-ftp
  languages:
  - python
  message: 'insecure-request-object-ftp

    Detected a ''urllib.request.Request()'' object using an insecure transport protocol,
    ''ftp://''. This connection will not be encrypted.'
  metadata:
    category: Security
    explanation: '## insecure-request-object-ftp

      Detected a ''urllib.request.Request()'' object using an insecure transport protocol,
      ''ftp://''. This connection will not be encrypted. Consider using SFTP instead.
      urllib does not support SFTP natively, so consider using a library which supports
      SFTP.'
    subcategory: Visibility
  severity: warning
- id: Semgrep_python.lang.security.audit.insecure-transport.urllib.insecure-request-object.insecure-request-object
  languages:
  - python
  message: 'insecure-request-object

    Detected a ''urllib.request.Request()'' object using an insecure transport protocol,
    ''http://''. This connection will not be encrypted.'
  metadata:
    category: Security
    explanation: '## insecure-request-object

      Detected a ''urllib.request.Request()'' object using an insecure transport protocol,
      ''http://''. This connection will not be encrypted. Use ''https://'' instead.'
    subcategory: Visibility
  severity: warning
- id: Semgrep_python.lang.security.audit.insecure-transport.urllib.insecure-urlopen-ftp.insecure-urlopen-ftp
  languages:
  - python
  message: 'insecure-urlopen-ftp

    Detected ''urllib.urlopen()'' using ''ftp://''. This request will not be encrypted.'
  metadata:
    category: Security
    explanation: '## insecure-urlopen-ftp

      Detected ''urllib.urlopen()'' using ''ftp://''. This request will not be encrypted.
      Consider using SFTP instead. urllib does not support SFTP, so consider switching
      to a library which supports SFTP.'
    subcategory: Visibility
  severity: warning
- id: Semgrep_python.lang.security.audit.insecure-transport.urllib.insecure-urlopen.insecure-urlopen
  languages:
  - python
  message: 'insecure-urlopen

    Detected ''urllib.urlopen()'' using ''http://''. This request will not be encrypted.'
  metadata:
    category: Security
    explanation: '## insecure-urlopen

      Detected ''urllib.urlopen()'' using ''http://''. This request will not be encrypted.
      Use ''https://'' instead.'
    subcategory: Visibility
  severity: warning
- id: Semgrep_python.lang.security.audit.insecure-transport.urllib.insecure-urlopener-open-ftp.insecure-urlopener-open-ftp
  languages:
  - python
  message: 'insecure-urlopener-open-ftp

    Detected an insecure transmission channel.'
  metadata:
    category: Security
    explanation: '## insecure-urlopener-open-ftp

      Detected an insecure transmission channel. ''URLopener.open(...)'' is being
      used with ''ftp://''. Use SFTP instead. urllib does not support SFTP, so consider
      using a library which supports SFTP.'
    subcategory: Visibility
  severity: warning
- id: Semgrep_python.lang.security.audit.insecure-transport.urllib.insecure-urlopener-open.insecure-urlopener-open
  languages:
  - python
  message: 'insecure-urlopener-open

    Detected an unsecured transmission channel.'
  metadata:
    category: Security
    explanation: '## insecure-urlopener-open

      Detected an unsecured transmission channel. ''URLopener.open(...)'' is being
      used with ''http://''. Use ''https://'' instead to secure the channel.'
    subcategory: Visibility
  severity: warning
- id: Semgrep_python.lang.security.audit.insecure-transport.urllib.insecure-urlopener-retrieve-ftp.insecure-urlopener-retrieve-ftp
  languages:
  - python
  message: 'insecure-urlopener-retrieve-ftp

    Detected an insecure transmission channel.'
  metadata:
    category: Security
    explanation: '## insecure-urlopener-retrieve-ftp

      Detected an insecure transmission channel. ''URLopener.retrieve(...)'' is being
      used with ''ftp://''. Use SFTP instead. urllib does not support SFTP, so consider
      using a library which supports SFTP.'
    subcategory: Visibility
  severity: warning
- id: Semgrep_python.lang.security.audit.insecure-transport.urllib.insecure-urlopener-retrieve.insecure-urlopener-retrieve
  languages:
  - python
  message: 'insecure-urlopener-retrieve

    Detected an unsecured transmission channel.'
  metadata:
    category: Security
    explanation: '## insecure-urlopener-retrieve

      Detected an unsecured transmission channel. ''URLopener.retrieve(...)'' is being
      used with ''http://''. Use ''https://'' instead to secure the channel.'
    subcategory: Visibility
  severity: warning
- id: Semgrep_python.lang.security.audit.insecure-transport.urllib.insecure-urlretrieve-ftp.insecure-urlretrieve-ftp
  languages:
  - python
  message: 'insecure-urlretrieve-ftp

    Detected ''urllib.urlretrieve()'' using ''ftp://''. This request will not be encrypted.'
  metadata:
    category: Security
    explanation: '## insecure-urlretrieve-ftp

      Detected ''urllib.urlretrieve()'' using ''ftp://''. This request will not be
      encrypted. Use SFTP instead. urllib does not support SFTP, so consider switching
      to a library which supports SFTP.'
    subcategory: Visibility
  severity: warning
- id: Semgrep_python.lang.security.audit.insecure-transport.urllib.insecure-urlretrieve.insecure-urlretrieve
  languages:
  - python
  message: 'insecure-urlretrieve

    Detected ''urllib.urlretrieve()'' using ''http://''. This request will not be
    encrypted.'
  metadata:
    category: Security
    explanation: '## insecure-urlretrieve

      Detected ''urllib.urlretrieve()'' using ''http://''. This request will not be
      encrypted. Use ''https://'' instead.'
    subcategory: Visibility
  severity: warning
- id: Semgrep_python.lang.security.audit.logging.listeneval.listen-eval
  languages:
  - python
  message: 'listen-eval

    Because portions of the logging configuration are passed through eval(), use of
    this function may open its users to a security risk.'
  metadata:
    category: Security
    explanation: '## listen-eval

      Because portions of the logging configuration are passed through eval(), use
      of this function may open its users to a security risk. While the function only
      binds to a socket on localhost, and so does not accept connections from remote
      machines, there are scenarios where untrusted code could be run under the account
      of the process which calls listen(). To avoid this happening, use the `verify()`
      argument to `listen()` to prevent unrecognized configurations.'
    subcategory: InputValidation
  severity: warning
- id: Semgrep_python.lang.security.audit.logging.logger-credential-leak.python-logger-credential-disclosure
  languages:
  - python
  message: 'python-logger-credential-disclosure

    Detected a python logger call with a potential hardcoded secret $FORMAT_STRING
    being logged.'
  metadata:
    category: Security
    explanation: '## python-logger-credential-disclosure

      Detected a python logger call with a potential hardcoded secret $FORMAT_STRING
      being logged. This may lead to secret credentials being exposed. Make sure that
      the logger is not logging  sensitive information.'
    subcategory: Visibility
  severity: warning
- id: Semgrep_python.lang.security.audit.mako-templates-detected.mako-templates-detected
  languages:
  - python
  message: 'mako-templates-detected

    Mako templates do not provide a global HTML escaping mechanism.'
  metadata:
    category: Security
    explanation: '## mako-templates-detected

      Mako templates do not provide a global HTML escaping mechanism. This means you
      must escape all sensitive data in your templates using ''| u'' for URL escaping
      or ''| h'' for HTML escaping. If you are using Mako to serve web content, consider
      using a system such as Jinja2 which enables global escaping.'
    subcategory: InputValidation
  severity: info
- id: Semgrep_python.lang.security.audit.marshal.marshal-usage
  languages:
  - python
  message: 'marshal-usage

    The marshal module is not intended to be secure against erroneous or maliciously
    constructed data.'
  metadata:
    category: Security
    explanation: '## marshal-usage

      The marshal module is not intended to be secure against erroneous or maliciously
      constructed data. Never unmarshal data received from an untrusted or unauthenticated
      source. See more details: https://docs.python.org/3/library/marshal.html?highlight=security'
    subcategory: InputValidation
  severity: warning
- id: Semgrep_python.lang.security.audit.md5-used-as-password.md5-used-as-password
  languages:
  - python
  message: 'md5-used-as-password

    It looks like MD5 is used as a password hash.'
  metadata:
    category: Security
    explanation: '## md5-used-as-password

      It looks like MD5 is used as a password hash. MD5 is not considered a secure
      password hash because it can be cracked by an attacker in a short amount of
      time. Use a suitable password hashing function such as scrypt. You can use `hashlib.scrypt`.'
    subcategory: Visibility
  severity: warning
- id: Semgrep_python.lang.security.audit.network.bind.avoid-bind-to-all-interfaces
  languages:
  - python
  message: 'avoid-bind-to-all-interfaces

    Running `socket.bind` to 0.0.0.0, or empty string could unexpectedly expose the
    server publicly as it binds to all available interfaces.'
  metadata:
    category: Security
    explanation: '## avoid-bind-to-all-interfaces

      Running `socket.bind` to 0.0.0.0, or empty string could unexpectedly expose
      the server publicly as it binds to all available interfaces. Consider instead
      getting correct address from an environment variable or configuration file.'
    subcategory: InsecureStorage
  severity: info
- id: Semgrep_python.lang.security.audit.network.disabled-cert-validation.disabled-cert-validation
  languages:
  - python
  message: 'disabled-cert-validation

    certificate verification explicitly disabled, insecure connections possible'
  metadata:
    category: Security
    explanation: '## disabled-cert-validation

      certificate verification explicitly disabled, insecure connections possible'
    subcategory: Visibility
  severity: error
- id: Semgrep_python.lang.security.audit.network.http-not-https-connection.http-not-https-connection
  languages:
  - python
  message: 'http-not-https-connection

    Detected HTTPConnectionPool.'
  metadata:
    category: Security
    explanation: '## http-not-https-connection

      Detected HTTPConnectionPool. This will transmit data in cleartext. It is recommended
      to use HTTPSConnectionPool instead for to encrypt communications.'
    subcategory: Visibility
  severity: error
- id: Semgrep_python.lang.security.audit.non-literal-import.non-literal-import
  languages:
  - python
  message: 'non-literal-import

    Untrusted user input in `importlib.import_module()` function allows an attacker
    to load arbitrary code.'
  metadata:
    category: Security
    explanation: '## non-literal-import

      Untrusted user input in `importlib.import_module()` function allows an attacker
      to load arbitrary code. Avoid dynamic values in `importlib.import_module()`
      or use a whitelist to prevent running untrusted code.'
    subcategory: InsecureStorage
  severity: warning
- id: Semgrep_python.lang.security.audit.paramiko-implicit-trust-host-key.paramiko-implicit-trust-host-key
  languages:
  - python
  message: 'paramiko-implicit-trust-host-key

    Detected a paramiko host key policy that implicitly trusts a server''s host key.'
  metadata:
    category: Security
    explanation: '## paramiko-implicit-trust-host-key

      Detected a paramiko host key policy that implicitly trusts a server''s host
      key. Host keys should be verified to ensure the connection is not to a malicious
      server. Use RejectPolicy or a custom subclass instead.'
    subcategory: Cryptography
  severity: warning
- id: Semgrep_python.lang.security.audit.paramiko.paramiko-exec-command.paramiko-exec-command
  languages:
  - python
  message: 'paramiko-exec-command

    Unverified SSL context detected.'
  metadata:
    category: Security
    explanation: '## paramiko-exec-command

      Unverified SSL context detected. This will permit insecure connections without
      verifying SSL certificates. Use ''ssl.create_default_context()'' instead.'
    subcategory: InputValidation
  severity: error
- id: Semgrep_python.lang.security.audit.python-reverse-shell.python-reverse-shell
  languages:
  - python
  message: 'python-reverse-shell

    Semgrep found a Python reverse shell using $BINPATH to $IP at $PORT'
  metadata:
    category: Security
    explanation: '## python-reverse-shell

      Semgrep found a Python reverse shell using $BINPATH to $IP at $PORT'
    subcategory: ''
  severity: warning
- id: Semgrep_python.lang.security.audit.regex-dos.regex_dos
  languages:
  - python
  message: 'regex_dos

    Detected usage of re.compile with an inefficient regular expression.'
  metadata:
    category: Security
    explanation: '## regex_dos

      Detected usage of re.compile with an inefficient regular expression. This can
      lead to regular expression denial of service, which can result in service down
      time. Instead, check all regexes or use safer alternatives such as pyre2.'
    subcategory: Other
  severity: warning
- id: Semgrep_python.lang.security.audit.sqli.aiopg-sqli.aiopg-sqli
  languages:
  - python
  message: 'aiopg-sqli

    Detected string concatenation with a non-literal variable in an aiopg Python SQL
    statement.'
  metadata:
    category: Security
    explanation: '## aiopg-sqli

      Detected string concatenation with a non-literal variable in an aiopg Python
      SQL statement. This could lead to SQL injection if the variable is user-controlled
      and not properly sanitized. In order to prevent SQL injection, use parameterized
      queries instead. You can create parameterized queries like so: ''cur.execute("SELECT
      %s FROM table", (user_value,))''.'
    subcategory: InputValidation
  severity: warning
- id: Semgrep_python.lang.security.audit.sqli.asyncpg-sqli.asyncpg-sqli
  languages:
  - python
  message: 'asyncpg-sqli

    Detected string concatenation with a non-literal variable in a asyncpg Python
    SQL statement.'
  metadata:
    category: Security
    explanation: '## asyncpg-sqli

      Detected string concatenation with a non-literal variable in a asyncpg Python
      SQL statement. This could lead to SQL injection if the variable is user-controlled
      and not properly sanitized. In order to prevent SQL injection, use parameterized
      queries or prepared statements instead. You can create parameterized queries
      like so: ''conn.fetch("SELECT $1 FROM table", value)''. You can also create
      prepared statements with ''Connection.prepare'': ''stmt = conn.prepare("SELECT
      $1 FROM table"); await stmt.fetch(user_value)'''
    subcategory: InputValidation
  severity: warning
- id: Semgrep_python.lang.security.audit.sqli.pg8000-sqli.pg8000-sqli
  languages:
  - python
  message: 'pg8000-sqli

    Detected string concatenation with a non-literal variable in a pg8000 Python SQL
    statement.'
  metadata:
    category: Security
    explanation: '## pg8000-sqli

      Detected string concatenation with a non-literal variable in a pg8000 Python
      SQL statement. This could lead to SQL injection if the variable is user-controlled
      and not properly sanitized. In order to prevent SQL injection, use parameterized
      queries or prepared statements instead. You can create parameterized queries
      like so: ''conn.run("SELECT :value FROM table", value=myvalue)''. You can also
      create prepared statements with ''conn.prepare'': ''conn.prepare("SELECT (:v)
      FROM table")'''
    subcategory: InputValidation
  severity: warning
- id: Semgrep_python.lang.security.audit.sqli.psycopg-sqli.psycopg-sqli
  languages:
  - python
  message: 'psycopg-sqli

    Detected string concatenation with a non-literal variable in a psycopg2 Python
    SQL statement.'
  metadata:
    category: Security
    explanation: '## psycopg-sqli

      Detected string concatenation with a non-literal variable in a psycopg2 Python
      SQL statement. This could lead to SQL injection if the variable is user-controlled
      and not properly sanitized. In order to prevent SQL injection, use parameterized
      queries or prepared statements instead. You can use prepared statements by creating
      a ''sql.SQL'' string. You can also use the pyformat binding style to create
      parameterized queries. For example: ''cur.execute(SELECT * FROM table WHERE
      name=%s, user_input)'''
    subcategory: InputValidation
  severity: warning
- id: Semgrep_python.lang.security.audit.ssl-wrap-socket-is-deprecated.ssl-wrap-socket-is-deprecated
  languages:
  - python
  message: 'ssl-wrap-socket-is-deprecated

    ''ssl.wrap_socket()'' is deprecated.'
  metadata:
    category: Security
    explanation: '## ssl-wrap-socket-is-deprecated

      ''ssl.wrap_socket()'' is deprecated. This function creates an insecure socket
      without server name indication or hostname matching. Instead, create an SSL
      context using ''ssl.SSLContext()'' and use that to wrap a socket.'
    subcategory: Visibility
  severity: warning
- id: Semgrep_python.lang.security.audit.subprocess-shell-true.subprocess-shell-true
  languages:
  - python
  message: 'subprocess-shell-true

    Found ''subprocess'' function ''$FUNC'' with ''shell=True''. This is dangerous
    because this call will spawn the command using a shell process.'
  metadata:
    category: Security
    explanation: '## subprocess-shell-true

      Found ''subprocess'' function ''$FUNC'' with ''shell=True''. This is dangerous
      because this call will spawn the command using a shell process. Doing so propagates
      current shell settings and variables, which makes it much easier for a malicious
      actor to execute commands. Use ''shell=False'' instead.'
    subcategory: InputValidation
  severity: error
- id: Semgrep_python.lang.security.audit.system-wildcard-detected.system-wildcard-detected
  languages:
  - python
  message: 'system-wildcard-detected

    Detected use of the wildcard character in a system call that spawns a shell.'
  metadata:
    category: Security
    explanation: '## system-wildcard-detected

      Detected use of the wildcard character in a system call that spawns a shell.
      This subjects the wildcard to normal shell expansion, which can have unintended
      consequences if there exist any non-standard file names. Consider a file named
      ''-e sh script.sh'' -- this will execute a script when ''rsync'' is called.
      See https://www.defensecode.com/public/DefenseCode_Unix_WildCards_Gone_Wild.txt
      for more information.'
    subcategory: InputValidation
  severity: warning
- id: Semgrep_python.lang.security.audit.telnetlib.telnetlib
  languages:
  - python
  message: 'telnetlib

    Telnet does not encrypt communications.'
  metadata:
    category: Security
    explanation: '## telnetlib

      Telnet does not encrypt communications. Use SSH instead.'
    subcategory: Visibility
  severity: warning
- id: Semgrep_python.lang.security.audit.weak-ssl-version.weak-ssl-version
  languages:
  - python
  message: 'weak-ssl-version

    An insecure SSL version was detected.'
  metadata:
    category: Security
    explanation: '## weak-ssl-version

      An insecure SSL version was detected. TLS versions 1.0, 1.1, and all SSL versions
      are considered weak encryption and are deprecated. Use ''ssl.PROTOCOL_TLSv1_2''
      or higher.'
    subcategory: Visibility
  severity: warning
- id: Semgrep_python.lang.security.dangerous-code-run.dangerous-interactive-code-run
  languages:
  - python
  message: 'dangerous-interactive-code-run

    Found user controlled data inside InteractiveConsole/InteractiveInterpreter method.'
  metadata:
    category: Security
    explanation: '## dangerous-interactive-code-run

      Found user controlled data inside InteractiveConsole/InteractiveInterpreter
      method. This is dangerous if external data can reach this function call because
      it allows a malicious actor to run arbitrary Python code.'
    subcategory: InputValidation
  severity: warning
- id: Semgrep_python.lang.security.dangerous-globals-use.dangerous-globals-use
  languages:
  - python
  message: 'dangerous-globals-use

    Found non static data as an index to ''globals()''. This is extremely dangerous
    because it allows an attacker to execute arbitrary code on the system.'
  metadata:
    category: Security
    explanation: '## dangerous-globals-use

      Found non static data as an index to ''globals()''. This is extremely dangerous
      because it allows an attacker to execute arbitrary code on the system. Refactor
      your code not to use ''globals()''.'
    subcategory: InputValidation
  severity: warning
- id: Semgrep_python.lang.security.dangerous-os-exec.dangerous-os-exec
  languages:
  - python
  message: 'dangerous-os-exec

    Found user controlled content when spawning a process.'
  metadata:
    category: Security
    explanation: '## dangerous-os-exec

      Found user controlled content when spawning a process. This is dangerous because
      it allows a malicious actor to execute commands.'
    subcategory: InputValidation
  severity: error
- id: Semgrep_python.lang.security.dangerous-spawn-process.dangerous-spawn-process
  languages:
  - python
  message: 'dangerous-spawn-process

    Found user controlled content when spawning a process.'
  metadata:
    category: Security
    explanation: '## dangerous-spawn-process

      Found user controlled content when spawning a process. This is dangerous because
      it allows a malicious actor to execute commands.'
    subcategory: InputValidation
  severity: error
- id: Semgrep_python.lang.security.dangerous-subinterpreters-run-string.dangerous-subinterpreters-run-string
  languages:
  - python
  message: 'dangerous-subinterpreters-run-string

    Found user controlled content in `run_string`. This is dangerous because it allows
    a malicious actor to run arbitrary Python code.'
  metadata:
    category: Security
    explanation: '## dangerous-subinterpreters-run-string

      Found user controlled content in `run_string`. This is dangerous because it
      allows a malicious actor to run arbitrary Python code.'
    subcategory: InputValidation
  severity: warning
- id: Semgrep_python.lang.security.dangerous-subprocess-use.dangerous-subprocess-use
  languages:
  - python
  message: 'dangerous-subprocess-use

    Detected subprocess function ''$FUNC'' with user controlled data.'
  metadata:
    category: Security
    explanation: '## dangerous-subprocess-use

      Detected subprocess function ''$FUNC'' with user controlled data. A malicious
      actor could leverage this to perform command injection. You may consider using
      ''shlex.escape()''.'
    subcategory: InputValidation
  severity: error
- id: Semgrep_python.lang.security.dangerous-system-call.dangerous-system-call
  languages:
  - python
  message: 'dangerous-system-call

    Found user-controlled data used in a system call.'
  metadata:
    category: Security
    explanation: '## dangerous-system-call

      Found user-controlled data used in a system call. This could allow a malicious
      actor to execute commands. Use the ''subprocess'' module instead, which is easier
      to use without accidentally exposing a command injection vulnerability.'
    subcategory: InputValidation
  severity: error
- id: Semgrep_python.lang.security.dangerous-testcapi-run-in-subinterp.dangerous-testcapi-run-in-subinterp
  languages:
  - python
  message: 'dangerous-testcapi-run-in-subinterp

    Found user controlled content in `run_in_subinterp`. This is dangerous because
    it allows a malicious actor to run arbitrary Python code.'
  metadata:
    category: Security
    explanation: '## dangerous-testcapi-run-in-subinterp

      Found user controlled content in `run_in_subinterp`. This is dangerous because
      it allows a malicious actor to run arbitrary Python code.'
    subcategory: InputValidation
  severity: warning
- id: Semgrep_python.lang.security.deserialization.avoid-jsonpickle.avoid-jsonpickle
  languages:
  - python
  message: 'avoid-jsonpickle

    Avoid using `jsonpickle`, which is known to lead to code execution vulnerabilities.'
  metadata:
    category: Security
    explanation: '## avoid-jsonpickle

      Avoid using `jsonpickle`, which is known to lead to code execution vulnerabilities.
      When unpickling, the serialized data could be manipulated to run arbitrary code.
      Instead, consider serializing the relevant data using `json` module.'
    subcategory: InputValidation
  severity: warning
- id: Semgrep_python.lang.security.deserialization.avoid-pyyaml-load.avoid-pyyaml-load
  languages:
  - python
  message: 'avoid-pyyaml-load

    Detected a possible YAML deserialization vulnerability. `yaml.unsafe_load`, `yaml.Loader`,
    `yaml.CLoader`, and `yaml.UnsafeLoader` are all known to be unsafe methods of
    deserializing YAML. An attacker with control over the YAML input could create
    special YAML input that allows the attacker to run arbitrary Python code.'
  metadata:
    category: Security
    explanation: '## avoid-pyyaml-load

      Detected a possible YAML deserialization vulnerability. `yaml.unsafe_load`,
      `yaml.Loader`, `yaml.CLoader`, and `yaml.UnsafeLoader` are all known to be unsafe
      methods of deserializing YAML. An attacker with control over the YAML input
      could create special YAML input that allows the attacker to run arbitrary Python
      code. This would allow the attacker to steal files, download and install malware,
      or otherwise take over the machine. Use `yaml.safe_load` or `yaml.SafeLoader`
      instead.'
    subcategory: InputValidation
  severity: error
- id: Semgrep_python.lang.security.deserialization.avoid-unsafe-ruamel.avoid-unsafe-ruamel
  languages:
  - python
  message: 'avoid-unsafe-ruamel

    Avoid using unsafe `ruamel.yaml.YAML()`. `ruamel.yaml.YAML` can create arbitrary
    Python objects.'
  metadata:
    category: Security
    explanation: '## avoid-unsafe-ruamel

      Avoid using unsafe `ruamel.yaml.YAML()`. `ruamel.yaml.YAML` can create arbitrary
      Python objects. A malicious actor could exploit this to run arbitrary code.
      Use `YAML(typ=''rt'')` or `YAML(typ=''safe'')` instead.'
    subcategory: InputValidation
  severity: error
- id: Semgrep_python.lang.security.deserialization.pickle.avoid-cpickle
  languages:
  - python
  message: 'avoid-cpickle

    Avoid using `cPickle`, which is known to lead to code execution vulnerabilities.'
  metadata:
    category: Security
    explanation: '## avoid-cpickle

      Avoid using `cPickle`, which is known to lead to code execution vulnerabilities.
      When unpickling, the serialized data could be manipulated to run arbitrary code.
      Instead, consider serializing the relevant data as JSON or a similar text-based
      serialization format.'
    subcategory: InputValidation
  severity: warning
- id: Semgrep_python.lang.security.deserialization.pickle.avoid-dill
  languages:
  - python
  message: 'avoid-dill

    Avoid using `dill`, which uses `pickle`, which is known to lead to code execution
    vulnerabilities.'
  metadata:
    category: Security
    explanation: '## avoid-dill

      Avoid using `dill`, which uses `pickle`, which is known to lead to code execution
      vulnerabilities. When unpickling, the serialized data could be manipulated to
      run arbitrary code. Instead, consider serializing the relevant data as JSON
      or a similar text-based serialization format.'
    subcategory: InputValidation
  severity: warning
- id: Semgrep_python.lang.security.deserialization.pickle.avoid-pickle
  languages:
  - python
  message: 'avoid-pickle

    Avoid using `pickle`, which is known to lead to code execution vulnerabilities.'
  metadata:
    category: Security
    explanation: '## avoid-pickle

      Avoid using `pickle`, which is known to lead to code execution vulnerabilities.
      When unpickling, the serialized data could be manipulated to run arbitrary code.
      Instead, consider serializing the relevant data as JSON or a similar text-based
      serialization format.'
    subcategory: InputValidation
  severity: warning
- id: Semgrep_python.lang.security.deserialization.pickle.avoid-shelve
  languages:
  - python
  message: 'avoid-shelve

    Avoid using `shelve`, which uses `pickle`, which is known to lead to code execution
    vulnerabilities.'
  metadata:
    category: Security
    explanation: '## avoid-shelve

      Avoid using `shelve`, which uses `pickle`, which is known to lead to code execution
      vulnerabilities. When unpickling, the serialized data could be manipulated to
      run arbitrary code. Instead, consider serializing the relevant data as JSON
      or a similar text-based serialization format.'
    subcategory: InputValidation
  severity: warning
- id: Semgrep_python.lang.security.insecure-hash-algorithms-md5.insecure-hash-algorithm-md5
  languages:
  - python
  message: 'insecure-hash-algorithm-md5

    Detected MD5 hash algorithm which is considered insecure.'
  metadata:
    category: Security
    explanation: '## insecure-hash-algorithm-md5

      Detected MD5 hash algorithm which is considered insecure. MD5 is not collision
      resistant and is therefore not suitable as a cryptographic signature. Use SHA256
      or SHA3 instead.'
    subcategory: Visibility
  severity: warning
- id: Semgrep_python.lang.security.insecure-hash-algorithms.insecure-hash-algorithm-sha1
  languages:
  - python
  message: 'insecure-hash-algorithm-sha1

    Detected SHA1 hash algorithm which is considered insecure.'
  metadata:
    category: Security
    explanation: '## insecure-hash-algorithm-sha1

      Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision
      resistant and is therefore not suitable as a cryptographic signature. Use SHA256
      or SHA3 instead.'
    subcategory: Visibility
  severity: warning
- id: Semgrep_python.lang.security.insecure-hash-function.insecure-hash-function
  languages:
  - python
  message: 'insecure-hash-function

    Detected use of an insecure MD4 or MD5 hash function.'
  metadata:
    category: Security
    explanation: '## insecure-hash-function

      Detected use of an insecure MD4 or MD5 hash function. These functions have known
      vulnerabilities and are considered deprecated. Consider using ''SHA256'' or
      a similar function instead.'
    subcategory: Visibility
  severity: warning
- id: Semgrep_python.lang.security.unverified-ssl-context.unverified-ssl-context
  languages:
  - python
  message: 'unverified-ssl-context

    Unverified SSL context detected.'
  metadata:
    category: Security
    explanation: '## unverified-ssl-context

      Unverified SSL context detected. This will permit insecure connections without
      verifying SSL certificates. Use ''ssl.create_default_context'' instead.'
    subcategory: Visibility
  severity: error
- id: Semgrep_python.lang.security.use-defused-xml-parse.use-defused-xml-parse
  languages:
  - python
  message: 'use-defused-xml-parse

    The native Python `xml` library is vulnerable to XML External Entity (XXE) attacks.'
  metadata:
    category: Security
    explanation: '## use-defused-xml-parse

      The native Python `xml` library is vulnerable to XML External Entity (XXE) attacks.  These
      attacks can leak confidential data and "XML bombs" can cause denial of service.
      Do not use this library to parse untrusted input. Instead  the Python documentation
      recommends using `defusedxml`.'
    subcategory: InputValidation
  severity: error
- id: Semgrep_python.lang.security.use-defused-xml.use-defused-xml
  languages:
  - python
  message: 'use-defused-xml

    The Python documentation recommends using `defusedxml` instead of `xml` because
    the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks.'
  metadata:
    category: Security
    explanation: '## use-defused-xml

      The Python documentation recommends using `defusedxml` instead of `xml` because
      the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks.
      These attacks can leak confidential data and "XML bombs" can cause denial of
      service.'
    subcategory: InputValidation
  severity: error
- id: Semgrep_python.lang.security.use-defused-xmlrpc.use-defused-xmlrpc
  languages:
  - python
  message: 'use-defused-xmlrpc

    Detected use of xmlrpc. xmlrpc is not inherently safe from vulnerabilities.'
  metadata:
    category: Security
    explanation: '## use-defused-xmlrpc

      Detected use of xmlrpc. xmlrpc is not inherently safe from vulnerabilities.
      Use defusedxml.xmlrpc instead.'
    subcategory: InputValidation
  severity: error
- id: Semgrep_python.lang.security.use-defusedcsv.use-defusedcsv
  languages:
  - python
  message: 'use-defusedcsv

    Detected the generation of a CSV file using the built-in `csv` module.'
  metadata:
    category: Security
    explanation: '## use-defusedcsv

      Detected the generation of a CSV file using the built-in `csv` module. If user
      data is used to generate the data in this file, it is possible that an attacker
      could inject a formula when the CSV is imported into a spreadsheet application
      that runs an attacker script, which could steal data from the importing user
      or, at worst, install malware on the user''s computer. `defusedcsv` is a drop-in
      replacement with the same API that will attempt to mitigate formula injection
      attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs.'
    subcategory: InputValidation
  severity: info
- id: Semgrep_python.pycryptodome.security.insecure-cipher-algorithm-blowfish.insecure-cipher-algorithm-blowfish
  languages:
  - python
  message: 'insecure-cipher-algorithm-blowfish

    Detected Blowfish cipher algorithm which is considered insecure.'
  metadata:
    category: Security
    explanation: '## insecure-cipher-algorithm-blowfish

      Detected Blowfish cipher algorithm which is considered insecure. This algorithm
      is not cryptographically secure and can be reversed easily. Use AES instead.'
    subcategory: Visibility
  severity: warning
- id: Semgrep_python.pycryptodome.security.insecure-cipher-algorithm-des.insecure-cipher-algorithm-des
  languages:
  - python
  message: 'insecure-cipher-algorithm-des

    Detected DES cipher algorithm which is considered insecure.'
  metadata:
    category: Security
    explanation: '## insecure-cipher-algorithm-des

      Detected DES cipher algorithm which is considered insecure. This algorithm is
      not cryptographically secure and can be reversed easily. Use AES instead.'
    subcategory: Visibility
  severity: warning
- id: Semgrep_python.pycryptodome.security.insecure-cipher-algorithm-rc2.insecure-cipher-algorithm-rc2
  languages:
  - python
  message: 'insecure-cipher-algorithm-rc2

    Detected RC2 cipher algorithm which is considered insecure.'
  metadata:
    category: Security
    explanation: '## insecure-cipher-algorithm-rc2

      Detected RC2 cipher algorithm which is considered insecure. This algorithm is
      not cryptographically secure and can be reversed easily. Use AES instead.'
    subcategory: Visibility
  severity: warning
- id: Semgrep_python.pycryptodome.security.insecure-cipher-algorithm-rc4.insecure-cipher-algorithm-rc4
  languages:
  - python
  message: 'insecure-cipher-algorithm-rc4

    Detected ARC4 cipher algorithm which is considered insecure.'
  metadata:
    category: Security
    explanation: '## insecure-cipher-algorithm-rc4

      Detected ARC4 cipher algorithm which is considered insecure. This algorithm
      is not cryptographically secure and can be reversed easily. Use AES instead.'
    subcategory: Visibility
  severity: warning
- id: Semgrep_python.pycryptodome.security.insecure-cipher-algorithm.insecure-cipher-algorithm-xor
  languages:
  - python
  message: 'insecure-cipher-algorithm-xor

    Detected XOR cipher algorithm which is considered insecure.'
  metadata:
    category: Security
    explanation: '## insecure-cipher-algorithm-xor

      Detected XOR cipher algorithm which is considered insecure. This algorithm is
      not cryptographically secure and can be reversed easily. Use AES instead.'
    subcategory: Visibility
  severity: warning
- id: Semgrep_python.pycryptodome.security.insecure-hash-algorithm-md2.insecure-hash-algorithm-md2
  languages:
  - python
  message: 'insecure-hash-algorithm-md2

    Detected MD2 hash algorithm which is considered insecure.'
  metadata:
    category: Security
    explanation: '## insecure-hash-algorithm-md2

      Detected MD2 hash algorithm which is considered insecure. MD2 is not collision
      resistant and is therefore not suitable as a cryptographic signature. Use SHA256
      or SHA3 instead.'
    subcategory: Visibility
  severity: warning
- id: Semgrep_python.pycryptodome.security.insecure-hash-algorithm-md4.insecure-hash-algorithm-md4
  languages:
  - python
  message: 'insecure-hash-algorithm-md4

    Detected MD4 hash algorithm which is considered insecure.'
  metadata:
    category: Security
    explanation: '## insecure-hash-algorithm-md4

      Detected MD4 hash algorithm which is considered insecure. MD4 is not collision
      resistant and is therefore not suitable as a cryptographic signature. Use SHA256
      or SHA3 instead.'
    subcategory: Visibility
  severity: warning
- id: Semgrep_python.pycryptodome.security.insecure-hash-algorithm-md5.insecure-hash-algorithm-md5
  languages:
  - python
  message: 'insecure-hash-algorithm-md5

    Detected MD5 hash algorithm which is considered insecure.'
  metadata:
    category: Security
    explanation: '## insecure-hash-algorithm-md5

      Detected MD5 hash algorithm which is considered insecure. MD5 is not collision
      resistant and is therefore not suitable as a cryptographic signature. Use SHA256
      or SHA3 instead.'
    subcategory: Visibility
  severity: warning
- id: Semgrep_python.pycryptodome.security.insecure-hash-algorithm.insecure-hash-algorithm-sha1
  languages:
  - python
  message: 'insecure-hash-algorithm-sha1

    Detected SHA1 hash algorithm which is considered insecure.'
  metadata:
    category: Security
    explanation: '## insecure-hash-algorithm-sha1

      Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision
      resistant and is therefore not suitable as a cryptographic signature. Use SHA256
      or SHA3 instead.'
    subcategory: Visibility
  severity: warning
- id: Semgrep_python.pycryptodome.security.insufficient-dsa-key-size.insufficient-dsa-key-size
  languages:
  - python
  message: 'insufficient-dsa-key-size

    Detected an insufficient key size for DSA. NIST recommends a key size of 2048
    or higher.'
  metadata:
    category: Security
    explanation: '## insufficient-dsa-key-size

      Detected an insufficient key size for DSA. NIST recommends a key size of 2048
      or higher.'
    subcategory: Visibility
  severity: warning
- id: Semgrep_python.pycryptodome.security.insufficient-rsa-key-size.insufficient-rsa-key-size
  languages:
  - python
  message: 'insufficient-rsa-key-size

    Detected an insufficient key size for RSA. NIST recommends a key size of 2048
    or higher.'
  metadata:
    category: Security
    explanation: '## insufficient-rsa-key-size

      Detected an insufficient key size for RSA. NIST recommends a key size of 2048
      or higher.'
    subcategory: Visibility
  severity: warning
- id: Semgrep_python.pycryptodome.security.mode-without-authentication.crypto-mode-without-authentication
  languages:
  - python
  message: 'crypto-mode-without-authentication

    An encryption mode of operation is being used without proper message authentication.'
  metadata:
    category: Security
    explanation: '## crypto-mode-without-authentication

      An encryption mode of operation is being used without proper message authentication.
      This can potentially result in the encrypted content to be decrypted by an attacker.
      Consider instead use an AEAD mode of operation like GCM. '
    subcategory: Visibility
  severity: error
- id: Semgrep_python.pymongo.security.mongodb.mongo-client-bad-auth
  languages:
  - python
  message: 'mongo-client-bad-auth

    Warning MONGODB-CR was deprecated with the release of MongoDB 3.6 and is no longer
    supported by MongoDB 4.0 (see https://api.mongodb.com/python/current/examples/authentication.html
    for details).'
  metadata:
    category: Security
    explanation: '## mongo-client-bad-auth

      Warning MONGODB-CR was deprecated with the release of MongoDB 3.6 and is no
      longer supported by MongoDB 4.0 (see https://api.mongodb.com/python/current/examples/authentication.html
      for details).'
    subcategory: ''
  severity: warning
- id: Semgrep_python.pyramid.audit.authtkt-cookie-httponly-unsafe-default.pyramid-authtkt-cookie-httponly-unsafe-default
  languages:
  - python
  message: 'pyramid-authtkt-cookie-httponly-unsafe-default

    Found a Pyramid Authentication Ticket cookie without the httponly option correctly
    set.'
  metadata:
    category: Security
    explanation: '## pyramid-authtkt-cookie-httponly-unsafe-default

      Found a Pyramid Authentication Ticket cookie without the httponly option correctly
      set. Pyramid cookies should be handled securely by setting httponly=True. If
      this parameter is not properly set, your cookies are not properly protected
      and are at risk of being stolen by an attacker.'
    subcategory: Other
  severity: warning
- id: Semgrep_python.pyramid.audit.authtkt-cookie-httponly-unsafe-value.pyramid-authtkt-cookie-httponly-unsafe-value
  languages:
  - python
  message: 'pyramid-authtkt-cookie-httponly-unsafe-value

    Found a Pyramid Authentication Ticket cookie without the httponly option correctly
    set.'
  metadata:
    category: Security
    explanation: '## pyramid-authtkt-cookie-httponly-unsafe-value

      Found a Pyramid Authentication Ticket cookie without the httponly option correctly
      set. Pyramid cookies should be handled securely by setting httponly=True. If
      this parameter is not properly set, your cookies are not properly protected
      and are at risk of being stolen by an attacker.'
    subcategory: Other
  severity: warning
- id: Semgrep_python.pyramid.audit.authtkt-cookie-samesite.pyramid-authtkt-cookie-samesite
  languages:
  - python
  message: 'pyramid-authtkt-cookie-samesite

    Found a Pyramid Authentication Ticket without the samesite option correctly set.'
  metadata:
    category: Security
    explanation: '## pyramid-authtkt-cookie-samesite

      Found a Pyramid Authentication Ticket without the samesite option correctly
      set. Pyramid cookies should be handled securely by setting samesite=''Lax''.
      If this parameter is not properly set, your cookies are not properly protected
      and are at risk of being stolen by an attacker.'
    subcategory: InsecureStorage
  severity: warning
- id: Semgrep_python.pyramid.audit.authtkt-cookie-secure-unsafe-default.pyramid-authtkt-cookie-secure-unsafe-default
  languages:
  - python
  message: 'pyramid-authtkt-cookie-secure-unsafe-default

    Found a Pyramid Authentication Ticket cookie using an unsafe default for the secure
    option.'
  metadata:
    category: Security
    explanation: '## pyramid-authtkt-cookie-secure-unsafe-default

      Found a Pyramid Authentication Ticket cookie using an unsafe default for the
      secure option. Pyramid cookies should be handled securely by setting secure=True.
      If this parameter is not properly set, your cookies are not properly protected
      and are at risk of being stolen by an attacker.'
    subcategory: Other
  severity: warning
- id: Semgrep_python.pyramid.audit.authtkt-cookie-secure-unsafe-value.pyramid-authtkt-cookie-secure-unsafe-value
  languages:
  - python
  message: 'pyramid-authtkt-cookie-secure-unsafe-value

    Found a Pyramid Authentication Ticket cookie without the secure option correctly
    set.'
  metadata:
    category: Security
    explanation: '## pyramid-authtkt-cookie-secure-unsafe-value

      Found a Pyramid Authentication Ticket cookie without the secure option correctly
      set. Pyramid cookies should be handled securely by setting secure=True. If this
      parameter is not properly set, your cookies are not properly protected and are
      at risk of being stolen by an attacker.'
    subcategory: Other
  severity: warning
- id: Semgrep_python.pyramid.audit.csrf-check-disabled.pyramid-csrf-check-disabled
  languages:
  - python
  message: 'pyramid-csrf-check-disabled

    CSRF protection is disabled for this view.'
  metadata:
    category: Security
    explanation: '## pyramid-csrf-check-disabled

      CSRF protection is disabled for this view. This is a security risk.'
    subcategory: InsecureStorage
  severity: warning
- id: Semgrep_python.pyramid.audit.csrf-origin-check-disabled-globally.pyramid-csrf-origin-check-disabled-globally
  languages:
  - python
  message: 'pyramid-csrf-origin-check-disabled-globally

    Automatic check of the referrer for cross-site request forgery tokens has been
    explicitly disabled globally, which might leave views unprotected when an unsafe
    CSRF storage policy is used.'
  metadata:
    category: Security
    explanation: '## pyramid-csrf-origin-check-disabled-globally

      Automatic check of the referrer for cross-site request forgery tokens has been
      explicitly disabled globally, which might leave views unprotected when an unsafe
      CSRF storage policy is used. Use ''pyramid.config.Configurator.set_default_csrf_options(check_origin=True)''
      to turn the automatic check for all unsafe methods (per RFC2616).'
    subcategory: InsecureStorage
  severity: error
- id: Semgrep_python.pyramid.audit.csrf-origin-check-disabled.pyramid-csrf-origin-check-disabled
  languages:
  - python
  message: 'pyramid-csrf-origin-check-disabled

    Origin check for the CSRF token is disabled for this view.'
  metadata:
    category: Security
    explanation: '## pyramid-csrf-origin-check-disabled

      Origin check for the CSRF token is disabled for this view. This might represent
      a security risk if the CSRF storage policy is not known to be secure.'
    subcategory: InsecureStorage
  severity: warning
- id: Semgrep_python.pyramid.audit.set-cookie-httponly-unsafe-default.pyramid-set-cookie-httponly-unsafe-default
  languages:
  - python
  message: 'pyramid-set-cookie-httponly-unsafe-default

    Found a Pyramid cookie using an unsafe default for the httponly option.'
  metadata:
    category: Security
    explanation: '## pyramid-set-cookie-httponly-unsafe-default

      Found a Pyramid cookie using an unsafe default for the httponly option. Pyramid
      cookies should be handled securely by setting httponly=True in response.set_cookie(...).
      If this parameter is not properly set, your cookies are not properly protected
      and are at risk of being stolen by an attacker.'
    subcategory: Other
  severity: warning
- id: Semgrep_python.pyramid.audit.set-cookie-httponly-unsafe-value.pyramid-set-cookie-httponly-unsafe-value
  languages:
  - python
  message: 'pyramid-set-cookie-httponly-unsafe-value

    Found a Pyramid cookie without the httponly option correctly set.'
  metadata:
    category: Security
    explanation: '## pyramid-set-cookie-httponly-unsafe-value

      Found a Pyramid cookie without the httponly option correctly set. Pyramid cookies
      should be handled securely by setting httponly=True in response.set_cookie(...).
      If this parameter is not properly set, your cookies are not properly protected
      and are at risk of being stolen by an attacker.'
    subcategory: Other
  severity: warning
- id: Semgrep_python.pyramid.audit.set-cookie-samesite-unsafe-default.pyramid-set-cookie-samesite-unsafe-default
  languages:
  - python
  message: 'pyramid-set-cookie-samesite-unsafe-default

    Found a Pyramid cookie using an unsafe value for the samesite option.'
  metadata:
    category: Security
    explanation: '## pyramid-set-cookie-samesite-unsafe-default

      Found a Pyramid cookie using an unsafe value for the samesite option. Pyramid
      cookies should be handled securely by setting samesite=''Lax'' in response.set_cookie(...).
      If this parameter is not properly set, your cookies are not properly protected
      and are at risk of being stolen by an attacker.'
    subcategory: InsecureStorage
  severity: warning
- id: Semgrep_python.pyramid.audit.set-cookie-samesite-unsafe-value.pyramid-set-cookie-samesite-unsafe-value
  languages:
  - python
  message: 'pyramid-set-cookie-samesite-unsafe-value

    Found a Pyramid cookie without the samesite option correctly set.'
  metadata:
    category: Security
    explanation: '## pyramid-set-cookie-samesite-unsafe-value

      Found a Pyramid cookie without the samesite option correctly set. Pyramid cookies
      should be handled securely by setting samesite=''Lax'' in response.set_cookie(...).
      If this parameter is not properly set, your cookies are not properly protected
      and are at risk of being stolen by an attacker.'
    subcategory: InsecureStorage
  severity: warning
- id: Semgrep_python.pyramid.audit.set-cookie-secure-unsafe-default.pyramid-set-cookie-secure-unsafe-default
  languages:
  - python
  message: 'pyramid-set-cookie-secure-unsafe-default

    Found a Pyramid cookie using an unsafe default for the secure option.'
  metadata:
    category: Security
    explanation: '## pyramid-set-cookie-secure-unsafe-default

      Found a Pyramid cookie using an unsafe default for the secure option. Pyramid
      cookies should be handled securely by setting secure=True in response.set_cookie(...).
      If this parameter is not properly set, your cookies are not properly protected
      and are at risk of being stolen by an attacker.'
    subcategory: Other
  severity: warning
- id: Semgrep_python.pyramid.audit.set-cookie-secure-unsafe-value.pyramid-set-cookie-secure-unsafe-value
  languages:
  - python
  message: 'pyramid-set-cookie-secure-unsafe-value

    Found a Pyramid cookie without the secure option correctly set.'
  metadata:
    category: Security
    explanation: '## pyramid-set-cookie-secure-unsafe-value

      Found a Pyramid cookie without the secure option correctly set. Pyramid cookies
      should be handled securely by setting secure=True in response.set_cookie(...).
      If this parameter is not properly set, your cookies are not properly protected
      and are at risk of being stolen by an attacker.'
    subcategory: Other
  severity: warning
- id: Semgrep_python.pyramid.security.csrf-check-disabled-globally.pyramid-csrf-check-disabled-globally
  languages:
  - python
  message: 'pyramid-csrf-check-disabled-globally

    Automatic check of cross-site request forgery tokens has been explicitly disabled
    globally, which might leave views unprotected.'
  metadata:
    category: Security
    explanation: '## pyramid-csrf-check-disabled-globally

      Automatic check of cross-site request forgery tokens has been explicitly disabled
      globally, which might leave views unprotected. Use ''pyramid.config.Configurator.set_default_csrf_options(require_csrf=True)''
      to turn the automatic check for all unsafe methods (per RFC2616).'
    subcategory: InsecureStorage
  severity: error
- id: Semgrep_python.pyramid.security.direct-use-of-response.pyramid-direct-use-of-response
  languages:
  - python
  message: 'pyramid-direct-use-of-response

    Detected data rendered directly to the end user via ''Response''. This bypasses
    Pyramid''s built-in cross-site scripting (XSS) defenses and could result in an
    XSS vulnerability.'
  metadata:
    category: Security
    explanation: '## pyramid-direct-use-of-response

      Detected data rendered directly to the end user via ''Response''. This bypasses
      Pyramid''s built-in cross-site scripting (XSS) defenses and could result in
      an XSS vulnerability. Use Pyramid''s template engines to safely render HTML.'
    subcategory: InputValidation
  severity: error
- id: Semgrep_python.pyramid.security.sqlalchemy-sql-injection.pyramid-sqlalchemy-sql-injection
  languages:
  - python
  message: 'pyramid-sqlalchemy-sql-injection

    Distinct, Having, Group_by, Order_by, and Filter in SQLAlchemy can cause sql injections
    if the developer inputs raw SQL into the before-mentioned clauses.'
  metadata:
    category: Security
    explanation: '## pyramid-sqlalchemy-sql-injection

      Distinct, Having, Group_by, Order_by, and Filter in SQLAlchemy can cause sql
      injections if the developer inputs raw SQL into the before-mentioned clauses.
      This pattern captures relevant cases in which the developer inputs raw SQL into
      the distinct, having, group_by, order_by or filter clauses and injects user-input
      into the raw SQL with any function besides "bindparams". Use bindParams to securely
      bind user-input to SQL statements.'
    subcategory: InputValidation
  severity: error
- id: Semgrep_python.requests.security.disabled-cert-validation.disabled-cert-validation
  languages:
  - python
  message: 'disabled-cert-validation

    Certificate verification has been explicitly disabled.'
  metadata:
    category: Security
    explanation: '## disabled-cert-validation

      Certificate verification has been explicitly disabled. This permits insecure
      connections to insecure servers. Re-enable certification validation.'
    subcategory: Visibility
  severity: error
- id: Semgrep_python.requests.security.no-auth-over-http.no-auth-over-http
  languages:
  - python
  message: 'no-auth-over-http

    Authentication detected over HTTP. HTTP does not provide any encryption or protection
    for these authentication credentials.'
  metadata:
    category: Security
    explanation: '## no-auth-over-http

      Authentication detected over HTTP. HTTP does not provide any encryption or protection
      for these authentication credentials. This may expose these credentials to unauthorized
      parties. Use ''https://'' instead.'
    subcategory: Auth
  severity: error
- id: Semgrep_python.sh.security.string-concat.string-concat
  languages:
  - python
  message: 'string-concat

    Detected string concatenation or formatting in a call to a command via ''sh''.
    This could be a command injection vulnerability if the data is user-controlled.'
  metadata:
    category: Security
    explanation: '## string-concat

      Detected string concatenation or formatting in a call to a command via ''sh''.
      This could be a command injection vulnerability if the data is user-controlled.
      Instead, use a list and append the argument.'
    subcategory: InputValidation
  severity: error
- id: Semgrep_python.sqlalchemy.security.audit.avoid-sqlalchemy-text.avoid-sqlalchemy-text
  languages:
  - python
  message: 'avoid-sqlalchemy-text

    sqlalchemy.text passes the constructed SQL statement to the database mostly unchanged.'
  metadata:
    category: Security
    explanation: '## avoid-sqlalchemy-text

      sqlalchemy.text passes the constructed SQL statement to the database mostly
      unchanged. This means that the usual SQL injection protections are not applied
      and this function is vulnerable to SQL injection if user input can reach here.
      Use normal SQLAlchemy operators (such as or_, and_, etc.) to construct SQL.'
    subcategory: InputValidation
  severity: error
- id: Semgrep_python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query
  languages:
  - python
  message: 'sqlalchemy-execute-raw-query

    Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query
    can result in SQL Injection.'
  metadata:
    category: Security
    explanation: '## sqlalchemy-execute-raw-query

      Avoiding SQL string concatenation: untrusted input concatenated with raw SQL
      query can result in SQL Injection. In order to execute raw query safely, prepared
      statement should be used. SQLAlchemy provides TextualSQL to easily used prepared
      statement with named parameters. For complex SQL composition, use SQL Expression
      Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be
      a better option.'
    subcategory: InputValidation
  severity: error
- id: Semgrep_python.sqlalchemy.security.sqlalchemy-sql-injection.sqlalchemy-sql-injection
  languages:
  - python
  message: 'sqlalchemy-sql-injection

    Distinct, Having, Group_by, Order_by, and Filter in SQLAlchemy can cause sql injections
    if the developer inputs raw SQL into the before-mentioned clauses.'
  metadata:
    category: Security
    explanation: '## sqlalchemy-sql-injection

      Distinct, Having, Group_by, Order_by, and Filter in SQLAlchemy can cause sql
      injections if the developer inputs raw SQL into the before-mentioned clauses.
      This pattern captures relevant cases in which the developer inputs raw SQL into
      the distinct, having, group_by, order_by or filter clauses and injects user-input
      into the raw SQL with any function besides "bindparams". Use bindParams to securely
      bind user-input to SQL statements.'
    subcategory: InputValidation
  severity: warning
- id: Semgrep_python.twilio.security.twiml-injection.twiml-injection
  languages:
  - python
  message: 'twiml-injection

    Using non-constant TwiML (Twilio Markup Language) argument when creating a Twilio
    conversation could allow the injection of additional TwiML commands'
  metadata:
    category: Security
    explanation: '## twiml-injection

      Using non-constant TwiML (Twilio Markup Language) argument when creating a Twilio
      conversation could allow the injection of additional TwiML commands'
    subcategory: InputValidation
  severity: warning
- id: Semgrep_python_assert_rule-assert-used
  languages:
  - python
  message: 'python_assert_rule-assert-used

    The application was found using `assert` in non-test code.'
  metadata:
    category: Security
    explanation: "## python_assert_rule-assert-used\nThe application was found using\
      \ `assert` in non-test code. Usually reserved for debug and test\ncode, the\
      \ `assert`\nfunction is commonly used to test conditions before continuing execution.\
      \ However, enclosed\ncode will be removed\nwhen compiling Python code to optimized\
      \ byte code. Depending on the assertion and subsequent\nlogic, this could\n\
      lead to undefined behavior of the application or application crashes.\n\nTo\
      \ remediate this issue, remove the `assert` calls. If necessary, replace them\
      \ with either `if`\nconditions or\n`try/except` blocks.\n\nExample using `try/except`\
      \ instead of `assert`:\n```\n# Below try/except is equal to the assert statement\
      \ of:\n# assert user.is_authenticated(), \"user must be authenticated\"\ntry:\n\
      \    if not user.is_authenticated():\n        raise AuthError(\"user must be\
      \ authenticated\")\nexcept AuthError as e:\n    # Handle error\n    # ...\n\
      \    # Return, do not continue processing\n    return\n```"
    subcategory: Other
  severity: info
- id: Semgrep_python_bind-all-interfaces_rule-general-bindall-interfaces
  languages:
  - python
  message: 'python_bind-all-interfaces_rule-general-bindall-interfaces

    Binding to all network interfaces can potentially open up a service to traffic
    on unintended interfaces, that may not be properly documented or secured.'
  metadata:
    category: Security
    explanation: '## python_bind-all-interfaces_rule-general-bindall-interfaces

      Binding to all network interfaces can potentially open up a service to

      traffic on unintended interfaces, that may not be properly documented or

      secured. By passing "0.0.0.0", "::" or an empty string as the address to the
      `socket.bind`

      function,

      the application will bind to all interfaces.


      Consider passing in the interface ip address through an environment variable,

      configuration file, or by determining the primary interface(s) IP address.


      Example getting the IP address from an environment variable `IP_ADDRESS`:

      ```

      # Get the IP_ADDRESS env variable, or bind to

      # 127.0.0.1 if it is not set

      address = os.getenv("IP_ADDRESS", "127.0.0.1")

      # Create an internet socket

      sock = socket.socket(socket.AF_INET)

      # Set the port to listen on

      port = 9777

      # Bind to the address and port combination

      sock.bind((address, port))

      # Listen for connections

      sock.listen()

      # Handle the connection

      ```'
    subcategory: Other
  severity: info
- id: Semgrep_python_crypto_rule-HTTPConnectionPool
  languages:
  - python
  message: 'python_crypto_rule-HTTPConnectionPool

    The application is using HTTPConnectionPool method.'
  metadata:
    category: Security
    explanation: "## python_crypto_rule-HTTPConnectionPool\nThe application is using\
      \ HTTPConnectionPool method. This method transmits\ndata in cleartext, which\
      \ is vulnerable to MITM (Man in the middle)\nattacks. In MITM attacks, the data\
      \ transmitted over the unencrypted\nconnection can be intercepted, read and/or\
      \ modified by unauthorized\nparties which can lead to data integrity and confidentiality\
      \ loss. \n\nTo mitigate this issue, use HTTPSConnectionPool instead, which encrypts\
      \ \ncommunications and enhances security.\n\nSecure Code Example:\n```\nimport\
      \ urllib3\nspool = urllib3.connectionpool.HTTPSConnectionPool(\"example.com\"\
      )\n```"
    subcategory: Visibility
  severity: warning
- id: Semgrep_python_crypto_rule-cipher-modes
  languages:
  - python
  message: 'python_crypto_rule-cipher-modes

    Cryptographic algorithms provide many different modes of operation, only some
    of which provide message integrity.'
  metadata:
    category: Security
    explanation: "## python_crypto_rule-cipher-modes\nCryptographic algorithms provide\
      \ many different modes of operation, only some of which provide\nmessage integrity.\
      \ Without message integrity it could be possible for an adversary to attempt\n\
      to tamper with the ciphertext which could lead to compromising the encryption\
      \ key. Newer\nalgorithms\napply message integrity to validate ciphertext has\
      \ not been tampered with.\n\nInstead of using an algorithm that requires configuring\
      \ a cipher mode, an algorithm\nthat has built-in message integrity should be\
      \ used. Consider using `ChaCha20Poly1305` or\n`AES-256-GCM` instead.\n\nFor\
      \ older applications that don't have support for `ChaCha20Poly1305`, `AES-256-GCM`\
      \ is\nrecommended, however it has many drawbacks:\n  - Slower than `ChaCha20Poly1305`.\n\
      \  - Catastrophic failure if nonce values are reused.\n\nExample using `ChaCha20Poly1305`:\n\
      ```\nimport os\n# Import ChaCha20Poly1305 from cryptography\nfrom cryptography.hazmat.primitives.ciphers.aead\
      \ import ChaCha20Poly1305\n# Our plaintext to encrypt\nplain_text = b\"Secret\
      \ text to encrypt\"\n# We do not require authenticated but unencrypted data,\
      \ so set to None\naad = None\n# Generate a secure key\nkey = ChaCha20Poly1305.generate_key()\n\
      # Create a new ChaCha20Poly1305 instance with our secure key\nchacha = ChaCha20Poly1305(key)\n\
      # Note: nonce values _must_ be regenerated every time they are used.\nnonce\
      \ = os.urandom(12)\n# Encrypt our plaintext\ncipher_text = chacha.encrypt(nonce,\
      \ plain_text, aad)\n# Decrypt the plain text using the nonce and cipher_text\n\
      chacha.decrypt(nonce, cipher_text, aad)\n```\n\nExample using `AESGCM`:\n```\n\
      import os\n# Import AESGCM from cryptography\nfrom cryptography.hazmat.primitives.ciphers.aead\
      \ import AESGCM\n# Our plaintext to encrypt\nplain_text = b\"Secret text to\
      \ encrypt\"\n# We do not require authenticated but unencrypted data, so set\
      \ to None\naad = None\n# Generate a secure key\nkey = AESGCM.generate_key(bit_length=128)\n\
      # Create a new AESGCM instance with our secure key\naesgcm = AESGCM(key)\n#\
      \ Note: nonce values _must_ be regenerated every time they are used.\nnonce\
      \ = os.urandom(12)\n# Encrypt our plaintext\ncipher_text = aesgcm.encrypt(nonce,\
      \ plain_text, aad)\n# Decrypt the plain text using the nonce and cipher_text\n\
      aesgcm.decrypt(nonce, cipher_text, aad)\n```\n\nFor more information on the\
      \ cryptography module see:\n- https://cryptography.io/en/latest/"
    subcategory: Visibility
  severity: warning
- id: Semgrep_python_crypto_rule-crypto-cipher-blowfish
  languages:
  - python
  message: 'python_crypto_rule-crypto-cipher-blowfish

    The Blowfish encryption algorithm was meant as a drop-in replacement for DES and
    was created in 1993. Smaller key sizes may make the ciphertext vulnerable to [birthday
    attacks](https://en.wikipedia.org/wiki/Birthday_attack). While no known attacks
    against Blowfish exist, it should never be used to encrypt files over 4GB in size.'
  metadata:
    category: Security
    explanation: "## python_crypto_rule-crypto-cipher-blowfish\nThe Blowfish encryption\
      \ algorithm was meant as a drop-in replacement for DES and was created in\n\
      1993. Smaller key sizes may make the ciphertext vulnerable to [birthday\nattacks](https://en.wikipedia.org/wiki/Birthday_attack).\
      \ While no known attacks against\nBlowfish\nexist, it should never be used to\
      \ encrypt files over 4GB in size. If possible consider\nusing ChaCha20Poly1305\
      \ or AES-GCM instead of Blowfish.\n\nFor older applications that don't have\
      \ support for `ChaCha20Poly1305`, `AES-256-GCM` is\nrecommended, however it\
      \ has many drawbacks:\n  - Slower than `ChaCha20Poly1305`.\n  - Catastrophic\
      \ failure if nonce values are reused.\n\nNote that the `Crypto` and `Cryptodome`\
      \ Python packages are no longer recommended for\nnew applications, instead consider\
      \ using the [cryptography](https://cryptography.io/) package.\n\nExample using\
      \ `ChaCha20Poly1305`:\n```\nimport os\n# Import ChaCha20Poly1305 from cryptography\n\
      from cryptography.hazmat.primitives.ciphers.aead import ChaCha20Poly1305\n#\
      \ Our plaintext to encrypt\nplain_text = b\"Secret text to encrypt\"\n# We do\
      \ not require authenticated but unencrypted data, so set to None\naad = None\n\
      # Generate a secure key\nkey = ChaCha20Poly1305.generate_key()\n# Create a new\
      \ ChaCha20Poly1305 instance with our secure key\nchacha = ChaCha20Poly1305(key)\n\
      # Note: nonce values _must_ be regenerated every time they are used.\nnonce\
      \ = os.urandom(12)\n# Encrypt our plaintext\ncipher_text = chacha.encrypt(nonce,\
      \ plain_text, aad)\n# Decrypt the plain text using the nonce and cipher_text\n\
      chacha.decrypt(nonce, cipher_text, aad)\n```\n\nExample using `AESGCM`:\n```\n\
      import os\n# Import AESGCM from cryptography\nfrom cryptography.hazmat.primitives.ciphers.aead\
      \ import AESGCM\n# Our plaintext to encrypt\nplain_text = b\"Secret text to\
      \ encrypt\"\n# We do not require authenticated but unencrypted data, so set\
      \ to None\naad = None\n# Generate a secure key\nkey = AESGCM.generate_key(bit_length=128)\n\
      # Create a new AESGCM instance with our secure key\naesgcm = AESGCM(key)\n#\
      \ Note: nonce values _must_ be regenerated every time they are used.\nnonce\
      \ = os.urandom(12)\n# Encrypt our plaintext\ncipher_text = aesgcm.encrypt(nonce,\
      \ plain_text, aad)\n# Decrypt the plain text using the nonce and cipher_text\n\
      aesgcm.decrypt(nonce, cipher_text, aad)\n```\n\nFor more information on the\
      \ cryptography module see:\n- https://cryptography.io/en/latest/"
    subcategory: Visibility
  severity: warning
- id: Semgrep_python_crypto_rule-crypto-cipher-des
  languages:
  - python
  message: 'python_crypto_rule-crypto-cipher-des

    DES, TripleDES, RC2 and RC4 are all considered broken or insecure cryptographic
    algorithms.'
  metadata:
    category: Security
    explanation: '## python_crypto_rule-crypto-cipher-des

      DES, TripleDES, RC2 and RC4 are all considered broken or insecure cryptographic
      algorithms.

      Newer algorithms apply message integrity to validate ciphertext has not been
      tampered

      with. Consider using `ChaCha20Poly1305` instead as it is easier and faster than
      the

      alternatives such as `AES-256-GCM`.


      For older applications that don''t have support for `ChaCha20Poly1305`,

      `AES-256-GCM` is recommended, however it has many drawbacks:

      - Slower than `ChaCha20Poly1305`.

      - Catastrophic failure if nonce values are reused.


      Note that the `Crypto` and `Cryptodome` Python packages are no longer recommended
      for

      new applications, instead consider using the [cryptography](https://cryptography.io/)
      package.


      Example using `ChaCha20Poly1305`:

      ```

      import os

      # Import ChaCha20Poly1305 from cryptography

      from cryptography.hazmat.primitives.ciphers.aead import ChaCha20Poly1305

      # Our plaintext to encrypt

      plain_text = b"Secret text to encrypt"

      # We do not require authenticated but unencrypted data, so set to None

      aad = None

      # Generate a secure key

      key = ChaCha20Poly1305.generate_key()

      # Create a new ChaCha20Poly1305 instance with our secure key

      chacha = ChaCha20Poly1305(key)

      # Note: nonce values _must_ be regenerated every time they are used.

      nonce = os.urandom(12)

      # Encrypt our plaintext

      cipher_text = chacha.encrypt(nonce, plain_text, aad)

      # Decrypt the plain text using the nonce and cipher_text

      chacha.decrypt(nonce, cipher_text, aad)

      ```


      Example using `AESGCM`:

      ```

      import os

      # Import AESGCM from cryptography

      from cryptography.hazmat.primitives.ciphers.aead import AESGCM

      # Our plaintext to encrypt

      plain_text = b"Secret text to encrypt"

      # We do not require authenticated but unencrypted data, so set to None

      aad = None

      # Generate a secure key

      key = AESGCM.generate_key(bit_length=128)

      # Create a new AESGCM instance with our secure key

      aesgcm = AESGCM(key)

      # Note: nonce values _must_ be regenerated every time they are used.

      nonce = os.urandom(12)

      # Encrypt our plaintext

      cipher_text = aesgcm.encrypt(nonce, plain_text, aad)

      # Decrypt the plain text using the nonce and cipher_text

      aesgcm.decrypt(nonce, cipher_text, aad)

      ```


      For more information on the cryptography module see:

      - https://cryptography.io/en/latest/'
    subcategory: Visibility
  severity: warning
- id: Semgrep_python_crypto_rule-crypto-cipher-rc2
  languages:
  - python
  message: 'python_crypto_rule-crypto-cipher-rc2

    DES, TripleDES, RC2 and RC4 are all considered broken or insecure cryptographic
    algorithms.'
  metadata:
    category: Security
    explanation: '## python_crypto_rule-crypto-cipher-rc2

      DES, TripleDES, RC2 and RC4 are all considered broken or insecure cryptographic
      algorithms.

      Newer algorithms apply message integrity to validate ciphertext has not been
      tampered

      with. Consider using `ChaCha20Poly1305` instead as it is easier and faster than
      the

      alternatives such as `AES-256-GCM`.


      For older applications that don''t have support for `ChaCha20Poly1305`,

      `AES-256-GCM` is recommended, however it has many drawbacks:

      - Slower than `ChaCha20Poly1305`.

      - Catastrophic failure if nonce values are reused.


      Note that the `Crypto` and `Cryptodome` Python packages are no longer recommended
      for

      new applications, instead consider using the [cryptography](https://cryptography.io/)
      package.


      Example using `ChaCha20Poly1305`:

      ```

      import os

      # Import ChaCha20Poly1305 from cryptography

      from cryptography.hazmat.primitives.ciphers.aead import ChaCha20Poly1305

      # Our plaintext to encrypt

      plain_text = b"Secret text to encrypt"

      # We do not require authenticated but unencrypted data, so set to None

      aad = None

      # Generate a secure key

      key = ChaCha20Poly1305.generate_key()

      # Create a new ChaCha20Poly1305 instance with our secure key

      chacha = ChaCha20Poly1305(key)

      # Note: nonce values _must_ be regenerated every time they are used.

      nonce = os.urandom(12)

      # Encrypt our plaintext

      cipher_text = chacha.encrypt(nonce, plain_text, aad)

      # Decrypt the plain text using the nonce and cipher_text

      chacha.decrypt(nonce, cipher_text, aad)

      ```


      Example using `AESGCM`:

      ```

      import os

      # Import AESGCM from cryptography

      from cryptography.hazmat.primitives.ciphers.aead import AESGCM

      # Our plaintext to encrypt

      plain_text = b"Secret text to encrypt"

      # We do not require authenticated but unencrypted data, so set to None

      aad = None

      # Generate a secure key

      key = AESGCM.generate_key(bit_length=128)

      # Create a new AESGCM instance with our secure key

      aesgcm = AESGCM(key)

      # Note: nonce values _must_ be regenerated every time they are used.

      nonce = os.urandom(12)

      # Encrypt our plaintext

      cipher_text = aesgcm.encrypt(nonce, plain_text, aad)

      # Decrypt the plain text using the nonce and cipher_text

      aesgcm.decrypt(nonce, cipher_text, aad)

      ```


      For more information on the cryptography module see:

      - https://cryptography.io/en/latest/'
    subcategory: Visibility
  severity: warning
- id: Semgrep_python_crypto_rule-crypto-cipher-rc4
  languages:
  - python
  message: 'python_crypto_rule-crypto-cipher-rc4

    DES, TripleDES, RC2 and RC4 are all considered broken or insecure cryptographic
    algorithms.'
  metadata:
    category: Security
    explanation: '## python_crypto_rule-crypto-cipher-rc4

      DES, TripleDES, RC2 and RC4 are all considered broken or insecure cryptographic
      algorithms.

      Newer algorithms apply message integrity to validate ciphertext has not been
      tampered

      with. Consider using `ChaCha20Poly1305` instead as it is easier and faster than
      the

      alternatives such as `AES-256-GCM`.


      For older applications that don''t have support for `ChaCha20Poly1305`,

      `AES-256-GCM` is recommended, however it has many drawbacks:

      - Slower than `ChaCha20Poly1305`.

      - Catastrophic failure if nonce values are reused.


      Note that the `Crypto` and `Cryptodome` Python packages are no longer recommended
      for

      new applications, instead consider using the [cryptography](https://cryptography.io/)
      package.


      Example using `ChaCha20Poly1305`:

      ```

      import os

      # Import ChaCha20Poly1305 from cryptography

      from cryptography.hazmat.primitives.ciphers.aead import ChaCha20Poly1305

      # Our plaintext to encrypt

      plain_text = b"Secret text to encrypt"

      # We do not require authenticated but unencrypted data, so set to None

      aad = None

      # Generate a secure key

      key = ChaCha20Poly1305.generate_key()

      # Create a new ChaCha20Poly1305 instance with our secure key

      chacha = ChaCha20Poly1305(key)

      # Note: nonce values _must_ be regenerated every time they are used.

      nonce = os.urandom(12)

      # Encrypt our plaintext

      cipher_text = chacha.encrypt(nonce, plain_text, aad)

      # Decrypt the plain text using the nonce and cipher_text

      chacha.decrypt(nonce, cipher_text, aad)

      ```


      Example using `AESGCM`:

      ```

      import os

      # Import AESGCM from cryptography

      from cryptography.hazmat.primitives.ciphers.aead import AESGCM

      # Our plaintext to encrypt

      plain_text = b"Secret text to encrypt"

      # We do not require authenticated but unencrypted data, so set to None

      aad = None

      # Generate a secure key

      key = AESGCM.generate_key(bit_length=128)

      # Create a new AESGCM instance with our secure key

      aesgcm = AESGCM(key)

      # Note: nonce values _must_ be regenerated every time they are used.

      nonce = os.urandom(12)

      # Encrypt our plaintext

      cipher_text = aesgcm.encrypt(nonce, plain_text, aad)

      # Decrypt the plain text using the nonce and cipher_text

      aesgcm.decrypt(nonce, cipher_text, aad)

      ```


      For more information on the cryptography module see:

      - https://cryptography.io/en/latest/'
    subcategory: Visibility
  severity: warning
- id: Semgrep_python_crypto_rule-crypto-cipher-xor
  languages:
  - python
  message: 'python_crypto_rule-crypto-cipher-xor

    The application was found using the `xor` algorithm, which can be trivially decoded.'
  metadata:
    category: Security
    explanation: '## python_crypto_rule-crypto-cipher-xor

      The application was found using the `xor` algorithm, which can be trivially
      decoded.

      Newer algorithms apply message integrity to validate ciphertext has not been
      tampered

      with. Consider using `ChaCha20Poly1305` instead as it is easier and faster than
      the

      alternatives such as `AES-256-GCM`.


      For older applications that don''t have support for `ChaCha20Poly1305`,

      `AES-256-GCM` is recommended, however it has many drawbacks:

      - Slower than `ChaCha20Poly1305`.

      - Catastrophic failure if nonce values are reused.


      Note that the `Crypto` and `Cryptodome` Python packages are no longer recommended
      for

      new applications, instead consider using the [cryptography](https://cryptography.io/)
      package.


      Example using `ChaCha20Poly1305`:

      ```

      import os

      # Import ChaCha20Poly1305 from cryptography

      from cryptography.hazmat.primitives.ciphers.aead import ChaCha20Poly1305

      # Our plaintext to encrypt

      plain_text = b"Secret text to encrypt"

      # We do not require authenticated but unencrypted data, so set to None

      aad = None

      # Generate a secure key

      key = ChaCha20Poly1305.generate_key()

      # Create a new ChaCha20Poly1305 instance with our secure key

      chacha = ChaCha20Poly1305(key)

      # Note: nonce values _must_ be regenerated every time they are used.

      nonce = os.urandom(12)

      # Encrypt our plaintext

      cipher_text = chacha.encrypt(nonce, plain_text, aad)

      # Decrypt the plain text using the nonce and cipher_text

      chacha.decrypt(nonce, cipher_text, aad)

      ```


      Example using `AESGCM`:

      ```

      import os

      # Import AESGCM from cryptography

      from cryptography.hazmat.primitives.ciphers.aead import AESGCM

      # Our plaintext to encrypt

      plain_text = b"Secret text to encrypt"

      # We do not require authenticated but unencrypted data, so set to None

      aad = None

      # Generate a secure key

      key = AESGCM.generate_key(bit_length=128)

      # Create a new AESGCM instance with our secure key

      aesgcm = AESGCM(key)

      # Note: nonce values _must_ be regenerated every time they are used.

      nonce = os.urandom(12)

      # Encrypt our plaintext

      cipher_text = aesgcm.encrypt(nonce, plain_text, aad)

      # Decrypt the plain text using the nonce and cipher_text

      aesgcm.decrypt(nonce, cipher_text, aad)

      ```


      For more information on the cryptography module see:

      - https://cryptography.io/en/latest/'
    subcategory: Visibility
  severity: warning
- id: Semgrep_python_crypto_rule-crypto-encrypt-dsa-rsa
  languages:
  - python
  message: 'python_crypto_rule-crypto-encrypt-dsa-rsa

    The application is generating an RSA key that is less than the recommended 2048
    bits.'
  metadata:
    category: Security
    explanation: "## python_crypto_rule-crypto-encrypt-dsa-rsa\nThe application is\
      \ generating an RSA key that is less than the recommended 2048 bits.\nThe National\
      \ Institute of Standards and Technology (NIST) deprecated signing Digital\n\
      Certificates that contained RSA Public Keys of 1024 bits in December 2010. While\n\
      1024-bit RSA keys have not been factored yet, advances in compute may make it\
      \ possible\nin the near future.\n\nConsider upgrading to the newer asymmetric\
      \ algorithm such as `X25519` which handles\nthe complexities of generating key\
      \ pairs and choosing correct key sizes for you:\n```\nfrom cryptography.hazmat.primitives.asymmetric.x25519\
      \ import X25519PrivateKey\n\n# Generate a private key for use in the exchange.\n\
      private_key = X25519PrivateKey.generate()\n# Work with private key/exchange\
      \ with a peer's\n# public key to created a shared and derived key\n# ...\n```\n\
      \nOtherwise use a key size greater than 2048 when generating RSA keys:\n```\n\
      from cryptography.hazmat.primitives.asymmetric import rsa\n# Generate a private\
      \ key of 4096 bits\nprivate_key = rsa.generate_private_key(\n    # do not change\
      \ the exponent value from 65537\n    public_exponent=65537,\n    key_size=4096,\n\
      )\n# Work with the private key to sign/encrypt data\n# ...\n```\n\nFor more\
      \ information on using the cryptography module see:\n- https://cryptography.io/en/latest"
    subcategory: Visibility
  severity: error
- id: Semgrep_python_crypto_rule-crypto-encrypt-ec
  languages:
  - python
  message: 'python_crypto_rule-crypto-encrypt-ec

    The application was found using an insufficient curve size for the Elliptical
    Cryptography (EC) asymmetric algorithm.'
  metadata:
    category: Security
    explanation: "## python_crypto_rule-crypto-encrypt-ec\nThe application was found\
      \ using an insufficient curve size for the Elliptical\nCryptography (EC) asymmetric\
      \ algorithm. NIST recommends using a key size of\n224 or greater.\n\nTo remediate\
      \ this issue, replace the current key size with `ec.SECP384R1`,\n\nExample using\
      \ `ec.SECP384R1`:\n```\nfrom cryptography.hazmat.primitives.asymmetric import\
      \ ec\n# Generate an EC private key using SECP384R1\nprivate_key = ec.generate_private_key(\n\
      \    ec.SECP384R1()\n)\n# Work with/sign data using the key\n# ...\n```\n\n\
      For more information on the cryptography module's EC section see:\n- https://cryptography.io/en/latest/hazmat/primitives/asymmetric/ec/"
    subcategory: Visibility
  severity: error
- id: Semgrep_python_crypto_rule-crypto-hash-md5
  languages:
  - python
  message: 'python_crypto_rule-crypto-hash-md5

    The application was found using an insecure or risky digest or signature algorithm.'
  metadata:
    category: Security
    explanation: '## python_crypto_rule-crypto-hash-md5

      The application was found using an insecure or risky digest or signature algorithm.
      MD5

      and SHA1 hash algorithms have been found to be vulnerable to producing collisions.


      This means

      that two different values, when hashed, can lead to the same hash value. If
      the application is

      trying

      to use these hash methods for storing passwords, then it is recommended to switch
      to a

      password hashing

      algorithm such as Argon2id or PBKDF2.

      It is strongly recommended that a standard digest algorithm be chosen instead
      as implementing

      a custom algorithm is prone to errors.


      Note that the `Crypto` and `Cryptodome` Python packages are no longer recommended
      for

      new applications, instead consider using the [cryptography](https://cryptography.io/)
      package.


      Example of creating a SHA-384 hash using the `cryptography` package:

      ```

      from cryptography.hazmat.primitives import hashes

      # Create a SHA384 digest

      digest = hashes.Hash(hashes.SHA384())

      # Update the digest with some initial data

      digest.update(b"some data to hash")

      # Add more data to the digest

      digest.update(b"some more data")

      # Finalize the digest as bytes

      result = digest.finalize()

      ```


      For more information on secure password storage see OWASP:

      - https://cheatsheetseries.owasp.org/cheatsheets/Password_Storage_Cheat_Sheet.html


      For more information on the cryptography module see:

      - https://cryptography.io/en/latest/'
    subcategory: Visibility
  severity: warning
- id: Semgrep_python_crypto_rule-crypto-hash-sha1
  languages:
  - python
  message: 'python_crypto_rule-crypto-hash-sha1

    The application was found using an insecure or risky digest or signature algorithm.'
  metadata:
    category: Security
    explanation: '## python_crypto_rule-crypto-hash-sha1

      The application was found using an insecure or risky digest or signature algorithm.
      MD5

      and SHA1 hash algorithms have been found to be vulnerable to producing collisions.


      This means

      that two different values, when hashed, can lead to the same hash value. If
      the application is

      trying

      to use these hash methods for storing passwords, then it is recommended to switch
      to a

      password hashing

      algorithm such as Argon2id or PBKDF2.

      It is strongly recommended that a standard digest algorithm be chosen instead
      as implementing

      a custom algorithm is prone to errors.


      Note that the `Crypto` and `Cryptodome` Python packages are no longer recommended
      for

      new applications, instead consider using the [cryptography](https://cryptography.io/)
      package.


      Example of creating a SHA-384 hash using the `cryptography` package:

      ```

      from cryptography.hazmat.primitives import hashes

      # Create a SHA384 digest

      digest = hashes.Hash(hashes.SHA384())

      # Update the digest with some initial data

      digest.update(b"some data to hash")

      # Add more data to the digest

      digest.update(b"some more data")

      # Finalize the digest as bytes

      result = digest.finalize()

      ```


      For more information on secure password storage see OWASP:

      - https://cheatsheetseries.owasp.org/cheatsheets/Password_Storage_Cheat_Sheet.html


      For more information on the cryptography module see:

      - https://cryptography.io/en/latest/'
    subcategory: Visibility
  severity: warning
- id: Semgrep_python_crypto_rule-crypto-hazmat-cipher-arc4
  languages:
  - python
  message: 'python_crypto_rule-crypto-hazmat-cipher-arc4

    DES, TripleDES, RC2 and RC4 are all considered broken or insecure cryptographic
    algorithms.'
  metadata:
    category: Security
    explanation: '## python_crypto_rule-crypto-hazmat-cipher-arc4

      DES, TripleDES, RC2 and RC4 are all considered broken or insecure cryptographic
      algorithms.

      Newer algorithms apply message integrity to validate ciphertext has not been
      tampered

      with. Consider using `ChaCha20Poly1305` instead as it is easier and faster than
      the

      alternatives such as `AES-256-GCM`.


      For older applications that don''t have support for `ChaCha20Poly1305`,

      `AES-256-GCM` is recommended, however it has many drawbacks:

      - Slower than `ChaCha20Poly1305`.

      - Catastrophic failure if nonce values are reused.


      Example using `ChaCha20Poly1305`:

      ```

      import os

      # Import ChaCha20Poly1305 from cryptography

      from cryptography.hazmat.primitives.ciphers.aead import ChaCha20Poly1305

      # Our plaintext to encrypt

      plain_text = b"Secret text to encrypt"

      # We do not require authenticated but unencrypted data, so set to None

      aad = None

      # Generate a secure key

      key = ChaCha20Poly1305.generate_key()

      # Create a new ChaCha20Poly1305 instance with our secure key

      chacha = ChaCha20Poly1305(key)

      # Note: nonce values _must_ be regenerated every time they are used.

      nonce = os.urandom(12)

      # Encrypt our plaintext

      cipher_text = chacha.encrypt(nonce, plain_text, aad)

      # Decrypt the plain text using the nonce and cipher_text

      chacha.decrypt(nonce, cipher_text, aad)

      ```


      Example using `AESGCM`:

      ```

      import os

      # Import AESGCM from cryptography

      from cryptography.hazmat.primitives.ciphers.aead import AESGCM

      # Our plaintext to encrypt

      plain_text = b"Secret text to encrypt"

      # We do not require authenticated but unencrypted data, so set to None

      aad = None

      # Generate a secure key

      key = AESGCM.generate_key(bit_length=128)

      # Create a new AESGCM instance with our secure key

      aesgcm = AESGCM(key)

      # Note: nonce values _must_ be regenerated every time they are used.

      nonce = os.urandom(12)

      # Encrypt our plaintext

      cipher_text = aesgcm.encrypt(nonce, plain_text, aad)

      # Decrypt the plain text using the nonce and cipher_text

      aesgcm.decrypt(nonce, cipher_text, aad)

      ```


      For more information on the cryptography module see:

      - https://cryptography.io/en/latest/'
    subcategory: Visibility
  severity: warning
- id: Semgrep_python_crypto_rule-crypto-hazmat-cipher-blowfish
  languages:
  - python
  message: 'python_crypto_rule-crypto-hazmat-cipher-blowfish

    The Blowfish encryption algorithm was meant as a drop-in replacement for DES and
    was created in 1993. Smaller key sizes may make the ciphertext vulnerable to [birthday
    attacks](https://en.wikipedia.org/wiki/Birthday_attack). While no known attacks
    against Blowfish exist, it should never be used to encrypt files over 4GB in size.'
  metadata:
    category: Security
    explanation: "## python_crypto_rule-crypto-hazmat-cipher-blowfish\nThe Blowfish\
      \ encryption algorithm was meant as a drop-in replacement for DES and was created\
      \ in\n1993. Smaller key sizes may make the ciphertext vulnerable to [birthday\n\
      attacks](https://en.wikipedia.org/wiki/Birthday_attack). While no known attacks\
      \ against\nBlowfish\nexist, it should never be used to encrypt files over 4GB\
      \ in size. If possible consider\nusing ChaCha20Poly1305 or AES-GCM instead of\
      \ Blowfish.\n\nFor older applications that don't have support for `ChaCha20Poly1305`,\
      \ `AES-256-GCM` is\nrecommended, however it has many drawbacks:\n  - Slower\
      \ than `ChaCha20Poly1305`.\n  - Catastrophic failure if nonce values are reused.\n\
      \nExample using `ChaCha20Poly1305`:\n```\nimport os\n# Import ChaCha20Poly1305\
      \ from cryptography\nfrom cryptography.hazmat.primitives.ciphers.aead import\
      \ ChaCha20Poly1305\n# Our plaintext to encrypt\nplain_text = b\"Secret text\
      \ to encrypt\"\n# We do not require authenticated but unencrypted data, so set\
      \ to None\naad = None\n# Generate a secure key\nkey = ChaCha20Poly1305.generate_key()\n\
      # Create a new ChaCha20Poly1305 instance with our secure key\nchacha = ChaCha20Poly1305(key)\n\
      # Note: nonce values _must_ be regenerated every time they are used.\nnonce\
      \ = os.urandom(12)\n# Encrypt our plaintext\ncipher_text = chacha.encrypt(nonce,\
      \ plain_text, aad)\n# Decrypt the plain text using the nonce and cipher_text\n\
      chacha.decrypt(nonce, cipher_text, aad)\n```\n\nExample using `AESGCM`:\n```\n\
      import os\n# Import AESGCM from cryptography\nfrom cryptography.hazmat.primitives.ciphers.aead\
      \ import AESGCM\n# Our plaintext to encrypt\nplain_text = b\"Secret text to\
      \ encrypt\"\n# We do not require authenticated but unencrypted data, so set\
      \ to None\naad = None\n# Generate a secure key\nkey = AESGCM.generate_key(bit_length=128)\n\
      # Create a new AESGCM instance with our secure key\naesgcm = AESGCM(key)\n#\
      \ Note: nonce values _must_ be regenerated every time they are used.\nnonce\
      \ = os.urandom(12)\n# Encrypt our plaintext\ncipher_text = aesgcm.encrypt(nonce,\
      \ plain_text, aad)\n# Decrypt the plain text using the nonce and cipher_text\n\
      aesgcm.decrypt(nonce, cipher_text, aad)\n```\n\nFor more information on the\
      \ cryptography module see:\n- https://cryptography.io/en/latest/"
    subcategory: Visibility
  severity: warning
- id: Semgrep_python_crypto_rule-crypto-hazmat-cipher-idea
  languages:
  - python
  message: 'python_crypto_rule-crypto-hazmat-cipher-idea

    The IDEA encryption algorithm was meant as a drop-in replacement for DES and was
    created in 1991. A number of [vulnerabilities and exploits](https://en.wikipedia.org/wiki/International_Data_Encryption_Algorithm#Security)
    have been identified to work against IDEA and it is no longer recommended.'
  metadata:
    category: Security
    explanation: "## python_crypto_rule-crypto-hazmat-cipher-idea\nThe IDEA encryption\
      \ algorithm was meant as a drop-in replacement for DES and was created in\n\
      1991. A number of [vulnerabilities and\nexploits](https://en.wikipedia.org/wiki/International_Data_Encryption_Algorithm#Security)\
      \ have\nbeen identified to work against IDEA and\nit is no longer recommended.\
      \ If possible consider\nusing ChaCha20Poly1305 or AES-GCM instead of Blowfish.\n\
      \nFor older applications that don't have support for `ChaCha20Poly1305`, `AES-256-GCM`\
      \ is\nrecommended, however it has many drawbacks:\n  - Slower than `ChaCha20Poly1305`.\n\
      \  - Catastrophic failure if nonce values are reused.\n\nExample using `ChaCha20Poly1305`:\n\
      ```\nimport os\n# Import ChaCha20Poly1305 from cryptography\nfrom cryptography.hazmat.primitives.ciphers.aead\
      \ import ChaCha20Poly1305\n# Our plaintext to encrypt\nplain_text = b\"Secret\
      \ text to encrypt\"\n# We do not require authenticated but unencrypted data,\
      \ so set to None\naad = None\n# Generate a secure key\nkey = ChaCha20Poly1305.generate_key()\n\
      # Create a new ChaCha20Poly1305 instance with our secure key\nchacha = ChaCha20Poly1305(key)\n\
      # Note: nonce values _must_ be regenerated every time they are used.\nnonce\
      \ = os.urandom(12)\n# Encrypt our plaintext\ncipher_text = chacha.encrypt(nonce,\
      \ plain_text, aad)\n# Decrypt the plain text using the nonce and cipher_text\n\
      chacha.decrypt(nonce, cipher_text, aad)\n```\n\nExample using `AESGCM`:\n```\n\
      import os\n# Import AESGCM from cryptography\nfrom cryptography.hazmat.primitives.ciphers.aead\
      \ import AESGCM\n# Our plaintext to encrypt\nplain_text = b\"Secret text to\
      \ encrypt\"\n# We do not require authenticated but unencrypted data, so set\
      \ to None\naad = None\n# Generate a secure key\nkey = AESGCM.generate_key(bit_length=128)\n\
      # Create a new AESGCM instance with our secure key\naesgcm = AESGCM(key)\n#\
      \ Note: nonce values _must_ be regenerated every time they are used.\nnonce\
      \ = os.urandom(12)\n# Encrypt our plaintext\ncipher_text = aesgcm.encrypt(nonce,\
      \ plain_text, aad)\n# Decrypt the plain text using the nonce and cipher_text\n\
      aesgcm.decrypt(nonce, cipher_text, aad)\n```\n\nFor more information on the\
      \ cryptography module see:\n- https://cryptography.io/en/latest/"
    subcategory: Visibility
  severity: warning
- id: Semgrep_python_crypto_rule-crypto.hazmat-hash-md5
  languages:
  - python
  message: 'hazmat-hash-md5

    The application was found using an insecure or risky digest or signature algorithm.'
  metadata:
    category: Security
    explanation: '## hazmat-hash-md5

      The application was found using an insecure or risky digest or signature algorithm.
      MD2, MD5

      and SHA1 hash algorithms have been found to be vulnerable to producing collisions.


      This means

      that two different values, when hashed, can lead to the same hash value. If
      the application is

      trying

      to use these hash methods for storing passwords, then it is recommended to switch
      to a

      password hashing

      algorithm such as Argon2id or PBKDF2.

      It is strongly recommended that a standard digest algorithm be chosen instead
      as implementing

      a custom algorithm is prone to errors.


      Example of creating a SHA-384 hash using the `cryptography` package:

      ```

      from cryptography.hazmat.primitives import hashes

      # Create a SHA384 digest

      digest = hashes.Hash(hashes.SHA384())

      # Update the digest with some initial data

      digest.update(b"some data to hash")

      # Add more data to the digest

      digest.update(b"some more data")

      # Finalize the digest as bytes

      result = digest.finalize()

      ```


      For more information on secure password storage see OWASP:

      - https://cheatsheetseries.owasp.org/cheatsheets/Password_Storage_Cheat_Sheet.html


      For more information on the cryptography module see:

      - https://cryptography.io/en/latest/'
    subcategory: Visibility
  severity: warning
- id: Semgrep_python_crypto_rule-crypto.hazmat-hash-sha1
  languages:
  - python
  message: 'hazmat-hash-sha1

    The application was found using an insecure or risky digest or signature algorithm.'
  metadata:
    category: Security
    explanation: '## hazmat-hash-sha1

      The application was found using an insecure or risky digest or signature algorithm.
      MD2, MD5

      and SHA1 hash algorithms have been found to be vulnerable to producing collisions.


      This means

      that two different values, when hashed, can lead to the same hash value. If
      the application is

      trying

      to use these hash methods for storing passwords, then it is recommended to switch
      to a

      password hashing

      algorithm such as Argon2id or PBKDF2.

      It is strongly recommended that a standard digest algorithm be chosen instead
      as implementing

      a custom algorithm is prone to error.


      Example of creating a SHA-384 hash using the `cryptography` package:

      ```

      from cryptography.hazmat.primitives import hashes

      # Create a SHA384 digest

      digest = hashes.Hash(hashes.SHA384())

      # Update the digest with some initial data

      digest.update(b"some data to hash")

      # Add more data to the digest

      digest.update(b"some more data")

      # Finalize the digest as bytes

      result = digest.finalize()

      ```


      For more information on secure password storage see OWASP:

      - https://cheatsheetseries.owasp.org/cheatsheets/Password_Storage_Cheat_Sheet.html


      For more information on the cryptography module see:

      - https://cryptography.io/en/latest/'
    subcategory: Visibility
  severity: warning
- id: Semgrep_python_crypto_rule-hash-md2
  languages:
  - python
  message: 'python_crypto_rule-hash-md2

    The application was found using an insecure or risky digest or signature algorithm.'
  metadata:
    category: Security
    explanation: '## python_crypto_rule-hash-md2

      The application was found using an insecure or risky digest or signature algorithm.
      MD2, MD5

      and SHA1 hash algorithms have been found to be vulnerable to producing collisions.


      This means

      that two different values, when hashed, can lead to the same hash value. If
      the application is

      trying

      to use these hash methods for storing passwords, then it is recommended to switch
      to a

      password hashing

      algorithm such as Argon2id or PBKDF2.


      Note that the `Crypto` and `Cryptodome` Python packages are no longer recommended
      for

      new applications, instead consider using the [cryptography](https://cryptography.io/)
      package.


      Example of creating a SHA-384 hash using the `cryptography` package:

      ```

      from cryptography.hazmat.primitives import hashes

      # Create a SHA384 digest

      digest = hashes.Hash(hashes.SHA384())

      # Update the digest with some initial data

      digest.update(b"some data to hash")

      # Add more data to the digest

      digest.update(b"some more data")

      # Finalize the digest as bytes

      result = digest.finalize()

      ```


      For more information on secure password storage see OWASP:

      - https://cheatsheetseries.owasp.org/cheatsheets/Password_Storage_Cheat_Sheet.html


      For more information on the cryptography module see:

      - https://cryptography.io/en/latest/'
    subcategory: Visibility
  severity: warning
- id: Semgrep_python_crypto_rule-hash-md4
  languages:
  - python
  message: 'python_crypto_rule-hash-md4

    The application was found using an insecure or risky digest or signature algorithm.'
  metadata:
    category: Security
    explanation: "## python_crypto_rule-hash-md4\nThe application was found using\
      \ an insecure or risky digest or signature algorithm. MD2, MD4,\n MD5  and SHA1\
      \ hash algorithms have been found to be vulnerable to producing collisions.\n\
      \nThis means\nthat two different values, when hashed, can lead to the same hash\
      \ value. If the application is\ntrying\nto use these hash methods for storing\
      \ passwords, then it is recommended to switch to a\npassword hashing\nalgorithm\
      \ such as Argon2id or PBKDF2.\n\nNote that the `Crypto` and `Cryptodome` Python\
      \ packages are no longer recommended for\nnew applications, instead consider\
      \ using the [cryptography](https://cryptography.io/) package.\n\nExample of\
      \ creating a SHA-384 hash using the `cryptography` package:\n```\nfrom cryptography.hazmat.primitives\
      \ import hashes\n# Create a SHA384 digest\ndigest = hashes.Hash(hashes.SHA384())\n\
      # Update the digest with some initial data\ndigest.update(b\"some data to hash\"\
      )\n# Add more data to the digest\ndigest.update(b\"some more data\")\n# Finalize\
      \ the digest as bytes\nresult = digest.finalize()\n```\n\nFor more information\
      \ on secure password storage see OWASP:\n- https://cheatsheetseries.owasp.org/cheatsheets/Password_Storage_Cheat_Sheet.html\n\
      \nFor more information on the cryptography module see:\n- https://cryptography.io/en/latest/"
    subcategory: Visibility
  severity: warning
- id: Semgrep_python_crypto_rule-hash-md5
  languages:
  - python
  message: 'python_crypto_rule-hash-md5

    The application was found using an insecure or risky digest or signature algorithm.'
  metadata:
    category: Security
    explanation: "## python_crypto_rule-hash-md5\nThe application was found using\
      \ an insecure or risky digest or signature algorithm. MD2, MD4,\n MD5  and SHA1\
      \ hash algorithms have been found to be vulnerable to producing collisions.\n\
      \nThis means\nthat two different values, when hashed, can lead to the same hash\
      \ value. If the application is\ntrying\nto use these hash methods for storing\
      \ passwords, then it is recommended to switch to a\npassword hashing\nalgorithm\
      \ such as Argon2id or PBKDF2.\n\nNote that the `Crypto` and `Cryptodome` Python\
      \ packages are no longer recommended for\nnew applications, instead consider\
      \ using the [cryptography](https://cryptography.io/) package.\n\nExample of\
      \ creating a SHA-384 hash using the `cryptography` package:\n```\nfrom cryptography.hazmat.primitives\
      \ import hashes\n# Create a SHA384 digest\ndigest = hashes.Hash(hashes.SHA384())\n\
      # Update the digest with some initial data\ndigest.update(b\"some data to hash\"\
      )\n# Add more data to the digest\ndigest.update(b\"some more data\")\n# Finalize\
      \ the digest as bytes\nresult = digest.finalize()\n```\n\nFor more information\
      \ on secure password storage see OWASP:\n- https://cheatsheetseries.owasp.org/cheatsheets/Password_Storage_Cheat_Sheet.html\n\
      \nFor more information on the cryptography module see:\n- https://cryptography.io/en/latest/"
    subcategory: Visibility
  severity: warning
- id: Semgrep_python_crypto_rule-hash-sha1
  languages:
  - python
  message: 'python_crypto_rule-hash-sha1

    The application was found using an insecure or risky digest or signature algorithm.'
  metadata:
    category: Security
    explanation: "## python_crypto_rule-hash-sha1\nThe application was found using\
      \ an insecure or risky digest or signature algorithm. MD2, MD4,\n MD5  and SHA1\
      \ hash algorithms have been found to be vulnerable to producing collisions.\n\
      \nThis means\nthat two different values, when hashed, can lead to the same hash\
      \ value. If the application is\ntrying\nto use these hash methods for storing\
      \ passwords, then it is recommended to switch to a\npassword hashing\nalgorithm\
      \ such as Argon2id or PBKDF2.\n\nNote that the `Crypto` and `Cryptodome` Python\
      \ packages are no longer recommended for\nnew applications, instead consider\
      \ using the [cryptography](https://cryptography.io/) package.\n\nExample of\
      \ creating a SHA-384 hash using the `cryptography` package:\n```\nfrom cryptography.hazmat.primitives\
      \ import hashes\n# Create a SHA384 digest\ndigest = hashes.Hash(hashes.SHA384())\n\
      # Update the digest with some initial data\ndigest.update(b\"some data to hash\"\
      )\n# Add more data to the digest\ndigest.update(b\"some more data\")\n# Finalize\
      \ the digest as bytes\nresult = digest.finalize()\n```\n\nFor more information\
      \ on secure password storage see OWASP:\n- https://cheatsheetseries.owasp.org/cheatsheets/Password_Storage_Cheat_Sheet.html\n\
      \nFor more information on the cryptography module see:\n- https://cryptography.io/en/latest/"
    subcategory: Visibility
  severity: warning
- id: Semgrep_python_crypto_rule-hashlib-new-insecure-functions
  languages:
  - python
  message: 'python_crypto_rule-hashlib-new-insecure-functions

    The application was found using an insecure or risky digest or signature algorithm.'
  metadata:
    category: Security
    explanation: '## python_crypto_rule-hashlib-new-insecure-functions

      The application was found using an insecure or risky digest or signature algorithm.
      MD2, MD4,

      MD5  and SHA1 hash algorithms have been found to be vulnerable to producing
      collisions.


      This means

      that two different values, when hashed, can lead to the same hash value. If
      the application is

      trying

      to use these hash methods for storing passwords, then it is recommended to switch
      to a

      password hashing

      algorithm such as Argon2id or PBKDF2.

      It is strongly recommended that a standard digest algorithm be chosen instead
      as implementing

      a custom algorithm is prone to errors.


      Example using `hashlib.sha384()` to create a SHA384 hash:

      ```

      import hashlib

      # Create a SHA384 digest

      digest = hashlib.sha384()

      # Update the digest with some initial data

      digest.update(b"some data to hash")

      # Add more data to the digest

      digest.update(b"some more data")

      # Finalize the digest as bytes

      digest.digest()

      ```'
    subcategory: Visibility
  severity: warning
- id: Semgrep_python_crypto_rule-import-pycrypto
  languages:
  - python
  message: 'python_crypto_rule-import-pycrypto

    The application was detected importing `pycrypto`. This package has been deprecated
    as it contains security vulnerabilities.'
  metadata:
    category: Security
    explanation: '## python_crypto_rule-import-pycrypto

      The application was detected importing `pycrypto`. This package has been deprecated
      as it

      contains

      security vulnerabilities.


      To remediate this issue, consider using the [cryptography](https://cryptography.io/)

      package instead.'
    subcategory: InsecureModulesLibraries
  severity: error
- id: Semgrep_python_deserialization_rule-cpickle
  languages:
  - python
  message: 'python_deserialization_rule-cpickle

    The application was found using `cPickle` which is vulnerable to deserialization
    attacks.'
  metadata:
    category: Security
    explanation: "## python_deserialization_rule-cpickle\nThe application was found\
      \ using `cPickle` which is vulnerable to deserialization attacks.\nDeserialization\
      \ attacks exploit the process of reading serialized data and turning it back\n\
      into an object. By constructing malicious objects and serializing them, an adversary\
      \ may\nattempt to:\n\n- Inject code that is executed upon object construction,\
      \ which occurs during the\ndeserialization process.\n- Exploit mass assignment\
      \ by including fields that are not normally a part of the serialized\ndata but\
      \ are read in during deserialization.\n\nConsider safer alternatives such as\
      \ serializing data in the JSON format. Ensure any format\nchosen allows\nthe\
      \ application to specify exactly which object types are allowed to be deserialized.\n\
      \nTo protect against mass assignment, only allow deserialization of the specific\
      \ fields that are\nrequired. If this is not easily done, consider creating an\
      \ intermediary type that\ncan be serialized with only the necessary fields exposed.\n\
      \nExample JSON deserializer using an intermediary type that is validated against\
      \ a schema to\nensure\nit is safe from mass assignment:\n```\nimport jsonschema\n\
      \n# Create a schema to validate our user-supplied input against\n# an intermediary\
      \ object\nintermediary_schema = {\n    \"type\" : \"object\",\n    \"properties\"\
      \ :  {\n        \"name\": {\"type\" : \"string\"}\n    },\n    \"required\"\
      : [\"name\"],\n    # Protect against random properties being added to the object\n\
      \    \"additionalProperties\": False,\n}\n# If a user attempted to add \"'is_admin':\
      \ True\" it would cause a validation error\nintermediary_object = {'name': 'test\
      \ user'}\n\ntry:\n    # Validate the user supplied intermediary object against\
      \ our schema\n    jsonschema.validate(instance=intermediary_object, schema=intermediary_schema)\n\
      \    user_object = {'user':\n        {\n            # Assign the deserialized\
      \ data from intermediary object\n            'name': intermediary_object['name'],\n\
      \            # Add in protected data in object definition (or set it from a\
      \ class constructor)\n            'is_admin': False,\n        }\n    }\n   \
      \ # Work with the user_object\nexcept jsonschema.exceptions.ValidationError\
      \ as ex:\n    # Gracefully handle validation errors\n    # ...\n```\n\nFor more\
      \ details on deserialization attacks in general, see OWASP's guide:\n- https://cheatsheetseries.owasp.org/cheatsheets/Deserialization_Cheat_Sheet.html"
    subcategory: InputValidation
  severity: warning
- id: Semgrep_python_deserialization_rule-dill
  languages:
  - python
  message: 'python_deserialization_rule-dill

    The application was found using `dill` which is vulnerable to deserialization
    attacks.'
  metadata:
    category: Security
    explanation: "## python_deserialization_rule-dill\nThe application was found using\
      \ `dill` which is vulnerable to deserialization attacks.\nDeserialization attacks\
      \ exploit the process of reading serialized data and turning it back\ninto an\
      \ object. By constructing malicious objects and serializing them, an adversary\
      \ may\nattempt to:\n\n- Inject code that is executed upon object construction,\
      \ which occurs during the\ndeserialization process.\n- Exploit mass assignment\
      \ by including fields that are not normally a part of the serialized\ndata but\
      \ are read in during deserialization.\n\nConsider safer alternatives such as\
      \ serializing data in the JSON format. Ensure any format\nchosen allows\nthe\
      \ application to specify exactly which object types are allowed to be deserialized.\n\
      \nTo protect against mass assignment, only allow deserialization of the specific\
      \ fields that are\nrequired. If this is not easily done, consider creating an\
      \ intermediary type that\ncan be serialized with only the necessary fields exposed.\n\
      \nExample JSON deserializer using an intermediary type that is validated against\
      \ a schema to\nensure\nit is safe from mass assignment:\n```\nimport jsonschema\n\
      \n# Create a schema to validate our user-supplied input against\n# an intermediary\
      \ object\nintermediary_schema = {\n    \"type\" : \"object\",\n    \"properties\"\
      \ :  {\n        \"name\": {\"type\" : \"string\"}\n    },\n    \"required\"\
      : [\"name\"],\n    # Protect against random properties being added to the object\n\
      \    \"additionalProperties\": False,\n}\n# If a user attempted to add \"'is_admin':\
      \ True\" it would cause a validation error\nintermediary_object = {'name': 'test\
      \ user'}\n\ntry:\n    # Validate the user supplied intermediary object against\
      \ our schema\n    jsonschema.validate(instance=intermediary_object, schema=intermediary_schema)\n\
      \    user_object = {'user':\n        {\n            # Assign the deserialized\
      \ data from intermediary object\n            'name': intermediary_object['name'],\n\
      \            # Add in protected data in object definition (or set it from a\
      \ class constructor)\n            'is_admin': False,\n        }\n    }\n   \
      \ # Work with the user_object\nexcept jsonschema.exceptions.ValidationError\
      \ as ex:\n    # Gracefully handle validation errors\n    # ...\n```\n\nFor more\
      \ details on deserialization attacks in general, see OWASP's guide:\n- https://cheatsheetseries.owasp.org/cheatsheets/Deserialization_Cheat_Sheet.html"
    subcategory: InputValidation
  severity: warning
- id: Semgrep_python_deserialization_rule-marshal
  languages:
  - python
  message: 'python_deserialization_rule-marshal

    The application was found using `dill` which is vulnerable to deserialization
    attacks.'
  metadata:
    category: Security
    explanation: "## python_deserialization_rule-marshal\nThe application was found\
      \ using `dill` which is vulnerable to deserialization attacks.\nDeserialization\
      \ attacks exploit the process of reading serialized data and turning it back\n\
      into an object. By constructing malicious objects and serializing them, an adversary\
      \ may\nattempt to:\n\n- Inject code that is executed upon object construction,\
      \ which occurs during the\ndeserialization process.\n- Exploit mass assignment\
      \ by including fields that are not normally a part of the serialized\ndata but\
      \ are read in during deserialization.\n\nConsider safer alternatives such as\
      \ serializing data in the JSON format. Ensure any format\nchosen allows\nthe\
      \ application to specify exactly which object types are allowed to be deserialized.\n\
      \nTo protect against mass assignment, only allow deserialization of the specific\
      \ fields that are\nrequired. If this is not easily done, consider creating an\
      \ intermediary type that\ncan be serialized with only the necessary fields exposed.\n\
      \nExample JSON deserializer using an intermediary type that is validated against\
      \ a schema to\nensure\nit is safe from mass assignment:\n```\nimport jsonschema\n\
      \n# Create a schema to validate our user-supplied input against\n# an intermediary\
      \ object\nintermediary_schema = {\n    \"type\" : \"object\",\n    \"properties\"\
      \ :  {\n        \"name\": {\"type\" : \"string\"}\n    },\n    \"required\"\
      : [\"name\"],\n    # Protect against random properties being added to the object\n\
      \    \"additionalProperties\": False,\n}\n# If a user attempted to add \"'is_admin':\
      \ True\" it would cause a validation error\nintermediary_object = {'name': 'test\
      \ user'}\n\ntry:\n    # Validate the user supplied intermediary object against\
      \ our schema\n    jsonschema.validate(instance=intermediary_object, schema=intermediary_schema)\n\
      \    user_object = {'user':\n        {\n            # Assign the deserialized\
      \ data from intermediary object\n            'name': intermediary_object['name'],\n\
      \            # Add in protected data in object definition (or set it from a\
      \ class constructor)\n            'is_admin': False,\n        }\n    }\n   \
      \ # Work with the user_object\nexcept jsonschema.exceptions.ValidationError\
      \ as ex:\n    # Gracefully handle validation errors\n    # ...\n```\n\nFor more\
      \ details on deserialization attacks in general, see OWASP's guide:\n- https://cheatsheetseries.owasp.org/cheatsheets/Deserialization_Cheat_Sheet.html"
    subcategory: InputValidation
  severity: warning
- id: Semgrep_python_deserialization_rule-pickle
  languages:
  - python
  message: 'python_deserialization_rule-pickle

    The application was found using `pickle` which is vulnerable to deserialization
    attacks.'
  metadata:
    category: Security
    explanation: "## python_deserialization_rule-pickle\nThe application was found\
      \ using `pickle` which is vulnerable to deserialization attacks.\nDeserialization\
      \ attacks exploit the process of reading serialized data and turning it back\n\
      into an object. By constructing malicious objects and serializing them, an adversary\
      \ may\nattempt to:\n\n- Inject code that is executed upon object construction,\
      \ which occurs during the\ndeserialization process.\n- Exploit mass assignment\
      \ by including fields that are not normally a part of the serialized\ndata but\
      \ are read in during deserialization.\n\nConsider safer alternatives such as\
      \ serializing data in the JSON format. Ensure any format\nchosen allows the\
      \ application to specify exactly which object types are allowed to be deserialized.\n\
      \nTo protect against mass assignment, only allow deserialization of the specific\
      \ fields that are\nrequired. If this is not easily done, consider creating an\
      \ intermediary type that\ncan be serialized with only the necessary fields exposed.\n\
      \nExample JSON deserializer using an intermediary type that is validated against\
      \ a schema to ensure\nit is safe from mass assignment:\n```\nimport jsonschema\n\
      \n# Create a schema to validate our user-supplied input against\n# an intermediary\
      \ object\nintermediary_schema = {\n    \"type\" : \"object\",\n    \"properties\"\
      \ :  {\n        \"name\": {\"type\" : \"string\"}\n    },\n    \"required\"\
      : [\"name\"],\n    # Protect against random properties being added to the object\n\
      \    \"additionalProperties\": False,\n}\n# If a user attempted to add \"'is_admin':\
      \ True\" it would cause a validation error\nintermediary_object = {'name': 'test\
      \ user'}\n\ntry:\n    # Validate the user supplied intermediary object against\
      \ our schema\n    jsonschema.validate(instance=intermediary_object, schema=intermediary_schema)\n\
      \    user_object = {'user':\n        {\n            # Assign the deserialized\
      \ data from intermediary object\n            'name': intermediary_object['name'],\n\
      \            # Add in protected data in object definition (or set it from a\
      \ class constructor)\n            'is_admin': False,\n        }\n    }\n   \
      \ # Work with the user_object\nexcept jsonschema.exceptions.ValidationError\
      \ as ex:\n    # Gracefully handle validation errors\n    # ...\n```\n\nFor more\
      \ details on deserialization attacks in general, see OWASP's guide:\n- https://cheatsheetseries.owasp.org/cheatsheets/Deserialization_Cheat_Sheet.html"
    subcategory: InputValidation
  severity: warning
- id: Semgrep_python_deserialization_rule-shelve
  languages:
  - python
  message: 'python_deserialization_rule-shelve

    The application was found using `shelve` which is vulnerable to deserialization
    attacks as it calls `pickle` internally.'
  metadata:
    category: Security
    explanation: "## python_deserialization_rule-shelve\nThe application was found\
      \ using `shelve` which is vulnerable to deserialization attacks as\nit calls\
      \ `pickle` internally.\nDeserialization attacks exploit the process of reading\
      \ serialized data and turning it back\ninto an object. By constructing malicious\
      \ objects and serializing them, an adversary may\nattempt to:\n\n- Inject code\
      \ that is executed upon object construction, which occurs during the\ndeserialization\
      \ process.\n- Exploit mass assignment by including fields that are not normally\
      \ a part of the serialized\ndata but are read in during deserialization.\n\n\
      Consider safer alternatives such as serializing data in the JSON format. Ensure\
      \ any format\nchosen allows\nthe application to specify exactly which object\
      \ types are allowed to be deserialized.\n\nTo protect against mass assignment,\
      \ only allow deserialization of the specific fields that are\nrequired. If this\
      \ is not easily done, consider creating an intermediary type that\ncan be serialized\
      \ with only the necessary fields exposed.\n\nExample JSON deserializer using\
      \ an intermediary type that is validated against a schema to\nensure\nit is\
      \ safe from mass assignment:\n```\nimport jsonschema\n\n# Create a schema to\
      \ validate our user-supplied input against\n# an intermediary object\nintermediary_schema\
      \ = {\n    \"type\" : \"object\",\n    \"properties\" :  {\n        \"name\"\
      : {\"type\" : \"string\"}\n    },\n    \"required\": [\"name\"],\n    # Protect\
      \ against random properties being added to the object\n    \"additionalProperties\"\
      : False,\n}\n# If a user attempted to add \"'is_admin': True\" it would cause\
      \ a validation error\nintermediary_object = {'name': 'test user'}\n\ntry:\n\
      \    # Validate the user supplied intermediary object against our schema\n \
      \   jsonschema.validate(instance=intermediary_object, schema=intermediary_schema)\n\
      \    user_object = {'user':\n        {\n            # Assign the deserialized\
      \ data from intermediary object\n            'name': intermediary_object['name'],\n\
      \            # Add in protected data in object definition (or set it from a\
      \ class constructor)\n            'is_admin': False,\n        }\n    }\n   \
      \ # Work with the user_object\nexcept jsonschema.exceptions.ValidationError\
      \ as ex:\n    # Gracefully handle validation errors\n    # ...\n```\n\nFor more\
      \ details on deserialization attacks in general, see OWASP's guide:\n- https://cheatsheetseries.owasp.org/cheatsheets/Deserialization_Cheat_Sheet.html"
    subcategory: InputValidation
  severity: warning
- id: Semgrep_python_deserialization_rule-yaml-load
  languages:
  - python
  message: 'python_deserialization_rule-yaml-load

    The application was found using an unsafe version of `yaml` load which is vulnerable
    to deserialization attacks.'
  metadata:
    category: Security
    explanation: "## python_deserialization_rule-yaml-load\nThe application was found\
      \ using an unsafe version of `yaml` load which is vulnerable to\ndeserialization\
      \ attacks. Deserialization attacks exploit the process of reading serialized\n\
      data and turning it back\ninto an object. By constructing malicious objects\
      \ and serializing them, an adversary may\nattempt to:\n\n- Inject code that\
      \ is executed upon object construction, which occurs during the\ndeserialization\
      \ process.\n- Exploit mass assignment by including fields that are not normally\
      \ a part of the serialized\ndata but are read in during deserialization.\n\n\
      To remediate this issue, use `safe_load()` or call `yaml.load()` with the `Loader`\
      \ argument\nset to\n`yaml.SafeLoader`.\n\nExample loading YAML using `safe_load`:\n\
      ```\nimport yaml\n\n# Use safe_load to load data into an intermediary object\n\
      intermediary_object = yaml.safe_load(\"\"\"user:\n    name: 'test user'\"\"\"\
      \n)\n# Create our real object, copying over only the necessary fields\nuser_object\
      \ = {'user': {\n        # Assign the deserialized data from intermediary object\n\
      \        'name': intermediary_object['user']['name'],\n        # Add in protected\
      \ data in object definition (or set it from a class constructor)\n        'is_admin':\
      \ False,\n    }\n}\n# Work with user_object\n# ...\n```\n\nFor more details\
      \ on deserialization attacks in general, see OWASP's guide:\n- https://cheatsheetseries.owasp.org/cheatsheets/Deserialization_Cheat_Sheet.html"
    subcategory: InputValidation
  severity: error
- id: Semgrep_python_django_rule-django-extra-used
  languages:
  - python
  message: 'python_django_rule-django-extra-used

    SQL Injection is a critical vulnerability that can lead to data or system compromise.'
  metadata:
    category: Security
    explanation: "## python_django_rule-django-extra-used\nSQL Injection is a critical\
      \ vulnerability that can lead to data or system compromise. By\ndynamically\
      \ generating SQL query strings, user input may be able to influence the logic\
      \ of\nthe SQL statement. This could lead to an adversary accessing information\
      \ they should\nnot have access to, or in some circumstances, being able to execute\
      \ OS functionality or code.\n\nReplace all dynamically generated SQL queries\
      \ with parameterized queries. In situations where\ndynamic queries must be created,\
      \ never use direct user input, but instead use a map or\ndictionary of valid\
      \ values and resolve them using a user supplied key.\n\nFor example, some database\
      \ drivers do not allow parameterized queries for `>` or `<` comparison\noperators.\
      \ In these cases, do not use a user supplied `>` or `<` value, but rather have\
      \ the\nuser\nsupply a `gt` or `lt` value. The alphabetical values are then used\
      \ to look up the `>` and `<`\nvalues to be used in the construction of the dynamic\
      \ query. The same goes for other queries\nwhere\ncolumn or table names are required\
      \ but cannot be parameterized.\n\nThe `QuerySet.extra` API method will be deprecated\
      \ as it a source of SQL Injection\nvulnerabilities and other problems. This\
      \ method is especially risky as callers\nwill need to do their own escaping\
      \ of any parameters that come from user-supplied\ninformation.\n\nTo remediate\
      \ this issue, do not use `extra` but use other `QuerySet` methods to achieve\n\
      the same goals. If for some reason this is not feasible, consider using the\
      \ `RawSQL` method\nand making sure that all arguments, including user-supplied\
      \ ones, are only used in\n`params`\n\n\nWhile not recommended due to [potential\
      \ SQL\nInjection](https://docs.djangoproject.com/en/4.2/ref/models/expressions/#raw-sql-expressions),\n\
      below is an example using `RawSQL`,\npassing in user-supplied data as a `param`\
      \ which will escape the input:\n```\n# If dealing with integer based user input,\
      \ restrict the values to integers only using the\n# path configuration: path('<int:user_supplied_id>/someview/',\
      \ views.some_view,\nname='someview'),\n\n# views.py\ndef some_view(request,\
      \ user_supplied_id):\n  # Never use string interpolation in the `sql` parameter.\n\
      \  # Never quote the `%s` string format such as `... where id='%s'` as this\
      \ could lead to SQL\nInjection.\n  # Pass the user supplied data only in the\
      \ `params` parameter.\n  for obj in DBObject.objects.all().annotate(\n     \
      \ val=RawSQL(sql=\"select id from some_secondary_table where id=%s\",\nparams=[user_supplied_id])):\n\
      \    # Work with the results from the query\n    # ...\n```\n\nFor more information\
      \ on QuerySet see:\n- https://docs.djangoproject.com/en/4.2/ref/models/querysets/#queryset-api\n\
      \nFor more information on SQL Injection see OWASP:\n- https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html"
    subcategory: InputValidation
  severity: warning
- id: Semgrep_python_django_rule-django-raw-used
  languages:
  - python
  message: 'python_django_rule-django-raw-used

    SQL Injections are a critical type of vulnerability that can lead to data  or
    system compromise.'
  metadata:
    category: Security
    explanation: "## python_django_rule-django-raw-used\nSQL Injections are a critical\
      \ type of vulnerability that can lead to data \nor system compromise. By dynamically\
      \ generating SQL query strings, user \ninput may be able to influence the logic\
      \ of the SQL statement. \nThis could lead to an adversary accessing information\
      \ they should not \nhave access to, or in some circumstances, being able to\
      \ execute OS functionality\nor code.\n\nReplace all dynamically generated SQL\
      \ queries with parameterized queries. \nIn situations where dynamic queries\
      \ must be created, never use direct user input,\nbut instead use a map or dictionary\
      \ of valid values and resolve them using a user \nsupplied key.\n\nFor example,\
      \ some database drivers do not allow parameterized queries for \n`>` or `<`\
      \ comparison operators. In these cases, do not use a user supplied \n`>` or\
      \ `<` value, but rather have the user supply a `gt` or `lt` value. \nThe alphabetical\
      \ values are then used to look up the `>` and `<` values to be used \nin the\
      \ construction of the dynamic query. The same goes for other queries where \n\
      column or table names are required but cannot be parameterized.\n\nData that\
      \ is possible user-controlled from a python request is passed\nto `raw()` function.\
      \ To remediate this issue, use django's QuerySets, \nwhich are built with query\
      \ parameterization and therefore not vulnerable \nto sql injection. For example,\
      \ you could use `Entry.objects.filter(date=2006)`\n\nIf for some reason this\
      \ is not feasible, ensure calls including user-supplied \ndata pass it in to\
      \ the `params` parameter of the `raw()` method.\nBelow is an example using `raw()`,\
      \ passing in user-supplied data as `params`. \nThis will treat the query as\
      \ a parameterized query and `params` as strictly data, \npreventing any possibility\
      \ of SQL Injection.\n\n```\ndef test(request):\n  uname = request.GET[\"username\"\
      ] \n  res = User.objects.raw('SELECT * FROM myapp_user WHERE username = %s',\
      \ (uname,))\n```\n\nFor more information on QuerySet see:\n- https://docs.djangoproject.com/en/5.0/ref/models/querysets/\n\
      \nFor more information on SQL Injection see OWASP:\n- https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html"
    subcategory: InputValidation
  severity: error
- id: Semgrep_python_django_rule-django-rawsql-used
  languages:
  - python
  message: 'python_django_rule-django-rawsql-used

    SQL Injections are a critical type of vulnerability that can lead to data or system
    compromise.'
  metadata:
    category: Security
    explanation: "## python_django_rule-django-rawsql-used\nSQL Injections are a critical\
      \ type of vulnerability that can lead to data or system compromise. By \ndynamically\
      \ generating SQL query strings, user input may be able to influence the logic\
      \ of the SQL \nstatement. This could lead to an adversary accessing information\
      \ they should not have access to, or in\nsome circumstances, being able to execute\
      \ OS functionality or code.\n\nReplace all dynamically generated SQL queries\
      \ with parameterized queries. In situations where dynamic \nqueries must be\
      \ created, never use direct user input, but instead use a map or dictionary\
      \ of valid values \nand resolve them using a user supplied key.\n\nFor example,\
      \ some database drivers do not allow parameterized queries for `>` or `<` comparison\
      \ operators. \nIn these cases, do not use a user supplied `>` or `<` value,\
      \ but rather have the user supply a `gt` or `lt` \nvalue. The alphabetical values\
      \ are then used to look up the `>` and `<` values to be used in the \nconstruction\
      \ of the dynamic query. The same goes for other queries where column or table\
      \ names are required \nbut cannot be parameterized.\n\nTo remediate this issue,\
      \ do not use `raw` or `RawSQL` but use other `QuerySet` methods to achieve the\
      \ same\ngoals. If for some reason this is not feasible, ensure calls including\
      \ user-supplied data pass it in to \nthe `params` parameter of the `RawSQL`\
      \ method.\n\nWhile not recommended due to [potential SQL Injection](https://docs.djangoproject.com/en/5.0/ref/models/expressions/#raw-sql-expressions),\
      \ below is an example using `RawSQL`.\nPassing in user-supplied data as a `param`\
      \ which will escape the input:\n\n```\n# If dealing with integer based user\
      \ input, restrict the values to integers only using the\n# path configuration:\
      \ path('/someview/<int:user_supplied_id>', views.some_view, name='someview'),\n\
      \n# views.py\ndef some_view(request, user_supplied_id):\n  # Never use string\
      \ interpolation in the `sql` parameter.\n  # Never quote the `%s` string format\
      \ such as `... where id='%s'` as this could lead to SQL Injection.\n  # Pass\
      \ the user supplied data only in the `params` parameter.\n  for obj in DBObject.objects.all().annotate(\n\
      \      val=RawSQL(sql=\"select id from some_secondary_table where id=%s\", params=[user_supplied_id])):\n\
      \    # Work with the results from the query\n    # ...\n```\n\nFor more information\
      \ on QuerySets see:\n- https://docs.djangoproject.com/en/4.2/ref/models/querysets/#queryset-api\n\
      \nFor more information on SQL Injection see OWASP:\n- https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html"
    subcategory: InputValidation
  severity: error
- id: Semgrep_python_escaping_rule-django
  languages:
  - python
  message: 'python_escaping_rule-django

    Cross Site Scripting (XSS) is an attack which exploits a web application or system
    to treat user input as markup or script code.'
  metadata:
    category: Security
    explanation: '## python_escaping_rule-django

      Cross Site Scripting (XSS) is an attack which exploits a web application or
      system to treat

      user input

      as markup or script code. It is important to encode the data depending on the
      specific context

      it

      is used in. There are at least six context types:


      - Inside HTML tags `<div>context 1</div>`

      - Inside attributes: `<div class="context 2"></div>`

      - Inside event attributes `<button onclick="context 3">button</button>`

      - Inside script blocks: `<script>var x = "context 4"</script>`

      - Unsafe element HTML assignment: `element.innerHTML = "context 5"`

      - Inside URLs: `<iframe src="context 6"></iframe><a href="context 6">link</a>`


      Script blocks alone have multiple ways they need to be encoded. Extra care must
      be taken if

      user input

      is ever output inside of script tags.


      User input that is displayed within the application must be encoded, sanitized
      or validated

      to ensure it cannot be treated as HTML or executed as Javascript code. Care
      must also be

      taken

      to not mix server-side templating with client-side templating, as the server-side
      templating

      will

      not encode things like {{ 7*7 }} which may execute client-side templating features.


      It is _NOT_ advised to encode user input prior to inserting into a data store.
      The data will

      need to be

      encoded depending on context of where it is output. It is much safer to force
      the displaying

      system to

      handle the encoding and not attempt to guess how it should be encoded.


      Consider using

      [format_html](https://docs.djangoproject.com/en/4.2/ref/utils/#django.utils.html.format_html)

      instead of

      the `django.utils.safestring` methods.


      Example using `format_html`:

      ```

      # Use format_html to create an HTML link, using href as the parameter

      # which will be encoded automatically

      format_html("<li><a href=''{}''>Some Link</a></li>", href)

      ```


      For more information on XSS see OWASP:

      - https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html'
    subcategory: InputValidation
  severity: warning
- id: Semgrep_python_escaping_rule-jinja2-autoescape-false
  languages:
  - python
  message: 'python_escaping_rule-jinja2-autoescape-false

    The application was found using Jinja2 `Environment` without autoescaping enabled.'
  metadata:
    category: Security
    explanation: "## python_escaping_rule-jinja2-autoescape-false\nThe application\
      \ was found using Jinja2 `Environment` without autoescaping enabled. If using\
      \ in\nthe context of HTML this could lead to Cross-Site Scripting (XSS) attacks\
      \ when rendering with\nuser-supplied input.\n\nUnfortunately, Jinja2 does not\
      \ support context-aware escaping, meaning it is insufficient to\nprotect against\n\
      XSS for the various web contexts. It is important to encode the data depending\
      \ on the specific\ncontext\nit\nis used in. There are at least six context types:\n\
      \n- Inside HTML tags `<div>context 1</div>`\n- Inside attributes: `<div class=\"\
      context 2\"></div>`\n- Inside event attributes `<button onclick=\"context 3\"\
      >button</button>`\n- Inside script blocks: `<script>var x = \"context 4\"</script>`\n\
      - Unsafe element HTML assignment: `element.innerHTML = \"context 5\"`\n- Inside\
      \ URLs: `<iframe src=\"context 6\"></iframe><a href=\"context 6\">link</a>`\n\
      \nScript blocks alone have multiple ways they need to be encoded. Extra care\
      \ must be taken if\nuser input\nis ever output inside of script tags.\n\nUser\
      \ input that is displayed within the application must be encoded, sanitized\
      \ or validated\nto ensure it cannot be treated as HTML or executed as Javascript\
      \ code. Care must also be\ntaken\nto not mix server-side templating with client-side\
      \ templating, as the server-side templating\nwill\nnot encode things like {{\
      \ 7*7 }} which may execute client-side templating features.\n\nIt is _NOT_ advised\
      \ to encode user input prior to inserting into a data store. The data will\n\
      need to be\nencoded depending on context of where it is output. It is much safer\
      \ to force the displaying\nsystem to\nhandle the encoding and not attempt to\
      \ guess how it should be encoded.\n\nTo handle different contexts, one approach\
      \ would be to write custom Jinja2 filters. Below is\nan example\nthat escapes\
      \ or encodes links and potentially malicious script, note this does not include\n\
      other contexts\nsuch as CSS or attributes:\n```\nfrom jinja2 import Environment,\
      \ select_autoescape, FileSystemLoader\nfrom jinja2 import pass_eval_context\n\
      from markupsafe import Markup, escape\n\n@pass_eval_context\ndef escape_link(eval_ctx,\
      \ value):\n    bad_link = \"#JinjatmplZ\"\n    # Block any values that start\
      \ with // as that could be used to inject\n    # links to third party pages\
      \ see:\nhttps://en.wikipedia.org/wiki/Wikipedia:Protocol-relative_URL\n    if\
      \ value.startswith('//'):\n        return bad_link\n\n    # Only allow relative\
      \ links\n    # if you want to allow links that start with http or ws replace\
      \ with below:\n    # if not value.startswith('/'): and not value.startswith('http')\
      \ and not\nvalue.startswith('ws')\n    if not value.startswith('/'):\n     \
      \   return bad_link\n\n    # Alternatively, you could only call escape if autoescape\
      \ is true\n    # if eval_ctx.autoescape:\n    #    return escape(value)\n  \
      \  # else\n    #    return value\n\n    return escape(value)\n\n# Create a replacement\
      \ table\njs_replacement = str.maketrans({\n        '\"':  \"\\\\u0022\",\n \
      \       '`':  \"\\\\u0060\",\n        '&':  \"\\\\u0026\",\n        '\\'': \"\
      \\\\u0027\",\n        '+':  \"\\\\u002b\",\n        '/':  \"\\\\/\",\n     \
      \   '<':  \"\\\\u003c\",\n        '>':  \"\\\\u003e\",\n        '\\\\': \"\\\
      \\\\\\\",\n        '(': \"\\\\u0028\",\n        ')': \"\\\\u0029\",\n    })\n\
      \n@pass_eval_context\ndef escape_js(eval_ctx, value):\n    \"\"\"\n    Escape\
      \ the input for use in <script> context, USE WITH CAUTION\n    It is strongly\
      \ recommended to _never_ pass user-supplied input to\n    the JavaScript context.\
      \ This may still be unsafe depending where\n    used, it does not consider characters\
      \ used  in regular expressions\n    for example.\n    \"\"\"\n\n    #if eval_ctx.autoescape:\n\
      \    #    value = escape(value)\n    # Escape by default\n    value = escape(value)\n\
      \    # Translate any potential characters using our translation table\n    return\
      \ value.translate(js_replacement)\n\n# Create our environment, setting autoescape\
      \ to use the default\n# select_autoescape function\nenv = Environment(\n   \
      \ loader=FileSystemLoader(os.getcwd()+\"/template\"),\n    autoescape=select_autoescape,\n\
      )\n# Add an escape link filter to be used in our template\nenv.filters[\"escape_link\"\
      ] = escape_link\nenv.filters[\"escape_js\"] = escape_js\n# Load our template\
      \ file\ntemplate = env.get_template(\"mytemplate.html\")\n# Render with different\
      \ variables which call our filters\nprint(template.render(\n    html_context=\"\
      <img src=x onerror=alert(1)>\",\n    link_context=\"/# onclick=alert(1)<script>alert(1)</script>\"\
      ,\n    script_context=\"alert(1);alert`1`\",)\n)\n\n# Sample template:\n\"\"\
      \"\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <title>My Webpage</title>\n\
      </head>\n<body>\n    <h1>My Webpage</h1>\n    {{ html_context }}\n    <a href=\"\
      {{ link_context | escape_link }}\">link</a>\n    <script>{{ script_context |\
      \ escape_js }}</script>\n</body>\n</html>\n\"\"\"\n```\n\nFor more information\
      \ on autoescape see:\n- https://jinja.palletsprojects.com/en/3.1.x/api/#autoescaping\n\
      \nFor more information on XSS see OWASP:\n- https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"
    subcategory: InputValidation
  severity: warning
- id: Semgrep_python_escaping_rule-use-of-mako-templates
  languages:
  - python
  message: 'python_escaping_rule-use-of-mako-templates

    The application was found using mako templates without `default_filters` being
    passed to the `Template` or `TemplateLookup` constructors.'
  metadata:
    category: Security
    explanation: "## python_escaping_rule-use-of-mako-templates\nThe application was\
      \ found using mako templates without `default_filters`\nbeing passed to the\
      \ `Template` or `TemplateLookup` constructors. If using \nin the context of\
      \ HTML, this could lead to Cross-Site Scripting (XSS) attacks \nwhen rendering\
      \ with user-supplied input.\n\nUnfortunately, Jinja2 does not support context-aware\
      \ escaping, meaning it\nis insufficient to protect against XSS for the various\
      \ web contexts. It is \nimportant to encode the data depending on the specific\
      \ context it is used in. \nThere are at least six context types:\n\n- Inside\
      \ HTML tags `<div>context 1</div>`\n- Inside attributes: `<div class=\"context\
      \ 2\"></div>`\n- Inside event attributes `<button onclick=\"context 3\">button</button>`\n\
      - Inside script blocks: `<script>var x = \"context 4\"</script>`\n- Unsafe element\
      \ HTML assignment: `element.innerHTML = \"context 5\"`\n- Inside URLs: \n`<iframe\
      \ src=\"context 6\"></iframe><a href=\"context 6\">link</a>`\n\nScript blocks\
      \ alone have multiple ways they need to be encoded. Extra care\nmust be taken\
      \ if user input is ever output inside of script tags.\n\nUser input that is\
      \ displayed within the application must be encoded,\nsanitized or validated\
      \ to ensure it cannot be treated as HTML or executed \nas Javascript code. Care\
      \ must also be taken to not mix server-side templating \nwith client-side templating,\
      \ as the server-side templating will not encode things \nlike {{ 7*7 }} which\
      \ may execute client-side templating features.\n\nIt is _NOT_ advised to encode\
      \ user input prior to inserting into a data\nstore. The data will need to be\
      \ encoded depending on context of where it is output. \nIt is much safer to\
      \ force the displaying system to handle the encoding and \nnot attempt to guess\
      \ how it should be encoded.\n\nTo handle different contexts, one approach would\
      \ be to write custom mako\nfilters. Below is an example that escapes or encodes\
      \ links and \npotentially malicious script, note this does not include other\
      \ contexts \nsuch as CSS or attributes:\n```\n# filters.py module:\n\ndef escape_link(value):\n\
      \    bad_link = \"#JinjatmplZ\"\n    # Block any values that start with // as\
      \ that could be used to inject\n    # links to third party pages see:\nhttps://en.wikipedia.org/wiki/Wikipedia:Protocol-relative_URL\n\
      \    if value.startswith('//'):\n        return bad_link\n\n    # Only allow\
      \ relative links\n    # if you want to allow links that start with http or ws\
      \ replace with below:\n    # if not value.startswith('/'): and not value.startswith('http')\
      \ and not\nvalue.startswith('ws')\n    if not value.startswith('/'):\n     \
      \   return bad_link\n\n    return value\n\n# Create a replacement table\njs_replacement\
      \ = str.maketrans({\n    '\\0': \"\\\\u0000\",\n    '\\t': \"\\\\t\",\n    '\\\
      n': \"\\\\n\",\n    '\\v': \"\\\\u000b\",\n    '\\f': \"\\\\f`\",\n    '\\r':\
      \ \"\\\\r\",\n    '\"':  \"\\\\u0022\",\n    '`':  \"\\\\u0060\",\n    '&':\
      \  \"\\\\u0026\",\n    '\\'': \"\\\\u0027\",\n    '+':  \"\\\\u002b\",\n   \
      \ '/':  \"\\\\/\",\n    '<':  \"\\\\u003c\",\n    '>':  \"\\\\u003e\",\n   \
      \ '\\\\': \"\\\\\\\\\",\n    '(': \"\\\\u0028\",\n    ')': \"\\\\u0029\",\n\
      })\n\ndef escape_js(value):\n    # Escape the input for use in <script> context,\
      \ USE WITH CAUTION\n    # It is strongly recommended to never pass user-supplied\
      \ input to\n    # the JavaScript context.\n\n    # Translate any potential characters\
      \ using our translation table\n    return value.translate(js_replacement)\n\n\
      #####################################################################\n# main\
      \ module:                                                      #\n#####################################################################\n\
      from mako.template import Template\n\n# Define our template, note the calls\
      \ to our custom filters depending\n# on context\ntemplate_text = \"\"\"\n\n\
      <!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <title>My Webpage</title>\n\
      </head>\n<body>\n    <h1>My Webpage</h1>\n    ${html_context}\n    <a href=\"\
      ${link_context | escape_link}\">link</a>\n    <script>${script_context | escape_js}</script>\n\
      </body>\n</html>\n\"\"\"\n\n# Load our template with default filters and our\
      \ imported filters for\n# usage in template files\nt = Template(template_text,\n\
      \            # By default enable the html filter with 'h'\n            default_filters=['h'],\n\
      \            # Import our custom filters\n            imports=[\"from filters\
      \ import escape_link, escape_js\"])\n\n# Render our template\nprint(t.render(html_context=\"\
      <img src=x onerror=alert(1)>\",\n    link_context=\"/# onclick=alert(1)<script>alert(1)</script>\"\
      ,\n    script_context=\"alert(1)<img src=x onerror=alert(1)>\",)\n)\n```"
    subcategory: InputValidation
  severity: warning
- id: Semgrep_python_eval_rule-eval
  languages:
  - python
  message: 'python_eval_rule-eval

    The application was found calling the `eval` function with non-literal data.'
  metadata:
    category: Security
    explanation: "## python_eval_rule-eval\nThe application was found calling the\
      \ `eval` function with non-literal data. If the variable contains \nuser-controlled\
      \ data, either partially or fully, an adversary could compromise the entire\
      \ system by \nexecuting arbitrary Python code.\n\nTo remediate this issue, remove\
      \ all calls to `eval` and consider alternative methods for executing \nthe necessary\
      \ business logic. There is almost no safe method of calling `eval` with user-supplied\
      \ input.\n\nIf the application only needs to convert strings into objects, consider\
      \ using `json.loads`. In \nsome cases `ast.literal_eval` is recommended, but\
      \ this should be avoided as it can still suffer \nfrom other issues such as\
      \ the ability for malicious code to crash the python interpreter or application.\n\
      \nExample using `json.loads`` to load in arbitrary data to create data structures:\n\
      ```\n# User supplied data as a blob of JSON\nuser_supplied_data = \"\"\"{\"\
      user\": \"test\", \"metadata\": [1,2,3]}\"\"\"\n# Load the JSON\nuser_object\
      \ = json.loads(user_supplied_data)\n# Manually add protected properties _after_\
      \ loading, never before\nuser_object[\"is_admin\"] = False\n# Work with the\
      \ object\n```"
    subcategory: InputValidation
  severity: warning
- id: Semgrep_python_exec_rule-exec-used
  languages:
  - python
  message: 'python_exec_rule-exec-used

    The application was found calling the `exec` function with a non-literal variable.'
  metadata:
    category: Security
    explanation: "## python_exec_rule-exec-used\nThe application was found calling\
      \ the `exec` function with a non-literal variable. If the\nvariable comes from\
      \ user-supplied input, an adversary could compromise the entire system by\n\
      executing arbitrary python code.\n\nTo remediate this issue, remove all calls\
      \ to `exec` and consider alternative methods for\nexecuting the necessary business\
      \ logic. There is almost no safe method of calling `eval` \nwith user-supplied\
      \ input.\n\nIf the application only needs to convert strings into objects, consider\
      \ using `json.loads`.\nIn some cases `ast.literal_eval` is recommended, but\
      \ this should be avoided as it can still\nsuffer from other issues such as the\
      \ ability for malicious code to crash the python\ninterpreter or application.\n\
      \nExample using `json.loads`` to load in arbitrary data to create data structures:\n\
      ```\n# User supplied data as a blob of JSON\nuser_supplied_data = \"\"\"{\"\
      user\": \"test\", \"metadata\": [1,2,3]}\"\"\"\n# Load the JSON\nuser_object\
      \ = json.loads(user_supplied_data)\n# Manually add protected properties _after_\
      \ loading, never before\nuser_object[\"is_admin\"] = False\n# Work with the\
      \ object\n```"
    subcategory: InputValidation
  severity: warning
- id: Semgrep_python_exec_rule-os-path
  languages:
  - python
  message: 'python_exec_rule-os-path

    Starting a process with a shell; seems safe, but may be changed in the future,
    consider rewriting without shell '
  metadata:
    category: Security
    explanation: '## python_exec_rule-os-path

      Starting a process with a shell; seems safe, but may be changed in the future,
      consider

      rewriting without shell'
    subcategory: InputValidation
  severity: info
- id: Semgrep_python_exec_rule-os-popen2
  languages:
  - python
  message: 'python_exec_rule-os-popen2

    Starting a process with a shell; seems safe, but may be changed in the future,
    consider rewriting without shell '
  metadata:
    category: Security
    explanation: '## python_exec_rule-os-popen2

      Starting a process with a shell; seems safe, but may be changed in the future,
      consider

      rewriting without shell'
    subcategory: InputValidation
  severity: info
- id: Semgrep_python_exec_rule-paramiko-calls
  languages:
  - python
  message: 'python_exec_rule-paramiko-calls

    Unverified SSL context detected.'
  metadata:
    category: Security
    explanation: '## python_exec_rule-paramiko-calls

      Unverified SSL context detected. This will permit insecure connections without
      `verifyingSSL`

      certificates. Use `ssl.create_default_context()` instead.'
    subcategory: InputValidation
  severity: warning
- id: Semgrep_python_exec_rule-start-process-partial-path
  languages:
  - python
  message: 'python_exec_rule-start-process-partial-path

    Starting a process with a partial executable path '
  metadata:
    category: Security
    explanation: '## python_exec_rule-start-process-partial-path

      Starting a process with a partial executable path'
    subcategory: InputValidation
  severity: info
- id: Semgrep_python_exec_rule-start-process-path
  languages:
  - python
  message: 'python_exec_rule-start-process-path

    Starting a process with a partial executable path '
  metadata:
    category: Security
    explanation: '## python_exec_rule-start-process-path

      Starting a process with a partial executable path'
    subcategory: InputValidation
  severity: error
- id: Semgrep_python_exec_rule-start-process-with-no-shell
  languages:
  - python
  message: 'python_exec_rule-start-process-with-no-shell

    Found dynamic content when spawning a process.'
  metadata:
    category: Security
    explanation: '## python_exec_rule-start-process-with-no-shell

      Found dynamic content when spawning a process. This is dangerous if externaldata
      can reach this

      function call because it allows a malicious actor toexecute commands. Ensure
      no external data

      reaches here.'
    subcategory: InputValidation
  severity: warning
- id: Semgrep_python_exec_rule-subprocess-call
  languages:
  - python
  message: 'python_exec_rule-subprocess-call

    Python possesses many mechanisms to invoke an external executable.'
  metadata:
    category: Security
    explanation: '## python_exec_rule-subprocess-call

      Python possesses many mechanisms to invoke an external executable. However,

      doing so may present a security issue if appropriate care is not taken to

      sanitize any user provided or variable input. This plugin test is part of a

      family of tests built to check for process spawning and warn appropriately.

      Specifically, this test looks for the spawning of a subprocess without the

      use of a command shell. This type of subprocess invocation is not

      vulnerable to shell injection attacks, but care should still be taken to

      ensure validity of input.'
    subcategory: InputValidation
  severity: warning
- id: Semgrep_python_exec_rule-subprocess-call-array
  languages:
  - python
  message: 'python_exec_rule-subprocess-call-array

    subprocess call - check for execution of untrusted input '
  metadata:
    category: Security
    explanation: '## python_exec_rule-subprocess-call-array

      subprocess call - check for execution of untrusted input'
    subcategory: InputValidation
  severity: warning
- id: Semgrep_python_exec_rule-subprocess-popen-shell-true
  languages:
  - python
  message: 'python_exec_rule-subprocess-popen-shell-true

    Found `subprocess` function `$FUNC` with `shell=True`. This is dangerous because
    this call will spawn the command using a shell process.'
  metadata:
    category: Security
    explanation: '## python_exec_rule-subprocess-popen-shell-true

      Found `subprocess` function `$FUNC` with `shell=True`. This is dangerous because
      this call will

      spawn the command using a shell process. Doing so propagates current shell settings
      and

      variables,

      which makes it much easier for a malicious actor to execute commands. Use `shell=False`

      instead.'
    subcategory: InputValidation
  severity: error
- id: Semgrep_python_exec_rule-subprocess-shell-TRUE
  languages:
  - python
  message: 'python_exec_rule-subprocess-shell-TRUE

    subprocess call - check for execution of untrusted input '
  metadata:
    category: Security
    explanation: '## python_exec_rule-subprocess-shell-TRUE

      subprocess call - check for execution of untrusted input'
    subcategory: InputValidation
  severity: warning
- id: Semgrep_python_file-permissions_rule-general-bad-permission
  languages:
  - python
  message: 'python_file-permissions_rule-general-bad-permission

    The application was found setting file permissions to overly permissive values.'
  metadata:
    category: Security
    explanation: '## python_file-permissions_rule-general-bad-permission

      The application was found setting file permissions to overly permissive values.
      Consider

      using the following values if the application user is the only process to access

      the file:


      - 0400 - read only access to the file

      - 0200 - write only access to the file

      - 0600 - read/write access to the file


      Example creating a file with read/write permissions for the application user:

      ```

      # Use octal values to set 0o600 (read/write access to the file) for the current

      # user

      os.chmod(''somefile.txt'', 0o600)

      ```


      For all other values please see:

      https://en.wikipedia.org/wiki/File-system_permissions#Numeric_notation'
    subcategory: InsecureStorage
  severity: warning
- id: Semgrep_python_files_rule-tarfile-unsafe-members
  languages:
  - python
  message: 'python_files_rule-tarfile-unsafe-members

    The application may be vulnerable to a path traversal if it extracts untrusted
    archive files.'
  metadata:
    category: Security
    explanation: "## python_files_rule-tarfile-unsafe-members\nThe application may\
      \ be vulnerable to a path traversal if it extracts untrusted archive files.\n\
      This vulnerability is colloquially known as 'Zip Slip'. Archive files may contain\
      \ folders\nwhich,\nwhen extracted, may write outside of the intended directory.\
      \ This is exploited by including\npath traversal characters such as `../../other/directory`\
      \ to overwrite or place files in system\nor application directories.\n\nExtra\
      \ care must be taken when extracting archive files as there are numerous concerns:\n\
      \n- If possible, generate unique filenames instead of using the archives file\
      \ names, as it may be\npossible for users to overwrite files if the filenames\
      \ are the same.\n- Validate file paths are written with a prefixed, known trusted\
      \ directory.\n- Only process regular files and not symbolic links, as some applications\
      \ may attempt to\nread/follow\nthe symbolic link, leading to arbitrary file\
      \ read / write vulnerabilities.\n\nExample of securely processing an archive\
      \ file:\n```\nimport tarfile\nimport uuid\n# import os\n\ntar = tarfile.open('some.tar')\n\
      \n# Max number of allowed files in our archive\nmax_files = 10\n# Max size for\
      \ all files in archive\nmax_size = 1024 * 1024 * 10 # 10MB\n# Max size per file\
      \ in archive\nmax_file_size = 1024 * 1024 # 1MB\n\n# Validate number of files\
      \ in archive\nif len(tar.getmembers()) > max_files:\n    raise Exception(\"\
      Too many files in archive\")\n\ntotal_size = 0\n# Loop over all files to see\
      \ if we exceed max size\n# if so, do not process any of them.\nfor f in tar.getmembers():\n\
      \    total_size += f.size\n    if total_size >= max_size:\n        raise Exception(\"\
      Archive files exceeded max file size\")\n\n# Iterate over files now that we\
      \ know the total size is within limits\nfor f in tar.getmembers():\n    # Internally\
      \ this calls TarInfo.isreg() which ensures\n    # the file is a regular file\
      \ and not a sym link or directory\n    if not f.isfile():\n        continue\n\
      \n    # Optional, set a limit on each file size\n    if f.size > max_file_size:\n\
      \        raise Exception(f\"File {f.name} too large: {f.size}\")\n\n    # If\
      \ original names are required, ensure that only the\n    # filename is used:\n\
      \    # filename = os.path.basename(f.name)\n\n    # More secure, generate a\
      \ UUID4 value instead\n    filename = uuid.uuid4().hex\n\n    # Reset the archive\
      \ filename to the basename\n    # Newer versions of python (3.11.4+) should\
      \ use:\n    # new_tar = old_tar.replace(name=...new name...)\n    f.name = filename\n\
      \n    # Extract the file into a restricted directory, with our\n    # own user's\
      \ attributes, not the file from the archive\n    tar.extract(f, '/opt/app/restricted/',\
      \ set_attrs=False)\n```\n\nFor more information on tarfile see:\n- https://docs.python.org/3/library/tarfile.html"
    subcategory: InsecureStorage
  severity: warning
- id: Semgrep_python_flask_rule-app-debug
  languages:
  - python
  message: 'python_flask_rule-app-debug

    The Flask application is running with `debug=True` configured.'
  metadata:
    category: Security
    explanation: '## python_flask_rule-app-debug

      The Flask application is running with `debug=True` configured. By enabling this
      option, certain

      exceptions or errors could cause sensitive information to be leaked in HTTP
      responses.


      Additionally, it is not recommended to run a Flask application using `Flask.run(...)`
      in

      production. Instead, a WSGI server such as

      [gunicorn](https://flask.palletsprojects.com/en/2.3.x/deploying/gunicorn/)

      or [waitress](https://flask.palletsprojects.com/en/2.3.x/deploying/waitress/)
      be used instead.


      For more information on deployment options for Flask applications see:

      - https://flask.palletsprojects.com/en/2.3.x/deploying/'
    subcategory: Other
  severity: warning
- id: Semgrep_python_flask_rule-flask-open-redirect
  languages:
  - python
  message: 'python_flask_rule-flask-open-redirect

    Data from request is passed to redirect(). This is an open redirect and could
    be exploited.'
  metadata:
    category: Security
    explanation: "## python_flask_rule-flask-open-redirect\nData from request is passed\
      \ to redirect(). This is an open redirect and could be exploited. Consider using\
      \ 'url_for()'  to generate links to known locations. If you must use a URL to\
      \ unknown pages, consider using 'urlparse()' or similar  and checking if the\
      \ 'netloc' property is the same as your site's host name. For example:\n\n \
      \ Example:\n  ```python\n  from flask import Flask, request, redirect, url_for\n\
      \  from urllib.parse import urlparse\n\n  app = Flask(__name__)\n\n  @app.route('/login')\n\
      \  def login():\n      next = request.args.get('next')\n      if not next:\n\
      \          next = url_for('index')\n      if urlparse(next).netloc != urlparse(request.url).netloc:\n\
      \          return redirect(url_for('index'))\n      return redirect(next)\n\
      \  ```\n See the references for more information."
    subcategory: InsecureStorage
  severity: warning
- id: Semgrep_python_flask_rule-path-traversal-open
  languages:
  - python
  message: 'python_flask_rule-path-traversal-open

    Found request data in a call to ''open''. An attacker can manipulate this input
    to access files outside the intended  directory.'
  metadata:
    category: Security
    explanation: "## python_flask_rule-path-traversal-open\nFound request data in\
      \ a call to 'open'. An attacker can manipulate this input to access files outside\
      \ the intended \ndirectory. This can lead to unauthorized access to sensitive\
      \ files or directories. To prevent path traversal attacks, \navoid using user-controlled\
      \ input in file paths. If you must use user-controlled input, validate and sanitize\
      \ the \ninput to ensure it does not contain any path traversal sequences. For\
      \ example, you can use the `os.path.join` function \nto safely construct file\
      \ paths or validate that the absolute path starts with the directory which is\
      \ whitelisted for \naccessing file. The following code snippet demonstrates\
      \ how to validate a file path from user-controlled input:\n```\nimport os\n\n\
      def safe_open_file(filename, base_path):\n  # Resolve the absolute path of the\
      \ user-supplied filename\n  absolute_path = os.path.abspath(filename)\n\n  #\
      \ Check that the absolute path starts with the base path\n  if not absolute_path.startswith(base_path):\n\
      \      raise ValueError(\"Invalid file path\")\n\n  return open(absolute_path,\
      \ 'r')\n```\nFor more information, see the OWASP Path Traversal page: https://owasp.org/www-community/attacks/Path_Traversal"
    subcategory: InsecureStorage
  severity: error
- id: Semgrep_python_flask_rule-tainted-sql-string
  languages:
  - python
  message: 'python_flask_rule-tainted-sql-string

    Detected user input used to manually construct a SQL string.'
  metadata:
    category: Security
    explanation: "## python_flask_rule-tainted-sql-string\nDetected user input used\
      \ to manually construct a SQL string. This is usually\nbad practice because\
      \ manual construction could accidentally result in a SQL\ninjection. An attacker\
      \ could use a SQL injection to steal or modify contents\nof the database. Instead,\
      \ use a parameterized query which is available\nby default in most database\
      \ engines. Alternatively, consider using an\nobject-relational mapper (ORM)\
      \ such as SQLAlchemy which will protect your queries.\n\nSQL Injections are\
      \ a critical type of vulnerability that can lead to data \nor system compromise.\
      \ By dynamically generating SQL query strings, user \ninput may be able to influence\
      \ the logic of an SQL statement. \nThis could lead to an malicious parties accessing\
      \ information they should not \nhave access to, or in some circumstances, being\
      \ able to execute OS functionality\nor code.\n\nReplace all dynamically generated\
      \ SQL queries with parameterized queries. \nIn situations where dynamic queries\
      \ must be created, never use direct user input,\nbut instead use a map or dictionary\
      \ of valid values and resolve them using a user \nsupplied key.\n\nFor example,\
      \ some database drivers do not allow parameterized queries for \n`>` or `<`\
      \ comparison operators. In these cases, do not use a user supplied \n`>` or\
      \ `<` value, but rather have the user supply a `gt` or `lt` value. \nThe alphabetical\
      \ values are then used to look up the `>` and `<` values to be used \nin the\
      \ construction of the dynamic query. The same goes for other queries where \n\
      column or table names are required but cannot be parameterized.\nData that is\
      \ possible user-controlled from a python request is passed\nto `execute()` function.\
      \ To remediate this issue, use SQLAlchemy statements\nwhich are built with query\
      \ parameterization and therefore not vulnerable \nto sql injection.\n\nIf for\
      \ some reason this is not feasible, ensure calls including user-supplied \n\
      data pass it in to the `params` parameter of the `execute()` method.\nBelow\
      \ is an example using `execute()`, passing in user-supplied data as `params`.\
      \ \nThis will treat the query as a parameterized query and `params` as strictly\
      \ data, \npreventing any possibility of SQL Injection.\n\n```\nname = request.args.get('name')\n\
      req = text('SELECT * FROM student WHERE firstname = :x')\nresult = db.session.execute(req,\
      \ {\"x\":name})\n```\nFor more information on QuerySets see:\n- https://docs.djangoproject.com/en/4.2/ref/models/querysets/#queryset-api\n\
      For more information on SQL Injections see OWASP:\n- https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html"
    subcategory: InputValidation
  severity: error
- id: Semgrep_python_ftp_rule-ftplib
  languages:
  - python
  message: 'python_ftp_rule-ftplib

    The application was found using an FTP library.'
  metadata:
    category: Security
    explanation: "## python_ftp_rule-ftplib\nThe application was found using an FTP\
      \ library. As FTP does not provide encryption, it is\nstrongly recommended that\
      \ any file transfers be done over a more secure transport such as\nSSH.\n\n\
      The [paramiko](https://www.paramiko.org/) library can be used with an SCP module\
      \ to allow\nsecure file transfers.\n\nExample using `paramiko` SSH client and\
      \ the `scp` module:\n```\nimport paramiko\nimport scp\n\n# Create an SSH client\n\
      with paramiko.SSHClient() as ssh:\n    # Load the system host keys so we can\
      \ confirm the\n    # host we are connecting to is legitimate\n    ssh.load_system_host_keys('/home/appuser/.ssh/known_hosts')\n\
      \n    # Connect to the remote host using our SSH private key\n    ssh.connect(hostname='example.org',\n\
      \                port=22,\n                username='appuser',\n           \
      \     key_filename='/home/appuser/.ssh/private_key')\n\n    # Create an SCP\
      \ client with the ssh transport and copy files\n    with scp.SCPClient(ssh.get_transport())\
      \ as secure_copy:\n        secure_copy.get('remote/test.file', 'local/test.file')\n\
      \        secure_copy.put('local/some.file', 'remote/some.file')\n```\n\nFor\
      \ more information on the paramiko module see:\n- https://www.paramiko.org/\n\
      \nFor more information on the scp module see:\n- https://github.com/jbardin/scp.py"
    subcategory: Visibility
  severity: warning
- id: Semgrep_python_jwt_rule-jwt-none-alg
  languages:
  - python
  message: 'python_jwt_rule-jwt-none-alg

    Detected use of the ''none'' algorithm in a JWT token.'
  metadata:
    category: Security
    explanation: '## python_jwt_rule-jwt-none-alg

      Detected use of the ''none'' algorithm in a JWT token.

      The ''none'' algorithm assumes the integrity of the token has already

      been verified. This would allow a malicious actor to forge a JWT token

      that will automatically be verified. Do not explicitly use the ''none''

      algorithm. Instead, use an algorithm such as ''HS256''.'
    subcategory: Visibility
  severity: error
- id: Semgrep_python_log_rule-logging-config-insecure-listen
  languages:
  - python
  message: 'python_log_rule-logging-config-insecure-listen

    The application was found calling the `logging.config.listen`` function, which
    provides the ability to listen for external configuration files over a socket
    server.'
  metadata:
    category: Security
    explanation: '## python_log_rule-logging-config-insecure-listen

      The application was found calling the `logging.config.listen`` function, which
      provides the

      ability to listen for

      external configuration files over a socket server. This listen socket parses
      part of the

      configuration and calls

      `eval` on the supplied configuration file. A local user, or an adversary who
      is able to

      exploit

      a Server Side Request Forgery (SSRF) attack to communicate over localhost, would
      be able to

      execute arbitrary

      code by passing in a logging config that contains python code.


      To remediate the issue, remove the call to `logging.config.listen` method.


      For more information on the listen functionality see:

      - https://docs.python.org/3/library/logging.config.html#logging.config.listen'
    subcategory: InputValidation
  severity: warning
- id: Semgrep_python_pyramid_rule-pyramid-csrf-origin-check
  languages:
  - python
  message: 'python_pyramid_rule-pyramid-csrf-origin-check

    Automatic check of the referrer for cross-site request forgery tokens has been
    explicitly disabled globally, which might leave views unprotected when an unsafe
    CSRF storage policy is used.'
  metadata:
    category: Security
    explanation: "## python_pyramid_rule-pyramid-csrf-origin-check\nAutomatic check\
      \ of the referrer for cross-site request forgery tokens\nhas been explicitly\
      \ disabled globally, which might leave views unprotected\nwhen an unsafe CSRF\
      \ storage policy is used. By passing `check_origin=False` \nto `set_default_csrf_options()`\
      \ method, you opt out of checking the origin \nof the domain in the referrer\
      \ header or the origin header, which can make \nthe application vulnerable to\
      \ CSRF attacks, specially if CSRF token is not \nproperly implemented.\nCSRF\
      \ attacks are a type of exploit where an attacker tricks a user into \nexecuting\
      \ unwanted actions on a web application in which they are authenticated. \n\
      If a user is logged into a web application, an attacker could create a malicious\
      \ \nlink or script on another site that causes the user's browser to make a\
      \ request \nto the web application, carrying out an action without the user's\
      \ consent.\n\nTo mitigate this vulnerability, use \n'pyramid.config.Configurator.set_default_csrf_options(check_origin=True)'\n\
      to turn the automatic check for all unsafe methods (per RFC2616).\n\nSecure\
      \ Code Example:\n```\ndef safe(config):\n  config.set_csrf_storage_policy(CookieCSRFStoragePolicy())\n\
      \  config.set_default_csrf_options(check_origin=True)\n```"
    subcategory: InsecureStorage
  severity: warning
- id: Semgrep_python_random_rule-random
  languages:
  - python
  message: 'python_random_rule-random

    Depending on the context, generating weak random numbers may expose cryptographic
    functions, which rely on these numbers, to be exploitable.'
  metadata:
    category: Security
    explanation: '## python_random_rule-random

      Depending on the context, generating weak random numbers may expose cryptographic
      functions,

      which rely on these numbers, to be exploitable. When generating numbers for
      sensitive values

      such as tokens, nonces, and cryptographic keys, it is recommended that the `secrets`
      module

      be used instead.


      Example using the secrets module:

      ```

      import secrets


      # Generate a secure random 64 byte array

      random_bytes = secrets.token_bytes(64)

      print(random_bytes)


      # Generate a secure random 64 byte array as a hex string

      random_bytes_hex = secrets.token_hex(64)


      # Generate a secure random 64 byte array base64 encoded for use in URLs

      random_string = secrets.token_urlsafe(64)

      ```


      For more information on the `secrets` module see:

      - https://docs.python.org/3/library/secrets.html'
    subcategory: Visibility
  severity: info
- id: Semgrep_python_requests_rule-request-without-timeout
  languages:
  - python
  message: 'python_requests_rule-request-without-timeout

    The application was found using the `requests` module without configuring a timeout
    value for connections.'
  metadata:
    category: Security
    explanation: '## python_requests_rule-request-without-timeout

      The application was found using the `requests` module without configuring a
      timeout value for

      connections. This could lead to uncontrolled resource consumption where the
      application could

      run out of

      socket descriptors, effectively causing a Denial of Service (DoS).


      To remediate this issue, pass in a `timeout=` argument to each `requests` call.


      Example using a timeout for an HTTP GET request:

      ```

      # Issue a GET request to https://example.com with a timeout of 10 seconds

      response = requests.get(''https://example.com'', timeout=10)

      # Work with the response object

      # ...

      ```


      For more information on using the requests module see:

      - https://requests.readthedocs.io/en/latest/api/'
    subcategory: Other
  severity: warning
- id: Semgrep_python_snmp_rule-insecure-snmp-version
  languages:
  - python
  message: 'python_snmp_rule-insecure-snmp-version

    Pysnmp was detected using versions SNMPv1 or SNMPv2. SNPMv1 and SNMPv2 are insecure
    and should no longer be used as they do not offer encryption.'
  metadata:
    category: Security
    explanation: "## python_snmp_rule-insecure-snmp-version\nPysnmp was detected using\
      \ versions SNMPv1 or SNMPv2. SNPMv1 and SNMPv2 are insecure\nand should no longer\
      \ be used as they do not offer encryption.\n\nIf possible, query SNMP devices\
      \ using SNMPv3 instead.\n\nExample querying a device using SNMPv3 with SHA-AES:\n\
      ```\nfrom pysnmp.hlapi import *\n# Create the snpm iterator\niterator = getCmd(\n\
      \    SnmpEngine(),\n    # Configure using SHA AES\n    UsmUserData('usr-sha-aes',\
      \ 'authkey1', 'privkey1',\n                authProtocol=USM_AUTH_HMAC96_SHA,\n\
      \                privProtocol=USM_PRIV_CFB128_AES),\n    UdpTransportTarget(('demo.snmplabs.com',\
      \ 161)),\n    ContextData(),\n    ObjectType(ObjectIdentity('SNMPv2-MIB', 'sysDescr',\
      \ 0))\n)\n```\n\nFor more information on using SNMPv3 with `Pysnmp` see:\n-\
      \ https://pysnmp.readthedocs.io/en/latest/examples/hlapi/v3arch/asyncore/sync/manager/cmdgen/snmp-versions.html#snmpv3-auth-sha-privacy-aes128"
    subcategory: Visibility
  severity: warning
- id: Semgrep_python_snmp_rule-snmp-weak-cryptography
  languages:
  - python
  message: 'python_snmp_rule-snmp-weak-cryptography

    Pysnmp was detected using SNMPv3 without authentication or encryption protections
    enabled.'
  metadata:
    category: Security
    explanation: "## python_snmp_rule-snmp-weak-cryptography\nPysnmp was detected\
      \ using SNMPv3 without authentication or encryption\nprotections enabled.\n\n\
      - Use of `usmNoAuthProtocol` or `usmNoPrivProtocol` indicates that\neither authentication\
      \ or privacy, respectively, is not being used.  \n- The absence of  `authKey`\
      \ (or `authKey=None`) implies no authentication, \nwhich is equivalent to using\
      \ `usmNoAuthProtocol`. \n- The absence of `privKey` (or `privKey=None`) implies\
      \ no privacy (encryption), \nwhich is equivalent to using `usmNoPrivProtocol`.\n\
      \nTo enhance the security of your SNMP communications, it is recommended to\
      \ use both\nauthentication and privacy features in SNMPv3:\n\n- Use SHA for\
      \ Authentication: SHA (Secure Hash Algorithm) is a more secure option \nfor\
      \ SNMP message authentication. To use SHA, set the `authProtocol` to \n`usmHMACSHAAuthProtocol`\
      \ and provide a strong `authKey`.\n- Use AES for Privacy: AES (Advanced Encryption\
      \ Standard) is recommended for \nencrypting SNMP messages. Set the `privProtocol`\
      \ to `usmAesCfb128Protocol`\nor a similar AES-based protocol and specify a strong\
      \ `privKey`.\n\nExample of secure `UsmUserData` configuration:\n``` \n  from\
      \ pysnmp.hlapi import UsmUserData, usmHMACSHAAuthProtocol, usmAesCfb128Protocol\n\
      \      \n  user_data = UsmUserData('username','authKey', 'privKey',        \
      \   \n                        authProtocol=usmHMACSHAAuthProtocol,\n       \
      \                 privProtocol=usmAesCfb128Protocol)\n```"
    subcategory: Visibility
  severity: warning
- id: Semgrep_python_sql_rule-hardcoded-sql-expression
  languages:
  - python
  message: 'python_sql_rule-hardcoded-sql-expression

    SQL Injection is a critical vulnerability that can lead to data or system compromise.'
  metadata:
    category: Security
    explanation: '## python_sql_rule-hardcoded-sql-expression

      SQL Injection is a critical vulnerability that can lead to data or system compromise.
      By

      dynamically generating SQL query strings, user input may be able to influence
      the logic of

      the SQL statement. This could lead to an adversary accessing information they
      should

      not have access to, or in some circumstances, being able to execute OS functionality
      or code.


      Replace all dynamically generated SQL queries with parameterized queries. In
      situations where

      dynamic queries must be created, never use direct user input, but instead use
      a map or

      dictionary of valid values and resolve them using a user supplied key.


      For example, some database drivers do not allow parameterized queries for `>`
      or `<` comparison

      operators. In these cases, do not use a user supplied `>` or `<` value, but
      rather have the

      user

      supply a `gt` or `lt` value. The alphabetical values are then used to look up
      the `>` and `<`

      values to be used in the construction of the dynamic query. The same goes for
      other queries

      where

      column or table names are required but cannot be parameterized.


      Example using `PreparedStatement` queries:

      ```

      import sqlite3


      # Create a new database (in memory)

      con = sqlite3.connect(":memory:")

      # Get a cursor from the connection

      cur = con.cursor()

      # Create a tuple of the value to be used in the parameterized query

      params = (''user-input'',)

      # execute the statement, passing in the params for the value

      cur.execute("select name from sqlite_master where name = ?", params)

      # work with the result

      result = cur.fetchall()

      ```


      For more information on SQL Injection see OWASP:

      https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html'
    subcategory: InputValidation
  severity: warning
- id: Semgrep_python_ssh_rule-ssh-nohost-key-verification
  languages:
  - python
  message: 'python_ssh_rule-ssh-nohost-key-verification

    The application was found to ignore host keys.'
  metadata:
    category: Security
    explanation: "## python_ssh_rule-ssh-nohost-key-verification\nThe application\
      \ was found to ignore host keys. Host keys are important as\nthey provide assurance\
      \ that the client can prove that the host is trusted.\nBy ignoring these host\
      \ keys, it is impossible for the client to validate the\nconnection is to a\
      \ trusted host.\n\nTo remediate this issue, remove the call to `set_missing_host_key_policy(...)`\
      \ which\nsets the host key policy. Instead, load key files using either `load_system_host_keys`\n\
      or `load_host_keys` to only allow known good hosts. By not setting a host key\
      \ policy\nfor unknown hosts, `paramiko`'s default policy is to use `RejectPolicy`.\n\
      \nExample configuration connecting to a known, trusted host, and not allowing\
      \ connections\nto unknown hosts:\n```\nimport paramiko\n\n# Create an SSH client\n\
      with paramiko.SSHClient() as ssh:\n    # Load the system host keys so we can\
      \ confirm the\n    # host we are connecting to is legitimate\n    ssh.load_system_host_keys('/home/appuser/.ssh/known_hosts')\n\
      \n    # Connect to the remote host using our SSH private key\n    ssh.connect(hostname='example.org',\n\
      \                port=22,\n                username='appuser',\n           \
      \     key_filename='/home/appuser/.ssh/private_key')\n```\n\nFor more information\
      \ on `set_missing_host_key_policy` see:\n- https://docs.paramiko.org/en/stable/api/client.html#paramiko.client.SSHClient.set_missing_host_key_policy"
    subcategory: InsecureStorage
  severity: error
- id: Semgrep_python_ssl_rule-req-no-certvalid
  languages:
  - python
  message: 'python_ssl_rule-req-no-certvalid

    The application was found using the `requests` module without configuring a timeout
    value for connections.'
  metadata:
    category: Security
    explanation: '## python_ssl_rule-req-no-certvalid

      The application was found using the `requests` module without configuring a
      timeout value for

      connections. The `verify=False` argument has been set, which effectively disables
      the

      validation

      of server certificates.


      This allows for an adversary who is in between the application and the target
      host to intercept

      potentially sensitive information or transmit malicious data.


      To remediate this issue either remove the `verify=False` argument, or set `verify=True`to
      each

      `requests` call.


      Example verifying server certificates for an HTTP GET request:

      ```

      # Issue a GET request to https://example.com with a timeout of 10 seconds and
      verify the

      # server certificate explicitly.

      response = requests.get(''https://example.com'', timeout=10, verify=True)

      # Work with the response object

      # ...

      ```


      For more information on using the requests module see:

      - https://requests.readthedocs.io/en/latest/api/'
    subcategory: Auth
  severity: error
- id: Semgrep_python_ssl_rule-ssl-no-version
  languages:
  - python
  message: 'python_ssl_rule-ssl-no-version

    The application was found calling `ssl.wrap_socket` without a TLS protocol version
    specified.'
  metadata:
    category: Security
    explanation: "## python_ssl_rule-ssl-no-version\nThe application was found calling\
      \ `ssl.wrap_socket` without a TLS protocol version specified.\nAdditionally,\
      \ `ssl.wrap_socket` has been deprecated since Python 3.7. It is strongly\nrecommended\n\
      that newer applications use TLS 1.2 or 1.3 and `SSLContext.wrap_socket`.\n\n\
      To remediate this issue, create a new TLS context and pass in `ssl.PROTOCOL_TLS_CLIENT`\n\
      for clients or `ssl.PROTOCOL_TLS_SERVER` for servers to the `ssl.SSLContext(...)`\
      \ `protocol=`\nargument. When converting the socket to a TLS socket, use the\
      \ new `SSLContext.wrap_socket`\nmethod instead.\n\n\nExample creating a TLS\
      \ 1.3 client socket connection by using a newer version of Python\n(3.11.4)\
      \ and\nthe SSL module:\n```\nimport ssl\nimport socket\n\n# Create our initial\
      \ socket\nwith socket.socket(socket.AF_INET, socket.SOCK_STREAM) as sock:\n\
      \    # Connect the socket\n    sock.connect(('www.example.org', 443))\n\n  \
      \  # Create a new SSLContext with protocol set to ssl.PROTOCOL_TLS_CLIENT\n\
      \    # This will auto-select the highest grade TLS protocol version (1.3)\n\
      \    context = ssl.SSLContext(protocol=ssl.PROTOCOL_TLS_CLIENT)\n    # Load\
      \ our a certificates for server certificate authentication\n    context.load_verify_locations('cert.pem')\n\
      \    # Create our TLS socket, and validate the server hostname matches\n   \
      \ with context.wrap_socket(sock, server_hostname=\"www.example.org\") as tls_sock:\n\
      \        # Send some bytes over the socket (HTTP request in this case)\\\n \
      \       data = bytes('GET / HTTP/1.1\\r\\nHost: example.org\\r\\n\\r\\n', 'utf-8')\n\
      \        sent_bytes = tls_sock.send(data)\n        # Validate number of sent\
      \ bytes\n        # ...\n        # Read the response\n        resp = tls_sock.recv()\n\
      \        # Work with the response\n        # ...\n```\n\nFor more information\
      \ on the ssl module see:\n- https://docs.python.org/3/library/ssl.html"
    subcategory: Visibility
  severity: warning
- id: Semgrep_python_ssl_rule-ssl-with-bad-version
  languages:
  - python
  message: 'python_ssl_rule-ssl-with-bad-version

    The application was found calling an SSL module with SSL or TLS protocols that
    have known deficiencies.'
  metadata:
    category: Security
    explanation: "## python_ssl_rule-ssl-with-bad-version\nThe application was found\
      \ calling an SSL module with SSL or TLS protocols that have known\ndeficiencies.\n\
      It is strongly recommended that newer applications use TLS 1.2 or 1.3 and\n\
      `SSLContext.wrap_socket`.\n\nIf using the `pyOpenSSL` module, please note that\
      \ it has been deprecated and the Python\nCryptographic Authority\nstrongly suggests\
      \ moving to use the [pyca/cryptography](https://github.com/pyca/cryptography)\n\
      module instead.\n\nTo remediate this issue for the `ssl` module, create a new\
      \ TLS context and pass in\n`ssl.PROTOCOL_TLS_CLIENT` for clients or `ssl.PROTOCOL_TLS_SERVER`\
      \ for servers to the\n`ssl.SSLContext(...)` `protocol=`\nargument. When converting\
      \ the socket to a TLS socket, use the new `SSLContext.wrap_socket`\nmethod instead.\n\
      \nExample creating a TLS 1.3 client socket connection by using a newer version\
      \ of Python\n(3.11.4) and\nthe SSL module:\n```\nimport ssl\nimport socket\n\
      \n# Create our initial socket\nwith socket.socket(socket.AF_INET, socket.SOCK_STREAM)\
      \ as sock:\n    # Connect the socket\n    sock.connect(('www.example.org', 443))\n\
      \n    # Create a new SSLContext with protocol set to ssl.PROTOCOL_TLS_CLIENT\n\
      \    # This will auto-select the highest grade TLS protocol version (1.3)\n\
      \    context = ssl.SSLContext(protocol=ssl.PROTOCOL_TLS_CLIENT)\n    # Load\
      \ our a certificates for server certificate authentication\n    context.load_verify_locations('cert.pem')\n\
      \    # Create our TLS socket, and validate the server hostname matches\n   \
      \ with context.wrap_socket(sock, server_hostname=\"www.example.org\") as tls_sock:\n\
      \        # Send some bytes over the socket (HTTP request in this case)\\\n \
      \       data = bytes('GET / HTTP/1.1\\r\\nHost: example.org\\r\\n\\r\\n', 'utf-8')\n\
      \        sent_bytes = tls_sock.send(data)\n        # Validate number of sent\
      \ bytes\n        # ...\n        # Read the response\n        resp = tls_sock.recv()\n\
      \        # Work with the response\n        # ...\n```\n\nFor more information\
      \ on the ssl module see:\n- https://docs.python.org/3/library/ssl.html\n\nFor\
      \ more information on pyca/cryptography and openssl see:\n- https://cryptography.io/en/latest/openssl/"
    subcategory: Visibility
  severity: error
- id: Semgrep_python_ssl_rule-unverified-context
  languages:
  - python
  message: 'python_ssl_rule-unverified-context

    The application was found creating a SSL context using the `_create_unverified_context`.
    This effectively disables the validation of server certificates.'
  metadata:
    category: Security
    explanation: "## python_ssl_rule-unverified-context\nThe application was found\
      \ creating a SSL context using the `_create_unverified_context`.\nThis effectively\
      \ disables the validation of server certificates.\n\nThis allows for an adversary\
      \ who is in between the application and the target host to intercept\npotentially\
      \ sensitive information or transmit malicious data.\n\nTo remediate this issue\
      \ remove the call to `_create_unverified_context` and either create a\ndefault\n\
      context using `ssl.create_default_context` or create a context with TLS 1.3.\n\
      \nExample creating a TLS 1.3 client socket connection by using a newer version\
      \ of Python\n(3.11.4) and\nthe SSL module:\n```\nimport ssl\nimport socket\n\
      \n# Create our initial socket\nwith socket.socket(socket.AF_INET, socket.SOCK_STREAM)\
      \ as sock:\n    # Connect the socket\n    sock.connect(('www.example.org', 443))\n\
      \n    # Create a new SSLContext with protocol set to ssl.PROTOCOL_TLS_CLIENT\n\
      \    # This will auto-select the highest grade TLS protocol version (1.3)\n\
      \    context = ssl.SSLContext(protocol=ssl.PROTOCOL_TLS_CLIENT)\n    # Load\
      \ our a certificates for server certificate authentication\n    context.load_verify_locations('cert.pem')\n\
      \    # Create our TLS socket, and validate the server hostname matches\n   \
      \ with context.wrap_socket(sock, server_hostname=\"www.example.org\") as tls_sock:\n\
      \        # Send some bytes over the socket (HTTP request in this case)\\\n \
      \       data = bytes('GET / HTTP/1.1\\r\\nHost: example.org\\r\\n\\r\\n', 'utf-8')\n\
      \        sent_bytes = tls_sock.send(data)\n        # Validate number of sent\
      \ bytes\n        # ...\n        # Read the response\n        resp = tls_sock.recv()\n\
      \        # Work with the response\n        # ...\n```\n\nUnverified SSL context\
      \ detected. This will permit insecure connections without `verifyingSSL`\ncertificates.\
      \ Use `ssl.create_default_context()` instead."
    subcategory: Auth
  severity: error
- id: Semgrep_python_telnet_rule-import-telnib
  languages:
  - python
  message: 'python_telnet_rule-import-telnib

    The application was found using a telnet library.'
  metadata:
    category: Security
    explanation: "## python_telnet_rule-import-telnib\nThe application was found using\
      \ a telnet library. As telnet does not provide encryption, it is\nstrongly recommended\
      \ that communications use a more secure transport such as\nSSH.\n\nThe [paramiko](https://www.paramiko.org/)\
      \ library can be used to initiate SSH connections.\n\nExample using `paramiko`\
      \ SSH client:\n```\nimport paramiko\nimport scp\n\n# Create an SSH client\n\
      with paramiko.SSHClient() as ssh:\n    # Load the system host keys so we can\
      \ confirm the\n    # host we are connecting to is legitimate\n    ssh.load_system_host_keys('/home/appuser/.ssh/known_hosts')\n\
      \n    # Connect to the remote host using our SSH private key\n    ssh.connect(hostname='example.org',\n\
      \                port=22,\n                username='appuser',\n           \
      \     key_filename='/home/appuser/.ssh/private_key')\n    # Work with the connection\n\
      ```\n\nFor more information on the paramiko module see:\n- https://www.paramiko.org/"
    subcategory: Visibility
  severity: error
- id: Semgrep_python_tmpdir_rule-hardcodedtmp
  languages:
  - python
  message: 'python_tmpdir_rule-hardcodedtmp

    The application was found creating files in shared system temporary directories
    (`/tmp` or `/var/tmp`) without using the `tempfile.TemporaryFile` function.'
  metadata:
    category: Security
    explanation: "## python_tmpdir_rule-hardcodedtmp\nThe application was found creating\
      \ files in shared system temporary directories\n(`/tmp` or `/var/tmp`) without\
      \ using the `tempfile.TemporaryFile` function. Depending\non how the application\
      \ uses this temporary file, an attacker may be able to create\nsymlinks that\
      \ point to other files prior to the application creating or writing\nto the\
      \ target file, leading to unintended files being created or overwritten.\n\n\
      Example using `tempfile.TemporaryFile` to write a file:\n```\nimport tempfile\n\
      \n# Open a new temporary file using a context manager\nwith tempfile.TemporaryFile()\
      \ as fp:\n    # Write some data to the temporary file\n    fp.write(b'Some data')\n\
      \    # Seek back to beginning of file\n    fp.seek(0)\n    # Read it\n    data\
      \ = fp.read()\n# File is automatically closed/removed once we exit the with\
      \ context\n```\n\nFor more information on alternative tempfile functions see:\n\
      - https://docs.python.org/3/library/tempfile.html"
    subcategory: InsecureStorage
  severity: warning
- id: Semgrep_python_tmpdir_rule-mktemp-q
  languages:
  - python
  message: 'python_tmpdir_rule-mktemp-q

    The application was found creating temporary files with the insecure `mktemp`
    method.'
  metadata:
    category: Security
    explanation: "## python_tmpdir_rule-mktemp-q\nThe application was found creating\
      \ temporary files with the insecure `mktemp` method.\nDepending on how the application\
      \ uses this temporary file, an attacker may be able to create\nsymlinks that\
      \ point to other files prior to the application creating or writing\nto the\
      \ target file, leading to unintended files being created or overwritten.\n\n\
      To remediate this issue consider using `tempfile.TemporaryFile` instead.\n\n\
      Example using `tempfile.TemporaryFile` to write a file:\n```\nimport tempfile\n\
      \n# Open a new temporary file using a context manager\nwith tempfile.TemporaryFile()\
      \ as fp:\n    # Write some data to the temporary file\n    fp.write(b'Some data')\n\
      \    # Seek back to beginning of file\n    fp.seek(0)\n    # Read it\n    data\
      \ = fp.read()\n# File is automatically closed/removed once we exit the with\
      \ context\n```\n\nFor more information on alternative tempfile functions see:\n\
      - https://docs.python.org/3/library/tempfile.html"
    subcategory: Visibility
  severity: error
- id: Semgrep_python_urlopen_rule-urllib-urlopen
  languages:
  - python
  message: 'python_urlopen_rule-urllib-urlopen

    The application was found passing in a non-literal value to the `urllib` methods
    which issue requests. `urllib` supports the `file://` scheme, which may allow
    an adversary who can control the URL value to read arbitrary files on the file
    system.'
  metadata:
    category: Security
    explanation: '## python_urlopen_rule-urllib-urlopen

      The application was found passing in a non-literal value to the `urllib` methods
      which issue

      requests. `urllib` supports the `file://` scheme, which may allow an adversary
      who can control

      the URL value to read arbitrary files on the file system.


      To remediate this issue either hardcode the URLs being used in urllib or use
      the `requests`

      module instead.


      Example using the `requests` module to issue an HTTPS request:

      ```

      import requests

      # Issue a GET request to https://example.com with a timeout of 10 seconds

      response = requests.get(''https://example.com'', timeout=10)

      # Work with the response object

      # ...

      ```'
    subcategory: InputValidation
  severity: warning
- id: Semgrep_python_xml_rule-celement
  languages:
  - python
  message: 'python_xml_rule-celement

    The application was found using the `xml.etree` package for processing XML. Pythons
    default xml processors suffer from various XML parsing vulnerabilities and care
    must be taken when handling XML data.'
  metadata:
    category: Security
    explanation: "## python_xml_rule-celement\nThe application was found using the\
      \ `xml.etree` package for processing XML.\nPythons default xml processors suffer\
      \ from various XML parsing vulnerabilities\nand care must be taken when handling\
      \ XML data. Additionally, depending on the\nversion of Python, more critical\
      \ vulnerabilities such as eXternal XML Entity\ninjection maybe exploitable.\n\
      \nThe `etree` package suffers from the following security risks as of Python\
      \ 3.7.1:\n* Billion laughs / exponential entity expansion - May allow an adversary\
      \ to cause\n  a Denial of Service (DoS) against the application parsing arbitrary\
      \ XML.\n* Quadratic blowup entity expansion - Similar to above, but requires\
      \ a larger input\n  to cause the Denial of Service.\n\nTo remediate the above\
      \ issues, consider using the\n[defusedxml](https://pypi.org/project/defusedxml/)\n\
      library when processing untrusted XML.\n\nExample parsing an XML document using\
      \ defusedxml:\n```\nfrom defusedxml.ElementTree import parse\n\n# Parse the\
      \ inventory.xml file\net = parse('inventory.xml')\n# Get the root element\n\
      root = et.getroot()\n# Work with the root element\n# ...\n```\n\nFor more information\
      \ on the various XML parsers and their vulnerabilities please see:\n- https://docs.python.org/3/library/xml.html#xml-vulnerabilities\n\
      \nFor more information on XML security see OWASP's guide:\n- https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html#python"
    subcategory: InputValidation
  severity: warning
- id: Semgrep_python_xml_rule-element
  languages:
  - python
  message: 'python_xml_rule-element

    The application was found using the `xml.etree` package for processing XML. Pythons
    default xml processors suffer from various XML parsing vulnerabilities and care
    must be taken when handling XML data.'
  metadata:
    category: Security
    explanation: "## python_xml_rule-element\nThe application was found using the\
      \ `xml.etree` package for processing XML.\nPythons default xml processors suffer\
      \ from various XML parsing vulnerabilities\nand care must be taken when handling\
      \ XML data. Additionally, depending on the\nversion of Python, more critical\
      \ vulnerabilities such as eXternal XML Entity\ninjection maybe exploitable.\n\
      \nThe `etree` package suffers from the following security risks as of Python\
      \ 3.7.1:\n* Billion laughs / exponential entity expansion - May allow an adversary\
      \ to cause\n  a Denial of Service (DoS) against the application parsing arbitrary\
      \ XML.\n* Quadratic blowup entity expansion - Similar to above, but requires\
      \ a larger input\n  to cause the Denial of Service.\n\nTo remediate the above\
      \ issues, consider using the\n[defusedxml](https://pypi.org/project/defusedxml/)\n\
      library when processing untrusted XML.\n\nExample parsing an XML document using\
      \ defusedxml:\n```\nfrom defusedxml.ElementTree import parse\n\n# Parse the\
      \ inventory.xml file\net = parse('inventory.xml')\n# Get the root element\n\
      root = et.getroot()\n# Work with the root element\n# ...\n```\n\nFor more information\
      \ on the various XML parsers and their vulnerabilities please see:\n- https://docs.python.org/3/library/xml.html#xml-vulnerabilities\n\
      \nFor more information on XML security see OWASP's guide:\n- https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html#python"
    subcategory: InputValidation
  severity: warning
- id: Semgrep_python_xml_rule-etree
  languages:
  - python
  message: 'python_xml_rule-etree

    The application was found using the `lxml.etree` package for processing XML. Python''s
    default XML processors suffer from various XML parsing vulnerabilities and care
    must be taken when handling XML data.'
  metadata:
    category: Security
    explanation: "## python_xml_rule-etree\nThe application was found using the `lxml.etree`\
      \ package for processing XML.\nPython's default XML processors suffer from various\
      \ XML parsing vulnerabilities\nand care must be taken when handling XML data.\
      \ Additionally, depending on the\nversion of Python, more critical vulnerabilities\
      \ such as eXternal XML Entity\ninjection maybe exploitable.\n\nThe `etree` package\
      \ suffers from the following security risks as of Python 3.7.1:\n* Billion laughs\
      \ / exponential entity expansion - May allow an adversary to cause\n  a Denial\
      \ of Service (DoS) against the application parsing arbitrary XML.\n* Quadratic\
      \ blowup entity expansion - Similar to above, but requires a larger input\n\
      \  to cause the Denial of Service.\n\nTo remediate the above issues, consider\
      \ using the\n[defusedxml](https://pypi.org/project/defusedxml/)\nlibrary when\
      \ processing untrusted XML.\n\nExample parsing an XML document using defusedxml:\n\
      ```\nfrom defusedxml.ElementTree import parse\n\n# Parse the inventory.xml file\n\
      et = parse('inventory.xml')\n# Get the root element\nroot = et.getroot()\n#\
      \ Work with the root element\n# ...\n```\n\nFor more information on the various\
      \ XML parsers and their vulnerabilities please see:\n- https://docs.python.org/3/library/xml.html#xml-vulnerabilities\n\
      \nFor more information on XML security see OWASP's guide:\n- https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html#python"
    subcategory: InputValidation
  severity: warning
- id: Semgrep_python_xml_rule-expatbuilder
  languages:
  - python
  message: 'python_xml_rule-expatbuilder

    The application was found using the `xml.dom.expatbuilder` which calls the `xml.dom.minidom`
    package for processing XML. Python''s default XML processors suffer from various
    XML parsing vulnerabilities and care must be taken when handling XML data.'
  metadata:
    category: Security
    explanation: "## python_xml_rule-expatbuilder\nThe application was found using\
      \ the `xml.dom.expatbuilder` which calls the `xml.dom.minidom`\npackage for\
      \ processing XML. Python's default XML processors suffer from various XML parsing\n\
      vulnerabilities\nand care must be taken when handling XML data. Additionally,\
      \ depending on the\nversion of Python, more critical vulnerabilities such as\
      \ eXternal XML Entity\ninjection maybe exploitable.\n\nThe `xml.dom.minidom`\
      \ package suffers from the following security risks as of Python 3.7.1:\n* Billion\
      \ laughs / exponential entity expansion - May allow an adversary to cause\n\
      \  a Denial of Service (DoS) against the application parsing arbitrary XML.\n\
      * Quadratic blowup entity expansion - Similar to above, but requires a larger\
      \ input\n  to cause the Denial of Service.\n\nTo remediate the above issues,\
      \ consider using the\n[defusedxml](https://pypi.org/project/defusedxml/)\nlibrary\
      \ when processing untrusted XML.\n\nExample parsing an XML document using defusedxml:\n\
      ```\nfrom defusedxml.ElementTree import parse\n\n# Parse the inventory.xml file\n\
      et = parse('inventory.xml')\n# Get the root element\nroot = et.getroot()\n#\
      \ Work with the root element\n# ...\n```\n\nFor more information on the various\
      \ XML parsers and their vulnerabilities please see:\n- https://docs.python.org/3/library/xml.html#xml-vulnerabilities\n\
      \nFor more information on XML security see OWASP's guide:\n- https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html#python"
    subcategory: InputValidation
  severity: warning
- id: Semgrep_python_xml_rule-expatreader
  languages:
  - python
  message: 'python_xml_rule-expatreader

    The application was found using the `xml.sax.expatreader` package for processing
    XML. Python''s default XML processors suffer from various XML parsing vulnerabilities
    and care must be taken when handling XML data.'
  metadata:
    category: Security
    explanation: "## python_xml_rule-expatreader\nThe application was found using\
      \ the `xml.sax.expatreader` package for processing XML. Python's\ndefault XML\
      \ processors suffer from various XML parsing vulnerabilities\nand care must\
      \ be taken when handling XML data. Additionally, depending on the\nversion of\
      \ Python, more critical vulnerabilities such as eXternal XML Entity\ninjection\
      \ maybe exploitable.\n\nThe `xml.sax` package suffers from the following security\
      \ risks as of Python 3.7.1:\n* Billion laughs / exponential entity expansion\
      \ - May allow an adversary to cause\n  a Denial of Service (DoS) against the\
      \ application parsing arbitrary XML.\n* Quadratic blowup entity expansion -\
      \ Similar to above, but requires a larger input\n  to cause the Denial of Service.\n\
      \nTo remediate the above issues, consider using the\n[defusedxml](https://pypi.org/project/defusedxml/)\n\
      library when processing untrusted XML.\n\nExample parsing an XML document using\
      \ defusedxml:\n```\nfrom defusedxml.ElementTree import parse\n\n# Parse the\
      \ inventory.xml file\net = parse('inventory.xml')\n# Get the root element\n\
      root = et.getroot()\n# Work with the root element\n# ...\n```\n\nFor more information\
      \ on the various XML parsers and their vulnerabilities please see:\n- https://docs.python.org/3/library/xml.html#xml-vulnerabilities\n\
      \nFor more information on XML security see OWASP's guide:\n- https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html#python"
    subcategory: InputValidation
  severity: warning
- id: Semgrep_python_xml_rule-minidom
  languages:
  - python
  message: 'python_xml_rule-minidom

    The application was found using the `xml.dom.minidom` package for processing XML.
    Python''s default XML processors suffer from various XML parsing vulnerabilities
    and care must be taken when handling XML data.'
  metadata:
    category: Security
    explanation: "## python_xml_rule-minidom\nThe application was found using the\
      \ `xml.dom.minidom` package for processing XML. Python's\ndefault XML processors\
      \ suffer from various XML parsing vulnerabilities\nand care must be taken when\
      \ handling XML data. Additionally, depending on the\nversion of Python, more\
      \ critical vulnerabilities such as eXternal XML Entity\ninjection maybe exploitable.\n\
      \nThe `xml.dom.minidom` package suffers from the following security risks as\
      \ of Python 3.7.1:\n* Billion laughs / exponential entity expansion - May allow\
      \ an adversary to cause\n  a Denial of Service (DoS) against the application\
      \ parsing arbitrary XML.\n* Quadratic blowup entity expansion - Similar to above,\
      \ but requires a larger input\n  to cause the Denial of Service.\n\nTo remediate\
      \ the above issues, consider using the\n[defusedxml](https://pypi.org/project/defusedxml/)\n\
      library when processing untrusted XML.\n\nExample parsing an XML document using\
      \ defusedxml:\n```\nfrom defusedxml.ElementTree import parse\n\n# Parse the\
      \ inventory.xml file\net = parse('inventory.xml')\n# Get the root element\n\
      root = et.getroot()\n# Work with the root element\n# ...\n```\n\nFor more information\
      \ on the various XML parsers and their vulnerabilities please see:\n- https://docs.python.org/3/library/xml.html#xml-vulnerabilities\n\
      \nFor more information on XML security see OWASP's guide:\n- https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html#python"
    subcategory: InputValidation
  severity: warning
- id: Semgrep_python_xml_rule-pulldom
  languages:
  - python
  message: 'python_xml_rule-pulldom

    The application was found using the `xml.dom.pulldom` package for processing XML.
    Python''s default XML processors suffer from various XML parsing vulnerabilities
    and care must be taken when handling XML data.'
  metadata:
    category: Security
    explanation: "## python_xml_rule-pulldom\nThe application was found using the\
      \ `xml.dom.pulldom` package for processing XML. Python's\ndefault XML processors\
      \ suffer from various XML parsing vulnerabilities\nand care must be taken when\
      \ handling XML data. Additionally, depending on the\nversion of Python, more\
      \ critical vulnerabilities such as eXternal XML Entity\ninjection maybe exploitable.\n\
      \nThe `xml.dom.pulldom` package suffers from the following security risks as\
      \ of Python 3.7.1:\n* Billion laughs / exponential entity expansion - May allow\
      \ an adversary to cause\n  a Denial of Service (DoS) against the application\
      \ parsing arbitrary XML.\n* Quadratic blowup entity expansion - Similar to above,\
      \ but requires a larger input\n  to cause the Denial of Service.\n\nTo remediate\
      \ the above issues, consider using the\n[defusedxml](https://pypi.org/project/defusedxml/)\n\
      library when processing untrusted XML.\n\nExample parsing an XML document using\
      \ defusedxml:\n```\nfrom defusedxml.ElementTree import parse\n\n# Parse the\
      \ inventory.xml file\net = parse('inventory.xml')\n# Get the root element\n\
      root = et.getroot()\n# Work with the root element\n# ...\n```\n\nFor more information\
      \ on the various XML parsers and their vulnerabilities please see:\n- https://docs.python.org/3/library/xml.html#xml-vulnerabilities\n\
      \nFor more information on XML security see OWASP's guide:\n- https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html#python"
    subcategory: InputValidation
  severity: warning
- id: Semgrep_python_xml_rule-sax
  languages:
  - python
  message: 'python_xml_rule-sax

    The application was found using the `xml.sax` package for processing XML. Python''s
    default XML processors suffer from various XML parsing vulnerabilities and care
    must be taken when handling XML data.'
  metadata:
    category: Security
    explanation: "## python_xml_rule-sax\nThe application was found using the `xml.sax`\
      \ package for processing XML.\nPython's default XML processors suffer from various\
      \ XML parsing vulnerabilities\nand care must be taken when handling XML data.\
      \ Additionally, depending on the\nversion of Python, more critical vulnerabilities\
      \ such as eXternal XML Entity\ninjection maybe exploitable.\n\nThe `xml.sax`\
      \ package suffers from the following security risks as of Python 3.7.1:\n* Billion\
      \ laughs / exponential entity expansion - May allow an adversary to cause\n\
      \  a Denial of Service (DoS) against the application parsing arbitrary XML.\n\
      * Quadratic blowup entity expansion - Similar to above, but requires a larger\
      \ input\n  to cause the Denial of Service.\n\nTo remediate the above issues,\
      \ consider using the\n[defusedxml](https://pypi.org/project/defusedxml/)\nlibrary\
      \ when processing untrusted XML.\n\nExample parsing an XML document using defusedxml:\n\
      ```\nfrom defusedxml.ElementTree import parse\n\n# Parse the inventory.xml file\n\
      et = parse('inventory.xml')\n# Get the root element\nroot = et.getroot()\n#\
      \ Work with the root element\n# ...\n```\n\nFor more information on the various\
      \ XML parsers and their vulnerabilities please see:\n- https://docs.python.org/3/library/xml.html#xml-vulnerabilities\n\
      \nFor more information on XML security see OWASP's guide:\n- https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html#python"
    subcategory: InputValidation
  severity: warning
